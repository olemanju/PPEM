package com.pp.util;
import java.io.FileInputStream;
import java.io.FileOutputStream;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.pp.common.NKConstants;

public class ExcelutilObject {

	private static XSSFWorkbook ExcelWBook;
	private static XSSFSheet ExcelWSheet;
	 
	
	//private static XSSFWorkbook ExeclWBook;

	private static XSSFCell Cell;

	private static XSSFRow Row;

	
//This method is to set the File path and to open the Excel file, Pass Excel Path and Sheetname as Arguments to this method

public static void setExcelFile(String Path,String SheetName) throws Exception 
{

		try {

			// Open the Excel file

		FileInputStream ExcelFile = new FileInputStream(Path);

		// Access the required test data sheet

		ExcelWBook = new XSSFWorkbook(ExcelFile);

		ExcelWSheet = ExcelWBook.getSheet(SheetName);

		} 
		catch (Exception e)
		{

			throw (e);

		}

}

//This method is to read the test data from the Excel cell, in this we are passing parameters as Row num and Col num

public  static String getCellData(int RowNum, int ColNum) throws Exception{

		try{

			Cell = ExcelWSheet.getRow(RowNum).getCell(ColNum);

			String CellData = Cell.getStringCellValue().toString();
		
			return CellData;

			}
		catch (Exception e)
		{

			return"";

			}

}

//This method is to write in the Excel cell, Row num and Col num are the parameters

public  static void setCellData(String sheetName,String Result,  int RowNum, int ColNum,String path) throws Exception	{

		try{

			ExcelWBook = new XSSFWorkbook(path);
			ExcelWSheet = ExcelWBook.getSheet(sheetName);
			
			Row  = ExcelWSheet.getRow(RowNum);

		Cell = Row.getCell(ColNum, Row.RETURN_BLANK_AS_NULL);

		if (Cell == null) {

			Cell = Row.createCell(ColNum);

			Cell.setCellValue(Result);

			} else {

				Cell.setCellValue(Result);

			}

// Constant variables Test Data path and Test Data file name

				FileOutputStream fileOut = new FileOutputStream(NKConstants.Path_TestData);

				ExcelWBook.write(fileOut);

				fileOut.flush();

				fileOut.close();

			}catch(Exception e){

				throw (e);

		}

	}

public static void writeDataToExcel(String sheetName,int row,int column,String value,String path) throws Exception
{
	
	FileOutputStream fileOut = new FileOutputStream(path);
	
	HSSFWorkbook workbook = new HSSFWorkbook();
	HSSFSheet worksheet = workbook.createSheet(sheetName);
	// index from 0,0... cell A1 is cell(0,0)
	HSSFRow row1 = worksheet.createRow((short)row);
	HSSFCell cellA1 = row1.createCell((short) column);
	cellA1.setCellValue(value);
	workbook.write(fileOut);
	fileOut.flush();
	fileOut.close();
	
	
}

	
}


2
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.hs.tests</groupId>
  <artifactId>HRMSTest</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>HRMSTest</name>
   <url>http://maven.apache.org</url>
  <build>
  <plugins>
            <plugin>
                 <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <encoding>iso-8859-1</encoding>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>
            <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
          
            <version>2.18.1</version>
            <configuration>
                <testFailureIgnore>true</testFailureIgnore>
					<suiteXmlFiles>
					<suiteXmlFile>${basedir}\src\test\resource\TestSuite\${SuiteFile}</suiteXmlFile>
					</suiteXmlFiles>
					
					<systemProperties>
					    <property>
					        	<name>browser.NAME</name>
					        	<value>${browser.NAME}</value>
                        </property>
						<property>
					        	<name>url</name>
					        	<value>${project.url}</value>
                        </property>
                	</systemProperties>
                	
            </configuration>
        </plugin>
            </plugins>
            </build>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>2.53.0</version>
    </dependency> 
    
    <!-- <dependency>
	<groupId>org.apache.poi</groupId>
	<artifactId>poi</artifactId>
	<version>3.9</version>
</dependency> -->

<!-- <dependency>
	<groupId>org.apache.poi</groupId>
	<artifactId>poi-ooxml</artifactId>
	<version>3.9</version>
</dependency> -->

<dependency>
	<groupId>org.apache.poi</groupId>
	<artifactId>poi-ooxml</artifactId>
	<version>3.9</version>
	<exclusions>
		<exclusion>
			<artifactId>xml-apis</artifactId>
			<groupId>xml-apis</groupId>
		</exclusion>		
	</exclusions>
</dependency>

<!-- <dependency>
	<groupId>org.apache.poi</groupId>
	<artifactId>poi</artifactId>
	<version>3.11</version>
</dependency> -->

<dependency>
	<groupId>org.apache.logging.log4j</groupId>
	<artifactId>log4j-api</artifactId>
	<version>2.3</version>
</dependency>

<dependency>
  <groupId>org.testng</groupId>
  <artifactId>testng</artifactId>
  <version>6.9.4</version>
  <scope>test</scope>
</dependency>

<dependency>
	<groupId>log4j</groupId>
	<artifactId>log4j</artifactId>
	<version>1.2.17</version>
</dependency>

  </dependencies>
  
</project>

public static final String Path_Write_TestData= System.getProperty("user.dir")+"\\src\\test\\resource\\TestData\\writeTestDataSheet.xls";

public void getHours1List() throws Exception
	{
		try
		{
			List<WebElement> hrlist1= uiDriver.findElements(listofhrs1_xpath);
				
			for (WebElement list1 : hrlist1) 
			{
				System.out.println(list1.getText());
				Ref_value=list1.getText();
				ExcelutilObject.writeDataToExcel("Nanda", 1, 2, Ref_value, NKConstants.Path_Write_TestData);
			}
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE GETTING THE LIST DETAILS OF HOURS1" + "\n getHours1List" + e.getLocalizedMessage());
		}
	}

	
	package com.st.test;

import org.testng.annotations.Test;

import com.st.common.NKCommon;
import com.st.common.NKConstants;
import com.st.pages.HomePage;
import com.st.pages.JobListingsPage;
import com.st.pages.SearchResultPage;
import com.st.util.BaseTestObject;

public class SearchPageTest extends BaseTestObject {

SearchResultPage objSearchResultPage;
HomePage objHomePage;
JobListingsPage objJobListingPage;
NKCommon objNKCommon;
	
	@Test(priority = -1)
	public void popUpClose() throws InterruptedException{
		objNKCommon = new NKCommon(uiDriver);
		objNKCommon.closepopUp();
		
	}
	
	@Test(priority=0)
	public void verifySearchSection() throws Exception{
		objHomePage = new HomePage(uiDriver);
		objHomePage.verifySkillTextBox();
		objHomePage.verifyLocationTextBox();
		objHomePage.verifyExperiencedropdown();		
	}
	
	@Test(priority=3)
	public void verifySearchBySkill() throws Exception{
		
		objNKCommon = new NKCommon(uiDriver);
		objNKCommon.closepopUp();
		objHomePage = new HomePage(uiDriver);
		objHomePage.enterSkillEntry(NKConstants.SKILL);
		objHomePage.clickOnSearchButton();		
		SearchResultPage searchRes = new SearchResultPage(uiDriver);
	    String displayedSkill = searchRes.getSkillDisplayed();
		searchRes.verifySkillsSelectedAndDisplayed(NKConstants.SKILL,displayedSkill);
	}
	
	@Test(priority=1)
	public void verifySearchByLocationField() throws Exception{
		objHomePage = new HomePage(uiDriver);
		objHomePage.enterLocation(NKConstants.LOCATION);
		objSearchResultPage = objHomePage.clickOnSearchButton();
		SearchResultPage searchRes = new SearchResultPage(uiDriver);
		searchRes.verifyJobLocations();
		objHomePage.clickOnSiteLogo();
		
	}
	
	@Test(priority=2)
	public void verifySearchByExperienceField() throws Exception{
		objNKCommon = new NKCommon(uiDriver);
		objNKCommon.closepopUp();
		objHomePage = new HomePage(uiDriver);
		objHomePage.enterSkillEntry(NKConstants.SKILL);
		objHomePage.SelectExperience();
		int exp = objHomePage.getSelectedYrsExp();
		objSearchResultPage = objHomePage.clickOnSearchButton();
		objSearchResultPage.verifyExp(exp);
		objHomePage.clickOnSiteLogo();
	}
		
	@Test(priority = 14)
	public void verifyRefineByEducation() throws Exception{
		objSearchResultPage = new SearchResultPage(uiDriver);
		objSearchResultPage.clickOnEducation();
		objSearchResultPage.selectEducationType();
		String educationSelected = objSearchResultPage.getSelectedEducationType();
		objSearchResultPage.clickOnSubmitButton();
		String parentWindow = uiDriver.getWindowHandle();
		objJobListingPage = objSearchResultPage.clickOnSearchBody();
		objJobListingPage.switchToNewWindow();
		objJobListingPage.verifyEducationSelectedUG(educationSelected);
		objJobListingPage.closeWindow();
		Thread.sleep(1000);
		objSearchResultPage.switchToParentWindow(parentWindow);
		objSearchResultPage.selectEducationType();
		objSearchResultPage.clickOnEducation();
	}

	@Test(priority = 12)	
	public void verifyRefineByIndustryType() throws Exception{
		objSearchResultPage = new SearchResultPage(uiDriver);
		objSearchResultPage.clickOnIndustry();
		objSearchResultPage.verifyIndustryDD();
		objSearchResultPage.clickOnSoftwareServicesIndustryCheckbox();
		String industryTypeSelected = objSearchResultPage.getIndusrtySelected();
		objSearchResultPage.clickOnSubmitButton();
		String parentWindow = uiDriver.getWindowHandle();
		objJobListingPage = objSearchResultPage.clickOnSearchBody();
		objJobListingPage.switchToNewWindow();
		objJobListingPage.verifyIndustryType(industryTypeSelected);
		objJobListingPage.closeWindow();
		objSearchResultPage.switchToParentWindow(parentWindow);
		objSearchResultPage.clickOnSoftwareServicesIndustryCheckbox();
		objSearchResultPage.clickOnIndustry();
		
	}
	
	@Test(priority = 13)
	public void verifyRefineByIndustryPopUp() throws Exception{
		objSearchResultPage = new SearchResultPage(uiDriver);
		objSearchResultPage.clickOnIndustry();
		objSearchResultPage.verifyIndustryDD();
		objSearchResultPage.verifyIndustryMoreLink();
		objSearchResultPage.clickOnIndustryMoreLink();
		objSearchResultPage.clickOnMorePopUpClose();
		objSearchResultPage.clickOnIndustryMoreLink();
		String morePopUpTitle = objSearchResultPage.getMorePopUpHeaderTitle();
		objSearchResultPage.verifyPopUpHeaderTitle(morePopUpTitle, NKConstants.TITLE_INDUSTRYPOPUP);
		objSearchResultPage.clickOnITSoftwareServicesIndustryCheckbox();
		String industryTypeSelected = objSearchResultPage.getMorePopUpIndusrtySelected();
		objSearchResultPage.clickOnPopUpRefineButton();
		String parentWindow = uiDriver.getWindowHandle();
		objJobListingPage = objSearchResultPage.clickOnSearchBody();
		objJobListingPage.switchToNewWindow();
		objJobListingPage.verifyIndustryType(industryTypeSelected);
		objJobListingPage.closeWindow();
		objSearchResultPage.switchToParentWindow(parentWindow);
		objSearchResultPage.clickOnIndustryMoreLink();
		objSearchResultPage.clickOnITSoftwareServicesIndustryCheckbox();
		objSearchResultPage.clickOnPopUpRefineButton();
		objSearchResultPage.clickOnIndustry();
		
		
	}
	
	@Test(priority = 15)
	public void verifyRefineByEducationPopUp() throws Exception{
		objSearchResultPage = new SearchResultPage(uiDriver);
		objSearchResultPage.clickOnEducation();
		objSearchResultPage.clickOnEducationMoreLink();
		objSearchResultPage.clickOnMorePopUpClose();
		objSearchResultPage.clickOnEducationMoreLink();
		String morePopUpTitle = objSearchResultPage.getMorePopUpHeaderTitle();
		objSearchResultPage.verifyPopUpHeaderTitle(morePopUpTitle, NKConstants.TITLE_EDUCATIONPOPUP);
		objSearchResultPage.clickOnMCAEducationPopUpCheckbox();
		String educationSelected = objSearchResultPage.getMorePopUpEducationSelected();
		objSearchResultPage.clickOnPopUpRefineButton();
		String parentWindow = uiDriver.getWindowHandle();
		objJobListingPage = objSearchResultPage.clickOnSearchBody();
		objJobListingPage.switchToNewWindow();
		objJobListingPage.verifyEducationSelectedPG(educationSelected);
		objJobListingPage.closeWindow();
		objSearchResultPage.switchToParentWindow(parentWindow);
		objSearchResultPage.clickOnEducationMoreLink();
		objSearchResultPage.verifyPopUpHeaderTitle(morePopUpTitle, NKConstants.TITLE_EDUCATIONPOPUP);
		objSearchResultPage.clickOnMCAEducationPopUpCheckbox();
		objSearchResultPage.clickOnPopUpRefineButton();
		objSearchResultPage.clickOnEducation();
		
	}
		
	@Test(priority = 9)	
	public void verifyRefineByFreshness() throws Exception{	
		objSearchResultPage = new SearchResultPage(uiDriver);
		objSearchResultPage.clickOnFreshnessArrow();
		objSearchResultPage.verifyFressnessDropdown();
		objSearchResultPage.verifyFressnessDropdownContents();
		objSearchResultPage.clickOnFreshnesSelected();
		int daysSelected = objSearchResultPage.getFreshnessSelected();
		objSearchResultPage.clickOnSubmitButton();
		objSearchResultPage.verifyDatePosted(daysSelected);
	}
	
	@Test(priority = 11)
	public void verifyRefineByLocationPopUp() throws Exception{
		objSearchResultPage = new SearchResultPage(uiDriver);
		objSearchResultPage.verifyLocationDropdown();
		objSearchResultPage.clickOnLocationMoreLink();
		objSearchResultPage.verifyLocationCheckBoxes();
		objSearchResultPage.clickOnMorePopUpClose();
		objSearchResultPage.clickOnLocationMoreLink();
		objSearchResultPage.clickOnLocationPune();
		String LocationSelected = objSearchResultPage.getLocationPuneSelected();
		objSearchResultPage.clickOnPopUpRefineButton();
		objSearchResultPage.verifyDisplayedJobLocations(LocationSelected);
		objSearchResultPage.clickOnLocationMoreLink();
		objSearchResultPage.clickOnLocationPune();
		objSearchResultPage.clickOnPopUpRefineButton();
		objSearchResultPage.clickOnLocation();
		Thread.sleep(2000);
		
	}
	
	@Test(priority = 10)
	public void verifySearchByLocationSection() throws Exception{
		objSearchResultPage = new SearchResultPage(uiDriver);
		objSearchResultPage.clickOnLocation();
		objSearchResultPage.verifyLocationDropdown();
		objSearchResultPage.clickOnLocationBangalore();
		String LocationSelected = objSearchResultPage.getLocationBangaloreSelected();
		objSearchResultPage.clickOnSubmitButton();
		objSearchResultPage.verifyDisplayedJobLocations(LocationSelected);
		objSearchResultPage.clickOnLocationBangalore();
	}
		
	@Test(priority = 4)
	public void verifySearchResultsPage(){
		objSearchResultPage = new SearchResultPage(uiDriver);
		objSearchResultPage.verifyNaukriLogo();
		objSearchResultPage.verifyHeaderIcons();
		objSearchResultPage.verifyTabs();
		objSearchResultPage.verifyEmployerZoneLink();
		objSearchResultPage.verifyBuyOnlineLink();
		objSearchResultPage.verifySearchResultHead();
		objSearchResultPage.verifySearchResultBody();
		objSearchResultPage.verifyAdvancedSearchLink();
		objSearchResultPage.verifyRefineSection();
		objSearchResultPage.verifyRecentSearchSection();
		objSearchResultPage.verifyRegisterNowForm();
		objSearchResultPage.verifySubmitButton();
		objSearchResultPage.getJobsInboxDisplayed();
		objSearchResultPage.verifyFooterSection();
		objSearchResultPage.verifyPartnerSection();
		objSearchResultPage.verifyDisclaimer();
		objSearchResultPage.verifyfressnessSection();
	}
	
	@Test(priority = 5)
	public void verifyRefineResultsSection(){
		objSearchResultPage = new SearchResultPage(uiDriver);
		objSearchResultPage.verifyLocationSection();
		objSearchResultPage.verifyIndustrySection();
		objSearchResultPage.verifySalarySection();
		objSearchResultPage.verifyEducationSection();
		objSearchResultPage.verifyEmployerTypeSection();
		objSearchResultPage.verifyJobTypeSection();
		objSearchResultPage.verifySubmitButton();
			
	}
	
	@Test(priority = 8)
	public void verifySearchResultsSection(){
		objSearchResultPage = new SearchResultPage(uiDriver);
		objSearchResultPage.verifyJobCount();
		objSearchResultPage.verifyDetailedViewIcon();
		objSearchResultPage.verifyDetailedViewSelectedByDefault();
		objSearchResultPage.verifyListViewIcon();
		objSearchResultPage.verifySortByDropdown();
		String defaultSortByValue = objSearchResultPage.getDefaultSortByValue();
		objSearchResultPage.verifySortByDDDefault(defaultSortByValue,NKConstants.SORTBYDEFAULTSELECTION);
		objSearchResultPage.verifySortByArrow();
		objSearchResultPage.verifySortByDDDate();			
	}
	
	@Test(priority = 7)
	public void verifySearchDetailedViewResults() throws Exception{
		
		objSearchResultPage.clickOnDetailedViewIcon();
		objSearchResultPage.verifyResultBodyTitle();
		objSearchResultPage.verifyResultBodyOrganization();
		objSearchResultPage.verifyResultBodyExperienceRequirements();
		objSearchResultPage.verifyResultBodyJobLocation();
		objSearchResultPage.verifyResultBodykeySkills();
		objSearchResultPage.verifyResultBodyJobDescription();
		objSearchResultPage.verifyResultBodyOtherDetails();
		
	}
	
	@Test(priority = 6)
	public void verifySearchListingViewResults() throws Exception{
		
		objSearchResultPage.clickOnListViewIcon();
		objSearchResultPage.verifyResultBodyTitle();
		objSearchResultPage.verifyResultBodyOrganization();
		objSearchResultPage.verifyResultBodyExperienceRequirements();
		objSearchResultPage.verifyResultBodyJobLocation();
		objSearchResultPage.verifyResultBodyOtherDetails();		
		objSearchResultPage.verifyResultBodyJobDescForListingView();
		objSearchResultPage.verifyResultBodySkillsForListingView();
		
		
	}
	
}	



package com.st.test;

import java.util.Properties;

import org.apache.log4j.Logger;
import org.apache.log4j.Priority;
import org.testng.Assert;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.st.common.NKCommon;
import com.st.common.NKConstants;
import com.st.pages.CreateJobAlert;
import com.st.pages.CustomerSupportPage;
import com.st.pages.HomePage;
import com.st.pages.InfoEdgePage;
import com.st.pages.JobSearchNaukriPage;
import com.st.pages.LoginNaukriPage;
import com.st.pages.LoginRecruitNaukriPage;
import com.st.pages.MyNaukriPage;
import com.st.pages.RecruitNaukriPage;
import com.st.pages.ResumeNaukriPage;
import com.st.pages.TermsAndConditions;
import com.st.util.BaseTestObject;
import com.st.util.ExcelutilObject;
import com.thoughtworks.selenium.webdriven.commands.GetSelectOptions;



public class HomePageTest extends BaseTestObject

{
	private static Logger Log = Logger.getLogger(Logger.class.getName());
	

HomePage objHomePage;
LoginRecruitNaukriPage objLoginRecruitNaukriPage;
RecruitNaukriPage objRecruitNaukriPage;
LoginNaukriPage objLoginNaukriPage;
MyNaukriPage objMyNaukriPage;
TermsAndConditions objTermsAndConditions;
CreateJobAlert objCreateJobAlert;
ResumeNaukriPage objResumeNaukriPage;
CustomerSupportPage objCustomerSupportPage;
NKCommon objNKCommon;
JobSearchNaukriPage objJobSearchNaukriPage;
InfoEdgePage objInfoEdgePage;
//IMP for Excel 
Properties objProperties=getPropertyContents();


boolean flag;
String actual_Result=null;
String parent_window=null;
public String parentWindowName = "Jobs - Recruitment - Job Search - Employment - Job Vacancies - Naukri.com".trim();


@Parameters({"browserType","url"})


@Test(priority=1, enabled=true)
public void clickOnSiteLogoAndCheckThePageTitle() throws Exception
{
	Log.info("----> Clicking on Site Logo and Verifying Home Page Title<------------");
try 
{
	
	objHomePage= new HomePage(uiDriver);
	flag=objHomePage.verifySiteLogo();
	Assert.assertTrue(flag, "Site Logo is not Matching");
	objHomePage.clickOnSiteLogo();
	objHomePage.verifyHomePageTitle();
	objHomePage.getHeaderLinksName();
} 
catch (Exception e) 
{
	throw new Exception("FAILED CLICK ON SITELOGO AND VERFIY PAGETITLE TESTCASE" + "\n clickOnSiteLogoAndCheckThePageTitle" +e.getLocalizedMessage());
}

}

@Test (priority=3, enabled=true)
public void clickOnEmployerZone() throws Exception
{
Log.info("Clicking on the Employer Zone Link");
/*String parentWindowName =uiDriver.getWindowHandle();
System.out.println("HP tilte:"+parentWindowName);*/
try 
{
	objHomePage= new HomePage(uiDriver);
	objHomePage.verifyHomePageTitle();
	flag=objHomePage.verifyEmplyerZone();
	Assert.assertTrue(flag, "Employerzone Link is not displayed");
	objLoginRecruitNaukriPage=objHomePage.clickEmployerZone();
	objLoginRecruitNaukriPage.waitImplicit(5000);
	objLoginRecruitNaukriPage.getLoginRecruiteNaukriGetTitle();
	flag=objLoginRecruitNaukriPage.verifyLoginRecruiteNaukriSiteLogo();
	Assert.assertTrue(flag, "Login Recruit Naukri Site Logo is not displayed");
	flag=objLoginRecruitNaukriPage.verifyRequestInformationText();
	Assert.assertTrue(flag, "Verify Request Information Text is not displayed");
	objHomePage=objLoginRecruitNaukriPage.clickOnRecruitNaukriSiteLogo();
	objHomePage.verifyHomePageTitle();
} 
catch (Exception e) 
{
	
	throw new Exception("FAILED WHILE CLICKING ON EMPLOYER ZONE TESTCASE" + "\n clickOnEmployerZone " +e.getLocalizedMessage());
	
	
}

//Adding screenshot
/*catch (AssertionError  error) {
	Assert.fail();
	
}*/
}
@Test (priority=4, enabled=true)
public void clickOnBuyonlineLinks() throws Exception
{
	/*String parentWindowName =uiDriver.getWindowHandle();
	System.out.println("HP tilte:"+parentWindowName);*/
try 
{
	objHomePage= new HomePage(uiDriver);
	flag=objHomePage.verifyBuyOnline();
	Assert.assertTrue(flag, "Buy online object is Missing");
	//parent_window=uiDriver.getWindowHandle();
	objRecruitNaukriPage=objHomePage.clickOnBuyOnLineSubMenu();
	objRecruitNaukriPage.verifyourorder();
	objRecruitNaukriPage.verifyClickOnHereLink();
	objLoginNaukriPage=objRecruitNaukriPage.clickONClickhere();
	objLoginNaukriPage.verifySiteLogo();
	objHomePage=objLoginNaukriPage.clickOnSiteLogo();
	objHomePage.verifyHomePageTitle();
	flag=objHomePage.verifyBuyOnline();
	Assert.assertTrue(flag, "Buy online object is Missing");
	objRecruitNaukriPage=objHomePage.clickOnPostAnInstaJob();
	objRecruitNaukriPage.verifyRecruitNaukriSiteLogo();
	objHomePage=objRecruitNaukriPage.clickRecruiteNaukriSiteLogo();
	objHomePage.verifyHomePageTitle();
	
	
	
} catch (Exception e) 
{
	throw new Exception("FAILED WHILE CLICKING ON BUY ONLINE LINKS" + "\n clickOnBuyLinks " +e.getLocalizedMessage());
}	
/*finally {
	closeAndSwitchToParent(parentWindowName);
}*/
}



@Test (priority=5,enabled=true)
public void clickOnPostYourCV() throws Exception
{
	String parentWindowName = uiDriver.getWindowHandle();
	try
	{
		objHomePage=new HomePage(uiDriver);
		objHomePage.verifyIagreeTermsAndConditionsPara();
		objHomePage.verifyTermsAndConditionsLink();
		objJobSearchNaukriPage=objHomePage.clickOnTermsAndConditionsLink();
		objJobSearchNaukriPage.verifyCloseWindowTermsandCondition();
		objJobSearchNaukriPage.clickOnCloseWindowTermsandConditions();
		uiDriver.switchTo().window(parentWindowName);
		Thread.sleep(5000);
		objHomePage.verifyEnterEmailIDTextBox();
		objHomePage.enterEmailIdText("agtewes1se.edws@gmail.com");
		objHomePage.verifyCreatePassword();
		objHomePage.enterCreatePassword("jaskjasd");
		objHomePage.verifyPostYourCV();
		objMyNaukriPage =objHomePage.clickOnPostYourCV();
		objMyNaukriPage.verifyLogoutLink();
		objLoginNaukriPage=objMyNaukriPage.clickOnLogoutLink();
		objLoginNaukriPage.clickOnLoginAgain();
		objLoginNaukriPage.waitImplicit(4000);
		objHomePage=objLoginNaukriPage.clickOnSiteLogo();
		objHomePage.verifyHomePageTitle();
		
		
		
	} catch (Exception e) 
	{
		throw new Exception("Failed click on Post your CV Test case" + "\n clickOnPostYourCV" +e.getLocalizedMessage());
	}
	
}

@Test (priority=6, enabled=true)
public void clickOnCreateJobAlert() throws Exception
{
	String parentWindowName = uiDriver.getWindowHandle();
	try 
	{
		objHomePage= new HomePage(uiDriver);
		objHomePage.verifyGetMatchedJobsPara();
		objHomePage.verifyCreateJobAlertButton();
		objCreateJobAlert=objHomePage.clickonCreateJobAlertButton();
		objCreateJobAlert.verifyTellUsTextisPresent();
		objCreateJobAlert.verifyCloseImagebutton();
		objHomePage=objCreateJobAlert.clickOnCloseImagebutton();
		objHomePage.verifyHomePageTitle();
		
		//objCreateJobAlert.closeBrowser();
		
		
	} catch (Exception e)
	{
		throw new Exception("FAILED CREATE JOB ALERT TEST CASE " + "\n clickOnCreateJobAlert" +e.getLocalizedMessage() );
	}
}

@Test (priority=2, enabled=true)
public void clickOnNaukriFastForwardLink() throws Exception
{
	try 
	{
		objHomePage= new HomePage(uiDriver);
		objHomePage.verifyNaukriFastForwardImageLink();
		objResumeNaukriPage=objHomePage.clickOnNaukriFastForwardImageLink();
		objResumeNaukriPage.waitImplicit();
		//objResumeNaukriPage.verifyNaukriFastForwardTitle();
		objResumeNaukriPage.verifyINeedImpresive();
		objResumeNaukriPage.verifyCustomerServiceLink();
		objResumeNaukriPage.clickOnCustomerSupportService();
		objResumeNaukriPage.verifyHomeImage();
		objHomePage=objResumeNaukriPage.clickOnHomeImage();
		objHomePage.verifyHomePageTitle();
		objHomePage.verifyKnowYourResumeScoreLink();
		objResumeNaukriPage=objHomePage.clickOnKnowYourResumeScoreLink();
		objResumeNaukriPage.waitImplicit();
		objResumeNaukriPage.verifyNaukriFastforwardSitelogo();
		objResumeNaukriPage.clickOnNaukriFastforwardSitelogo();
		Thread.sleep(4000);
		objResumeNaukriPage.verifyCustomerServiceLink();
		objResumeNaukriPage.clickOnCustomerSupportService();
		objResumeNaukriPage.verifyHomeImage();
		objHomePage=objResumeNaukriPage.clickOnHomeImage();
		objHomePage.verifyHomePageTitle();
		objHomePage.verifyResumeFeedbackReportLink();
		objResumeNaukriPage=objHomePage.clickOnResumeFeedbackReportLink();
		objResumeNaukriPage.verifyNaukriFastforwardSitelogo();
		objResumeNaukriPage.clickOnNaukriFastforwardSitelogo();
		objResumeNaukriPage.verifyCustomerServiceLink();
		objResumeNaukriPage.clickOnCustomerSupportService();
		objResumeNaukriPage.verifyHomeImage();
		objHomePage=objResumeNaukriPage.clickOnHomeImage();
		objHomePage.verifyHomePageTitle();
		objHomePage.verifyGetYourFreeText();
		objHomePage.verifyGet3to4MoreTimesProfilesText();
		objHomePage.verifyNotGettingEnoughProfilesLink();
		objResumeNaukriPage=objHomePage.clickOnNotGettingEnoughProfilesLink();
		objResumeNaukriPage.verifyNaukriFastforwardSitelogo();
		objResumeNaukriPage.clickOnNaukriFastforwardSitelogo();
		objResumeNaukriPage.verifyCustomerServiceLink();
		objResumeNaukriPage.clickOnCustomerSupportService();
		objHomePage=objResumeNaukriPage.clickOnHomeImage();
		objHomePage.verifyHomePageTitle();
		
	} catch (Exception e)
	{
		throw new Exception("FAILED CLICK ON FAST AND FORWARD " + "\n clickOnCreateJobAlert" +e.getLocalizedMessage() );
	}
	
}

@Test(priority=7,enabled=true)
public void clickOnJobsbyLocationsLinks() throws Exception
{
try {
	objHomePage= new HomePage(uiDriver);
	objHomePage.verifyHomePageTitle();
	objHomePage.verifyJobsByLocation();
	objJobSearchNaukriPage=objHomePage.clickOnJobsBYLocationsName();
	objJobSearchNaukriPage.clickOnJobSearchNaukriPageSiteLogo();
	objHomePage.verifyHomePageTitle();
	objJobSearchNaukriPage=objHomePage.clickOnViewAllLocationsLink();
	objJobSearchNaukriPage.clickOnJobSearchNaukriPageSiteLogo();
	objHomePage.verifyHomePageTitle();
} catch (Exception e)
{
	throw new Exception("FAILED WHILE VERIFYING AND CLICKING ON THE JOBS BY LINKS " + "\n clickOnJobsbyLocationsLinks" +e.getLocalizedMessage());
}	
}

@Test(priority=9,enabled=true)
public void clickOnJobsCatLinks() throws Exception
{
	try
	{
		objHomePage= new HomePage(uiDriver);
		objHomePage.verifyJobsByCategoryText();
		objJobSearchNaukriPage=objHomePage.clickOnJobsByCategoryList();
		objJobSearchNaukriPage.clickOnJobSearchNaukriPageSiteLogo();
		System.out.println("Manjunath");
		objHomePage.verifyHomePageTitle();
		objHomePage.verifyViewAllCategoriesLink();
		objJobSearchNaukriPage=objHomePage.clickONViewAllCategoriesLink();
		objJobSearchNaukriPage.clickOnJobSearchNaukriPageSiteLogo();
		System.out.println("Harish");
		objHomePage.verifyHomePageTitle();
		
	} 
	catch (Exception e) 
	{
		throw new Exception("FAILED THE TEST CASE OF VERIFY CLICK ON JOBS CATEGORY LINKS" + "\n clickOnJobsCatLinks" + e.getLocalizedMessage());
	}
}
@Test(priority=8, enabled=true)
public void verifybest() throws Exception
{
	objHomePage= new HomePage(uiDriver);
	objHomePage.verifyBestPlaceToWorkTabs();

}
@Test(priority=10,enabled=true)
public void clickOnFootInformationLinks() throws Exception
{
	try
	{
		parent_window=uiDriver.getWindowHandle();
		objHomePage= new HomePage(uiDriver);
		objHomePage.verifyFootInformationText();
		objHomePage.verifyAboutusLink();
		objInfoEdgePage=objHomePage.ClickOnAboutusLink();
		objInfoEdgePage.verifyNaukriSiteImage();
		objInfoEdgePage.clickOnNaukriSiteImage();
		objInfoEdgePage.verifyNaukriimage();
		objHomePage=objInfoEdgePage.clickOnNaukriImage();
		objHomePage.verifyHomePageTitle();
		objHomePage.verifyFootTermsAndConditionLink();
		objTermsAndConditions=objHomePage.ClickOnFootTermsAndConditionLink();
		Thread.sleep(5000);
		objTermsAndConditions.clickOnCloseWindowTermsandConditions();
		uiDriver.switchTo().window(parent_window);
		System.out.println("Manju");
		objHomePage.verifyHomePageTitle();
		objHomePage.verifyPrivacyandPolicylink();
		objJobSearchNaukriPage=objHomePage.ClickOnPrivacyandPolicy();
		Thread.sleep(5000);
		objJobSearchNaukriPage.verifyCloseWindowOfPrivacyPolicy();
		objJobSearchNaukriPage.clickOnCloseWindowOfPrivacyPolicy();
		Thread.sleep(5000);
		uiDriver.switchTo().window(parent_window);
		objHomePage.verifyHomePageTitle();
		System.out.println("Hegde");
		objHomePage.verifyResourceslink();
		//parent_window=uiDriver.getWindowHandle();
		objJobSearchNaukriPage=objHomePage.ClickOnResourcesLink();
		objJobSearchNaukriPage.verifyCareerResourceText();
		Thread.sleep(4000);
		System.out.println("OLE");
		objJobSearchNaukriPage.verifyHomePageSiteLogo();
		objHomePage=objJobSearchNaukriPage.clickOnHomepagesitelogo();
		objHomePage.verifyHomePageTitle();
		System.out.println("Ashwini");
		
	} 
	catch (Exception e) 
	{
		throw new Exception("FAILED THE TEST CASE OF VERIFY CLICK ON FOOT INFORMATION LINKS" + "\n clickOnFootInformationLinks   " + e.getLocalizedMessage());
	}
}

@Test(priority=11,enabled=true)
public void verifyContactCustomerService() throws Exception
{
	try
	{
		objHomePage= new HomePage(uiDriver);
		objHomePage.verifyHomePageTitle();
		objHomePage.verifyKnowYourResumeScoreLink();
		objResumeNaukriPage=objHomePage.clickOnKnowYourResumeScoreLink();
		String custrname=getExcelTest(1, 2);
		objResumeNaukriPage.verifyCustomerServiceLink();
		objResumeNaukriPage.clickOnCustomerSupportService();
		objResumeNaukriPage.verifyCustomerNameTextbox();
		//objResumeNaukriPage.enterCustomerNameTextbox("   ");
		System.out.println(custrname);
		objResumeNaukriPage.enterCustomerNameTextbox(custrname);
		Thread.sleep(9000);
		objResumeNaukriPage.clickOnSubmit();
		
		
		/*objResumeNaukriPage.verifyCustomerEmailTextbox();
		objResumeNaukriPage.enterCustomerEmailID("asshwslwe@gmail.com");
		objResumeNaukriPage.verifyCustomerContactNumber();
		objResumeNaukriPage.enterCustomerContactNumber("9880306305");
		objResumeNaukriPage.verifyCustomerCode();
		objResumeNaukriPage.enterCustomerCode("96854789");
		objResumeNaukriPage.verifyTranscationCode();
		objResumeNaukriPage.enterTranscationCode("898798789789");
		objResumeNaukriPage.verifySpecifyQuery();
		objResumeNaukriPage.enterSpecifyQuery("Sampel testing for ");
		Thread.sleep(9000);
		objResumeNaukriPage.verifySubmitButton();
		objResumeNaukriPage.clickOnSubmit();
		Thread.sleep(9000);*/
		
	} 
	
	catch (Exception e)
	{
		throw new Exception("FAILED TEST CASE OF VERIFY CONTACT CUSTOMER SERVICE FUNCTION " + "\n verifyContactCustomerService  "+e.getLocalizedMessage());
	}
}
public void closeAndSwitchToParent(String parentWindowName ) throws InterruptedException{
	uiDriver.close();
	Thread.sleep(5000);
	uiDriver.switchTo().window(parentWindowName);
}

public String getExcelTest(int row,int column) throws Exception {
	ExcelutilObject.setExcelFile(NKConstants.Path_TestData, "ContactCustomer");
	return ExcelutilObject.getCellData(row, column);
	
}

}


package com.st.pages;

import java.awt.image.BufferStrategy;
import java.sql.Driver;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import com.st.common.NKConstants;
import com.st.util.BasePageObject;


import org.apache.log4j.Logger;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;



public class HomePage extends BasePageObject
{
		public HomePage(WebDriver driver)
	{
		super(driver);
	}
	
	private static Logger Log = Logger.getLogger(Logger.class.getName());
	
	
	/* UI ELEMENTS */
	By jobsbydelhi=By.partialLinkText("Jobs in Delhi");
	By siteLogo= By.cssSelector(".nLogo.fl>img");
	By userName=By.id("eLogin");
	By HeaderLinksNames=By.xpath("//div[@class='headGNB cloneCont wrap']//ul[1]/li/a/div");
	By EmployerZone=By.linkText("Employer Zone");
	By Buyonline= By.xpath("//li/a[@title='Buy Online- RESDEX and Vacancy Listings']/div");
	By BuyonlineLinks=By.xpath("//li[2]/div[@class='subMenu']/ul/li/a");
	By Buyonlinesub=By.partialLinkText("Buy Online");
	By postinstajob=By.xpath("//ul/li[2]/a[@title='Post an Insta Job']");
	By AllJobsheadlinks=By.xpath("//div[@class='wrap']/ul/li/a");
	By SkillsTextbox=By.xpath("//div[@id='skill']/div/div[2]/input[1]");
	By locationTextbox=By.xpath("//div/div[2]/input[1]");
	By Experiencedropdown=By.xpath("//div[@id='exp_dd']/div/input[1]");
	By Salarydropdown=By.xpath("//div[@id='salary_dd']/div/input[1]");
	By Searchhomebutton=By.id("qsbFormBtn");
	By advancesearchlink=By.partialLinkText("Advanced Search");
	By EmailidText=By.id("emailId");
	By CreatePassword=By.id("pwd");
	By IagreeTermsConditions=By.xpath("//form[@id='formpZero']/div[3]");
	By TermsandConditionslink=By.linkText("Terms and Conditions");
	By PostyourCVbutton= By.id("p0submit");
	By getbestmactchedjobsPara= By.xpath("//div[@class='center_large_title']");
	By CreateJobAlertbutton= By.id("cjaMain");
	By naukriFastForwardlinkimage= By.xpath("//div/a/h3");
	By knowyourresumescorelink=By.partialLinkText("Know your resume score");
	By GetYourFreeText=By.xpath("//ul[@class='p0L10']/li[1]/p[contains(text(),'Get your FREE')]");
	By resumefeebackResport=By.partialLinkText("resume feedback report");
	By notGettingEnoughProfilesViews=By.partialLinkText("Not getting enough profile views?");
	By get3to4TimesMoreProfiles=By.xpath("//ul[@class='p0L10']/li[2]/p");
	By Tollfreetext=By.xpath("//div[contains(text(),'(Toll-Free)')]");
	By searchallcurrentandwalkinjobs=By.xpath("//div[@class='wgtCont']/h3");
	By searchwalkingjobsbutton=By.xpath("//div[@class='wgtCont']/a/button");
	By careernavigatiorimagelink=By.xpath("//div/h3[1][@class='cnLogo']");
	By Salarytrendstext=By.xpath("//div/h3[2][@class='noBorder_center_large_title']");
	By viewSalarybutton=By.xpath("//div/a[@title='View Salaries']/button");
	By connecttoRecruiterstext=By.xpath("//div[@class='viewRecruiter wgtCont']/p");
	By viewRecruitersbutton=By.xpath("//div/a[@title='View Recruiters']/button");
	By serviceforrecruiters=By.xpath("//div/h3[text()='Services for Recruiters']");
	By naukricallslink=By.partialLinkText("Naukri Calls");
	By FastestRecruitersvechileText=By.xpath("//div/ul/li[1]/p[text()='Fastest Recruiter Vehicle']");
	By searchcvforforfreelink=By.partialLinkText("Search CVs for Free now");
	By findtherightcandidatetext=By.xpath("//li[2]/p[text()='Find the right candidate']");
	By hrzonelink=By.partialLinkText("HR Zone");
	By getupdatedonthelatestHRnews=By.xpath("//li[3]/p[text()='Get updated on the latest HR news']");
	By compusHiringsolutionslink=By.partialLinkText("Campus Hiring Solutions");
	By optimizeyourfresherHiring=By.xpath("//li[4]/p[text()='Optimize your Fresher Hiring']");
	By naukriJobSpeakText=By.xpath("//div/h3[text()='Naukri JobSpeak']");
	By monthlyJobIndexText=By.xpath("//div/p[contains(text(),'A monthly Job Index that provides insight')]");
	By viewlatestadditionLink=By.partialLinkText("View the latest edition");
	By jobsbyLocationsText=By.xpath("//div[8]/h4");
	By jobsByLocationsLinksList=By.xpath(" //div[8]/ul/li/a[@target='_blank']");
	By viewalllocationslink=By.partialLinkText("View all Locations");
	By ExperiencedropdownValue=By.xpath("//div[@id='exp_dd']//ul/li[text()='3']");//By.xpath("//div[@id='exp_dd']/div/input[1]");
	By jobsbycategorytext=By.xpath("//div[9]/h5");
	By jobsbycategorylinsList=By.xpath("//div[9]/ul/li/a");
	By viewallcategorieslink=By.partialLinkText("View all Categories");
	By Foot_informationText=By.xpath("//div[1][@class='column ']/ul/li[@class='header']/a");
	By Foot_informationLinks=By.xpath("//div/div[@class='wrap']/div[1]/ul[1]/li/a[@title[contains(text(),*)]]");
	By Foot_jobseekerText=By.xpath("//div/div[@class='wrap']/div[2]/ul[1]/li[1][@class='header']/a");
	By foot_jobseekerlinks=By.xpath("//div/div[@class='wrap']/div[2]/ul[1]/li[position()<=8]/a[@title[contains(text(),*)]]");
	By foot_browsejostext=By.xpath("//div/div[@class='wrap']/div[3]/ul[1]/li[@class='header']/a");
	By foot_browsejobslink=By.xpath("//div/div[@class='wrap']/div[3]/ul[1]/li/a[@title[contains(text(),*)]]");
	By Foot_employersText=By.xpath("//div/div[@class='wrap']/div[4]/div/ul[1]/li[@class='header']/a");
	By Foot_employerslinks=By.xpath("//div/div[@class='wrap']/div[4]/div/ul[1]/li/a[@title[contains(text(),*)]]");
	By Foot_FastForwardText=By.xpath("//div/div[@class='wrap']/div[2]/ul[1]/li[9][@class='header']/a");
	By Foot_Fastforwardlinks=By.xpath("//div/div[@class='wrap']/div[2]/ul[1]/li[position()>9]/a[@title[contains(text(),*)]]");
	By Foot_followustext=By.xpath("//div[@class='fl column last-child']/div[2]/a[text()='Follow Us']");
	By Foot_followusLinks=By.xpath("//div[@class='fl column last-child']/div[2]/a[@title[contains(text(),*)]]");
	By loginlink=By.xpath("//a[contains(@title,'Jobseeker Login')]/div");
	
	By Foot_information_aboutus=By.xpath("//div/div[@class='wrap']/div[1]/ul[1]/li[2]/a[1][@title[contains(text(),*)]]");
	By Foot_information_TermsandConditions=By.xpath("//div/div[@class='wrap']/div[1]/ul[1]/li[3]/a[1][@title[contains(text(),*)]]");
	By Foot_information_PrivacyandPolicy=By.xpath("//div/div[@class='wrap']/div[1]/ul[1]/li[4]/a[1][@title[contains(text(),*)]]");
	By Foot_information_Resources=By.xpath("//div/div[@class='wrap']/div[1]/ul[1]/li[5]/a[1][@title[contains(text(),*)]]");
	By Foot_information_Carrrerswith=By.xpath("//div/div[@class='wrap']/div[1]/ul[1]/li[6]/a[1][@title[contains(text(),*)]]");
	By Foot_information_Sitemap=By.xpath("//div/div[@class='wrap']/div[1]/ul[1]/li[7]/a[1][@title[contains(text(),*)]]");
	By Foot_information_contactus=By.xpath("//div/div[@class='wrap']/div[1]/ul[1]/li[8]/a[1][@title[contains(text(),*)]]");
	By Foot_information_Faqs=By.xpath("//div/div[@class='wrap']/div[1]/ul[1]/li[9]/a[1][@title[contains(text(),*)]]");
	By Foot_information_summons=By.xpath("//div/div[@class='wrap']/div[1]/ul[1]/li[10]/a[1][@title[contains(text(),*)]]");
	By Foot_information_grievances=By.xpath("//div/div[@class='wrap']/div[1]/ul[1]/li[11]/a[1][@title[contains(text(),*)]]");
	By Foot_information_fraudalert=By.xpath("//div/div[@class='wrap']/div[1]/ul[1]/li[12]/a[1][@title[contains(text(),*)]]");
	
	
	By resumetext= By.xpath("//div[@id='scrolUp']/div/h2");
	By termsandcon=By.cssSelector(".hd3");
	By youeorder=By.xpath("//div[@class='greyBdrCrt']/span");
	
	By searchBlrLayer = By.xpath("//div[@class='blrLyr dspN']");
	By ddExperience = By.xpath("//div/div/div[1]/ul/li[contains(.,'5')]");
	By expArrow = By.xpath("//div[@id='exp_dd']//span[@class='smArw']");
	By registerLink = By.xpath("//div[@class='row txtC']/a[contains(.,'Register Now')]");
	By imgSIteLogo = By.cssSelector(".nLogo.fl>img");
	By lnkJobs = By.xpath("//a[contains(@title,'Search Jobs')]/div");
	By lnkLogin = By.xpath("//a[contains(@title,'Jobseeker Login')]/div");
	By lnkAdvancedSearch = By.linkText("Advanced Search");
	By txtSkill = By.xpath(".//*[@id='skill']//input[1]");
	By bestplacestoworklinks=By.xpath("//div[@id='tabs_job']/ul/li");
	
	By locationtextbox=By.xpath("//div/div[2]/input[@class='sugInp w135']");
	
	
	
	/* Veriables*/
	boolean flag=false;
	String BASE_URL="http://www.naukri.com/";
	String pageTitle=null;
	String Parent_window=null;
	String actual_Result=null;
	String expected_Result=null;
	
	public int exps;
	
	
	/******************************************************************************************************************************************/	
	/**
	 * @author manjunathr
	 * @throws Exception
	 * This method will get the Home Page Title and compare with Existing or saved Title and if both were equal method will Pass else fail.
	 */
	public HomePage verifyHomePageTitle() throws Exception
	{
		Log.info("getting the Home page title");
		try 
		{
			pageTitle=uiDriver.getTitle().trim();
			Assert.assertEquals(pageTitle, NKConstants.PAGETITLE_HOMEPAGE, "Home Page title is not matching or displayed as expected");
		} 
		catch (Exception e) {
			
			throw new Exception("FAILED GETING THE HOMEPAGE TITLE  " + "\n verifyHomePageTitle " +e.getLocalizedMessage());
		}
		return this;
	}
	/**********************************************************************************************************************/	
	/**
	 * @author manjunathr
	 * @return boolean
	 * This method will verify whether Site logo is displayed on the Page and Returns boolean Value
	 */
	public boolean verifySiteLogo() throws Exception
	{
	Log.info("Verifying Site Log of Home Page");
		try 
		{
			flag=isElementPresent(siteLogo);
			return flag;
			
		} catch (Exception e)
		{
			throw new Exception("FAILED VERIFYING THE SITE LOGO " + " \n verifySiteLogo " + e.getLocalizedMessage());
		}
		
	}
/*****************************************************************************************************************************************************/	

	/**
	 * @author manjunathr
	 * @return void
	 * This method will click on the Site Logo
	 */
	public HomePage clickOnSiteLogo() throws Exception
	{
		Log.info("Clicking on Sitelogo Image");
		try 
		{
			uiDriver.findElement(siteLogo).click();
		} 
		catch (Exception e) {
			
			throw new Exception("FAILED CLICKING ON SITE " + "\n clickOnSiteLogo " +e.getLocalizedMessage());
		}
		return this;
	}

	/*****************************************************************************************************************************************************/	
	/** 
	 * 2nd Testcase
	 * @author manjunathr
	 * @return ArrayList
	 * @throws Exception
	 * This method will get all the header list links and get the text of the links and stores in ArrayList
	 */

	public HomePage getHeaderLinksName() throws Exception
	{
		Log.info("Getting Header Links Text");
		try 
		{
			List<WebElement> HeadMenulinks= uiDriver.findElements(HeaderLinksNames);
			
			ArrayList<String> headermanual=new ArrayList<String>();
			headermanual.add("Jobs");
			headermanual.add("Recruiters");
			headermanual.add("Companies");
			headermanual.add("Services");
			headermanual.add("More");
			headermanual.add("Login");
			
			for (int i = 0; i < HeadMenulinks.size(); i++) 
			{
				actual_Result=HeadMenulinks.get(i).getText().trim();
				expected_Result=headermanual.get(i).toString();
				Assert.assertEquals(actual_Result, expected_Result, "Header Links are Not Macthing");
				waitImplicit();
				System.out.println(actual_Result);
			}
			
			/*for (WebElement Linksab : HeadMenulinks)
			{
				
			actual_Result=Linksab.getText().toString();
			System.out.println(Linksab.getText().toString());
			}*/
			
			return this;	
		}
		catch (Exception e)
		{
			throw new Exception("FAILED GET HEADER LINKS " + "\n getHeaderLinksName " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @param uname
	 * @return void
	 * * This Method will Enter the Username
	 */
	public void enterUsername(String uname) throws Exception
	{
		Log.info("Entering User name " + uname);
		try 
		{
			uiDriver.findElement(userName).sendKeys(uname);
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED USERNAME VERIFYING THE OBJECT "  +  " \n enterUsername(String uname) "  + e.getLocalizedMessage());
		}
	}
	/*****************************************************************************************************************************************************/	
	public HomePage getJobsByLocations()
	{
		List<WebElement> li= uiDriver.findElements(By.xpath("ole"));
		
		List<String>arrlst= new ArrayList<String>();
		
		for (WebElement welist : li)
		{
			
			arrlst.add(welist.getText());
			System.out.println(arrlst);
		}
		
		
		return this;
	}
	
	/*****************************************************************************************************************************************************/		
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This Method will check Employerzone Element is displayed or not
	 */
	public boolean verifyEmplyerZone() throws Exception
	{
		Log.info("Verify the Employerzone link");
		try 
		{
			flag=isElementPresent(EmployerZone);
			
			return flag;
			
		}
		catch (Exception e) 
		{
			throw new Exception("FAILED VERIFYING THE EMPLOYERZONE LINK " + "\n verifyEmplyerZone " +e.getLocalizedMessage());
		}
	}
	/*****************************************************************************************************************************************************/	
	/**
	 * @author manjunathr
	 * @return void
	 * @throws Exception
	 * This Method will click on Employerzone Link
	 */
	public LoginRecruitNaukriPage clickEmployerZone() throws Exception
	{
		Log.info("employerZoneClick - USer is going to click on Employerzone Link");
		try 
		{
			
			uiDriver.findElement(EmployerZone).click();
			switchToNewWindow();
			Thread.sleep(5000);
		} catch (Exception e)
		{
			throw new Exception("FAILED WHILE CLICKING ON EMPLOYER LINK " + "\n clickEmployerZone " + e.getLocalizedMessage());
		}
		return new LoginRecruitNaukriPage(uiDriver);
	}
	/*****************************************************************************************************************************************************/	
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 */
	public boolean verifyBuyOnline() throws Exception
	{
		Log.info("Verifying Buyonline Text is displayed on the Screen");
		try 
		{
			flag=isElementPresent(Buyonline);
			return flag;
			
		} 
		catch (Exception e) 
		{
			throw new Exception(" FAILED WHILE VERIFYING THE BUYONLINE LINK " + " \n verifyBuyOnline " +e.getLocalizedMessage());
		}
	}
	
	
	/*****************************************************************************************************************************************************/	
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 */
	public boolean isBuyonlinePresent() throws Exception
	{
		Log.info("Verifying Buyonline Text is Present on the Screen");
		try 
		{
			flag=isElementPresent(Buyonline);
			Assert.assertTrue(flag, "BuyOnline Text is Missing");
			return flag;
			
		} 
		catch (Exception e) 
		{
			throw new Exception(" FAILED WHILE VERIFYING THE BUYONLINE LINK " + " \n verifyBuyOnline " +e.getLocalizedMessage());
		}
	}
	/*****************************************************************************************************************************************************/	
	/**
	 * @author manjunathr
	 * @return RecruitNaukriPage
	 * @throws Exception
	 * This method method will explain to user Verify the links are available and get the text of the links.
	 */
	
	public RecruitNaukriPage clickOnBuyOnLineSubMenu() throws Exception
	{
		Log.info("Clcik on Buyonline Links avialble");
		try 
		{
			Parent_window=uiDriver.getWindowHandle();
			//mouseover(Buyonline);
			Actions abt= new Actions(uiDriver);
			WebElement mySub=	uiDriver.findElement(Buyonline);
			abt.moveToElement(mySub);
			WebElement buyonlinesub= uiDriver.findElement(Buyonlinesub);
			abt.moveToElement(buyonlinesub).click().perform();
			switchToNewWindow();
			Thread.sleep(5000);
		
			return new RecruitNaukriPage(uiDriver);
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE ClICKING ON THE BUYONLINE SUBLINK " + "\n clickOnBuyOnLineSubMenu " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return RecruitNaukriPage
	 * @throws Exception
	 * This method method will explain to user Verify the links are available and get the text of the links.
	 */
	
	public RecruitNaukriPage clickOnPostAnInstaJob() throws Exception
	{
		Log.info("Clicking on  the clickOnPostAnInstaJob avialble");
		try 
		{
			Parent_window=uiDriver.getWindowHandle();
			Actions act= new Actions(uiDriver);
			WebElement buyon= uiDriver.findElement(Buyonline);
			act.moveToElement(buyon);
			Thread.sleep(5000);
			WebElement postinsta= uiDriver.findElement(postinstajob);
			act.moveToElement(postinsta).click().perform();
			//postinsta.click();
			switchToNewWindow();
			Thread.sleep(5000);
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE Clicking on Post An Insta Job " + "\n clickOnPostAnInstaJob " +e.getLocalizedMessage());
		}
		return new RecruitNaukriPage(uiDriver);
	}
	
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return arrayJobsList
	 * @throws Exception
	 * This Method will Gets the all Links of JObs and get the Text of Each Link and Stores in Array
	 */
	
	public List<String> getallJobsLinks() throws Exception
	{
		Log.info("Verify all the Job Links are displayed");
		
		try 
		{
			
			List<WebElement> allJobsLinksList= uiDriver.findElements(AllJobsheadlinks);
			
			List<String> arrayJobsList= new ArrayList<String>();
			
			for (WebElement allJobsName : allJobsLinksList) 
			{
				arrayJobsList.add(allJobsName.getText());
			}
			return arrayJobsList;
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING ALL JOBS LINK " + "\n allJobsLinks " +e.getLocalizedMessage());
		}
	}

	
	/********************************************************************************************************************************************************/
	
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * this Method will check Skilltextbox is displayed on the page.
	 */
	public boolean verifySkillTextBox() throws Exception
	{
		Log.info("Verify the Skills textbox is Present");
		
		try 
		{
			flag= uiDriver.findElement(SkillsTextbox).isDisplayed();
			Assert.assertTrue(flag, "Skills Textbox is Missing");
			return flag;
		} 
		catch (Exception e)
		{
			throw new Exception("FAILED WHILE VERIFYING SKILLSTEXTBOX " + "\n verifySkillTextBox " + e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	/**@author manjunathr
	 * @return skil
	 * This method will enter the SkillText into the skilltext text box
	 */
	
	public void enterSkillEntry(String skil) throws Exception
	{
		Log.info("Entering the skill Text :" + skil);
		
		try 
		{
			verifySkillTextBox();
			uiDriver.findElement(SkillsTextbox).sendKeys(skil);
			
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE ENTERING THE SKILLL TEXT ENTRY " + " enterSkillEntry(String skil) " + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will verify location Text box is displayed on Page.
	 */
	
	public boolean verifyLocationTextBox() throws Exception
	{
		Log.info("Verification of location textbox");
		try 
		{
			flag=uiDriver.findElement(locationTextbox).isDisplayed();
			Assert.assertTrue(flag, "Location Textbox is Not Dispalyed");
			return flag;
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE LOCATION TEXTBOX " + "\n verifyLocationTextBox " +e.getLocalizedMessage());
		}
	}

	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @param Locat
	 * @throws Exception
	 * This method will enter the Location Text 
	 */
	public void enterLocation(String Locat) throws Exception
	{
		Log.info("Entering the Location Entry");
		try 
		{
			verifyLocationTextBox();
			uiDriver.findElement(locationTextbox).sendKeys(Locat);
			
		} catch (Exception e) 
		{
		throw new Exception("FAILED WHILE ENTERING THE LOCATION TEXT BOX "+ "\n enterLocation(String Locat) "+e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will verify the Experiencedropdown get displayed on the Page.
	 */
	public boolean verifyExperiencedropdown() throws Exception
	{
		Log.info("Verification of Experiencedropsown");
		try 
		{
			flag= uiDriver.findElement(Experiencedropdown).isDisplayed();
			Assert.assertTrue(flag, "Experience Dropdown is missing");
			return flag;
			
		} catch (Exception e) 
		{
		throw new Exception("FAILED WHILE VERIFYING THE EXPERINECE DROPDOWN " + "\n verifyExperiencedropdown" + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * This method is to select value from the Expecrience dropdown
	 * @param selectval
	 * @return
	 * @throws Exception
	 */
	public int selectExperienceDropdown() throws Exception
	{
		Log.info("Selecting the Value from dropdown");
		
		try 
		{
			verifyExperiencedropdown();
			uiDriver.findElement(Experiencedropdown).click();
			Thread.sleep(1000);
			uiDriver.findElement(ddExperience).click();
			Thread.sleep(1000);
			WebElement expp = uiDriver.findElement(Experiencedropdown);
			String expDetail = expp.getText();
			exps = Integer.parseInt(expDetail);
			return exps;
						
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE SELECTING THE EXPERIENCE DROPDOWN " + "\n selectExperienceDropdown " +e.getLocalizedMessage());
		}
		
	}
	
	public void SelectExperience() throws InterruptedException{
		uiDriver.findElement(Experiencedropdown).click();
		Thread.sleep(3000);
		 uiDriver.findElement(ExperiencedropdownValue).click();
		Thread.sleep(3000);
	}
	
	public int getSelectedYrsExp(){
		WebElement element = uiDriver.findElement(ExperiencedropdownValue);
		String value = element.getAttribute("value").trim();
		int val = Integer.parseInt(value);
		return val;
		
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * this method will verify the Salary dropdown is displayed on the Page
	 */
	public boolean verifySalaryDropdown() throws Exception
	{
		Log.info("Verification of Salary dropdown");
		try {
			flag= uiDriver.findElement(Salarydropdown).isDisplayed();
			Assert.assertTrue(flag, "Salary Dropdown is Missing on the screen");
			
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE Verifying THE SALARY FROM THE DROPDOWN " +" \n verifySalaryDropdown " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @param selValue
	 * @return saldrpdown
	 * @throws Exception
	 * This Method will Select the Value from the Salary Dropdown
	 */
	public Select selectSalaryDropDown(String selValue) throws Exception
	{
		Log.info("VSelection of salry dropdown");
		try {
			Select saldrpdown= new Select(uiDriver.findElement(Salarydropdown));
			saldrpdown.selectByVisibleText(selValue);
			return saldrpdown;
			
		} catch (Exception e)
		{
			throw new  Exception("FAILED WHILE SELECTING THE SALARY DROPDOWN " + "\n selectSalaryDropDown(String selValue)" +e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will verify the Searchbutton is existing on the Page
	 */
	public boolean verifySearchButton() throws Exception
	{
		Log.info("Verification of Search button");
		try 
		{
			flag=uiDriver.findElement(Searchhomebutton).isDisplayed();
			Assert.assertTrue(flag, "Search button is Missing on the Page");
			return flag;
		} catch (Exception e) 
		{
	
			throw new Exception("FAILED WHILE VERIFYING THE SEARCH BUTTON " + "\n verifySearchButton " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	public SearchResultPage clickOnSearchButton() throws Exception
	{
		Log.info("Verifying the Click on Search button");
		try
		{ 
			verifySearchButton();
			uiDriver.findElement(Searchhomebutton).click();
						
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE CLICK ON SEARCH BUTTON " + "\n clickOnSearchButton" +e.getLocalizedMessage());
		}
		
		return new SearchResultPage(uiDriver);
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyAdvanceSearchLink() throws Exception
	{
		Log.info("Verifying the advance searchlink");
		
		try 
		{
			flag=uiDriver.findElement(advancesearchlink).isDisplayed();
			Assert.assertTrue(flag, "Advance Search button is Missing");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIYING THE ADVANCE SEARCH LINK" + " \n verifyAdvanceSearchLink" +e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	
	public void clickOnAdvanceSearchLink() throws Exception
	{
		Log.info("Verifying the Advance Search Click option");
		
		try 
		{
			clickOnAdvanceSearchLink();
			uiDriver.findElement(advancesearchlink).click();
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON ADVANCE SEARCH LINK " + "\n clickOnAdvanceSearchLink" +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check Emailtext box is Present on the Screen
	 */
	public boolean verifyEnterEmailIDTextBox() throws Exception
	{
		Log.info("Verifying the EmailText displayed");
		try 
		{
			flag=isElementPresent(EmailidText);
			Assert.assertTrue(flag, "Emailid Text box is Missing");
			return flag;
		} 
		catch (Exception e) 
		{

			throw new Exception("FAILED WHILE VERIFYING THE ENTER EMAILID TEXTBOX VERIFICATION " + " \n verifyEnterEmailText" +e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return emailid
	 * @throws Exception
	 * This method will helpus to enter Emailid on Emailid text box
	 */
	public void enterEmailIdText(String emailid) throws Exception
	{
		Log.info("Verification of Entering on Email Text");
		try
		{
			
			uiDriver.findElement(EmailidText).sendKeys(emailid);
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE ENTERING ON EMAILID TEXT BOX" +"\n enterEmailText(String emailid) " + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check create Password Textbox is Present on the Screen
	 */
	public boolean verifyCreatePassword() throws Exception
	{
		Log.info("Verification of CreatePassword");
		try 
		{
			flag=isElementPresent(CreatePassword);
			Assert.assertTrue(flag, "Create Password Textbox is Missing");
			return flag;
			
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE CreatePassword Textbox " + " \n verifyCreatePassword " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return password
	 * @throws Exception
	 * This method will helpus to enter Password on Create Password text box
	 */
	public void enterCreatePassword(String password) throws Exception
	{
		Log.info("Verification for Entering the Password on create Textbox");
		try 
		{
			
			uiDriver.findElement(CreatePassword).sendKeys(password);
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE ENTERING ON CREATE PASSWORD TEXTBOX " + "\n enterCreatePassword(String password) " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This Method helps you to check the Terms and conditions Text is present
	 */
	
	public boolean verifyIagreeTermsAndConditionsPara() throws Exception
	{
		Log.info("Verification of Text of Iagree Terms and condition");
		try 
		{
			flag=isElementPresent(IagreeTermsConditions);
			Assert.assertTrue(flag, "I agree Terms and condition Links are Missing");
			return flag;
		} catch (Exception e)
		{
			throw new Exception("FAILED WHILE VERIFYING THE I AGREE TERMS AND CONDITIONS " +"\n verifyIagreeTermsAndConditionsPara " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This Method helps you to check the Terms and conditions Link is present
	 */
	public boolean verifyTermsAndConditionsLink() throws Exception
	{
		Log.info("Verification Terms and Conditions Link");
		
		try
		{
			flag=isElementPresent(TermsandConditionslink);
			Assert.assertTrue(flag, "Terms And Conditions Link is Missing");
			return flag;
			
		} catch (Exception e)
		{
			throw new Exception("FAILED WHILE VERIFING THE TERMS AND CONDITIONS LINK "+ "\n verifyTermsAndConditionsLink" +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	/**
	 * @author manjunathr
	 * @return TermsAndConditions
	 * @throws Exception
	 * This Method user will clcik on Terms and conditions link and that will redirects to Terms and conditions Link.
	 */
	public JobSearchNaukriPage clickOnTermsAndConditionsLink() throws Exception
	{
		Log.info("Verification for click even on Terms and conditions Link");
		try 
		{
			Parent_window=uiDriver.getWindowHandle();
			uiDriver.findElement(TermsandConditionslink).click();
			switchToNewWindow();
			
		} 
		
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON TERMS AND CONDITIONS LINK" + "\n clickOnTermsAndConditionsLink " +e.getLocalizedMessage());
		}
		return new JobSearchNaukriPage(uiDriver);
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check create Postyour CV Button is Present on the Screen
	 */
	public boolean verifyPostYourCV() throws Exception
	{
		Log.info("Verification for Post Your CV Button");
		try 
		{
			flag=isElementPresent(PostyourCVbutton);
			Assert.assertTrue(flag, "Post Your CV Object is Missing");
			return flag;
		} catch (Exception e)
		{
			throw new Exception("FAILED WHILE VERIFING THE POST YOUR CV ELEMENT" + "\n verifyPostYourCV "+e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check create Postyour CV Button is Present on the Screen
	 */
	public MyNaukriPage clickOnPostYourCV() throws Exception
	{
		Log.info("Verification of Click operation for PostYour CV");
		
		try
		{
			
			uiDriver.findElement(PostyourCVbutton).click();
			
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON POSTYOUR CV BUTTON "+ "\nclickOnPostYourCV " +e.getLocalizedMessage());
		}
		return new MyNaukriPage(uiDriver);
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check get Best Match Paragrapgh is displayied on the Home Page
	 */
	public boolean verifyGetMatchedJobsPara() throws Exception
	{
		Log.info("Verification of Getmatched jobs text");
		try 
		{
			flag=isElementPresent(getbestmactchedjobsPara);
			Assert.assertTrue(flag, "Get Matched Jobs Email id object is Missing");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE GETMATCHEDHOBSPARAGRAPGH " + "\n VerifyGetMatchedJobsPara" + e.getLocalizedMessage());

		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This Method will Helps to verify Create Job alert button is displayed on the Page
	 */
	
	public boolean verifyCreateJobAlertButton() throws Exception
	{
		Log.info("Verification of Create job alert button is displayed");
		try 
		{
			flag=isElementPresent(CreateJobAlertbutton);
			Assert.assertTrue(flag, "Create Job alert button is Missing");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE CREATEJOBALERTBUTTON " + "\n verifyCreateJobAlertbutton " +e.getLocalizedMessage());

		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return CreateJobalert
	 * @throws Exception
	 * This Method will click on Create Job alert Button and navigate to create jobs alert screen
	 */
	public CreateJobAlert clickonCreateJobAlertButton() throws Exception
	{
		Log.info("Clciking on the Create job alert button");
		
		try 
		{
			//Parent_window=uiDriver.getWindowHandle();
			uiDriver.findElement(CreateJobAlertbutton).click();
			waitImplicit();
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON THE CREATE JOB ALERT BUTTON " + "clickonCreateJobAlertButton "+ e.getLocalizedMessage());
		}
		return new CreateJobAlert(uiDriver);
	}
	
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This Method will Help us to verify naukri Fast and Forward link is displaying on the Page
	 */
	public boolean verifyNaukriFastForwardImageLink() throws Exception
	{
		Log.info("Verification of Naukri Fast forward image Link");
		try
		{
			flag=isElementPresent(naukriFastForwardlinkimage);
			Assert.assertTrue(flag, "Naukri Fast Forward Image link is Missing");
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE NAUKRIFASTFORWARDIMAGE LINK " + "\n verifyNaukriFastForwardImage" +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return CreateJobalert
	 * @throws Exception
	 * This Method will click on Create Job alert Button and navigate to create jobs alert screen
	 */
	public ResumeNaukriPage clickOnNaukriFastForwardImageLink() throws Exception
	{
		Log.info("Verification of Click opertion for Fast forward Link");
		try 
		{
			Parent_window=uiDriver.getWindowHandle();
			uiDriver.findElement(naukriFastForwardlinkimage).click();
			switchToNewWindow();
			
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON NAUKRI FAST FORWARD LINK IMAGE " + "\n clickOnNaukriFastForwardImageLink " +e.getLocalizedMessage());
		}
		return new ResumeNaukriPage(uiDriver);
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyKnowYourResumeScoreLink() throws Exception
	{
		Log.info("Verification of know your resume score link");
		try
		{
			flag= isElementPresent(knowyourresumescorelink);
			Assert.assertTrue(flag, "Know your Resume Score link object is missing");
			return flag;
			
		} catch (Exception e)
		{
			throw new Exception("FAILED WHILE VERIFYING THE KNOW YOUR SCORE LINK" + "\n verifyKnowYourResumeScoreLink " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return  ResumeNaukriPage
	 * @throws Exception
	 * This Method will redirect to Resume Naukri page after clicking on the Link
	 */
	
	public ResumeNaukriPage clickOnKnowYourResumeScoreLink() throws Exception
	{
		Log.info("clicking on know your resume Link");
		
		try 
		{
			uiDriver.findElement(knowyourresumescorelink).click();
			switchToNewWindow();
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON THE KNOW YOUR RESUME SCORE LINK" + "\n clickOnKnowYourResumeScoreLink" +e.getLocalizedMessage());
		}
		return new ResumeNaukriPage(uiDriver);
	}
	/********************************************************************************************************************************************************/
	/**
	 * 
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This Method will verify that Get Your Free Text is Present on the Screen
	 */
	public boolean verifyGetYourFreeText() throws Exception
	{
		Log.info("Verification of get your Free text ");
		
		try 
		{
			flag=isElementPresent(GetYourFreeText);
			Assert.assertTrue(flag, "Get your Free Text object is Missing");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE GET FREE TEXT" + "\n verifyGetYourFreeText" + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	
	public boolean verifyResumeFeedbackReportLink() throws Exception
	{
		Log.info("Verification of Resume Feedback Report Link");
		try 
		{
			flag=isElementPresent(resumefeebackResport);
			Assert.assertTrue(flag, "Resume Feedback Report object is missing");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFING THE RESUME FEEDBACK LINK " + "\n verifyResumeFeedbackReportLink " + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	
	public ResumeNaukriPage clickOnResumeFeedbackReportLink() throws Exception
	{
		Log.info("Clicking on ResumeFeedbackReportLink");
		try 
		{
			verifyResumeFeedbackReportLink();
			uiDriver.findElement(resumefeebackResport).click();
			
		} catch (Exception e) 
		{
		throw new Exception("FAILED WHILE CLICKING ON RESUME FEEDBACK REPORT LINK " + "\n ResumeFeedbackReportLink "+e.getLocalizedMessage());
		}
		return new ResumeNaukriPage(uiDriver);
	}
	/********************************************************************************************************************************************************/
	
	
	public boolean verifyNotGettingEnoughProfilesLink() throws Exception
	{
		Log.info("Verification of not getting enough profile links");
		
		try 
		{
			flag=isElementPresent(notGettingEnoughProfilesViews);
			Assert.assertTrue(flag, "Not getting enough profiles links object is missing");
			return flag;
			
		} catch (Exception e)
		{
			throw new Exception("FAILED WHILE VERIFYING THE NOT GETTING ENOUGH PROFILES LINKS" + "\nverifyNotGettingEnoughProfilesLink " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public ResumeNaukriPage clickOnNotGettingEnoughProfilesLink() throws Exception
	{
		Log.info("Clicking on not getting enough profiles link");
		
		try
		{
			uiDriver.findElement(notGettingEnoughProfilesViews).click();
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON THE NOT GETTING ENOUGH PROFLIES LINKS " + "\nclickOnNotGettingEnoughProfilesLink " +e.getLocalizedMessage());
		}
		return new ResumeNaukriPage(uiDriver);
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyGet3to4MoreTimesProfilesText() throws Exception
	{
		Log.info("Verification of get 3- 4 more times profiles text");
		
		try
		{
			flag=isElementPresent(get3to4TimesMoreProfiles);
			Assert.assertTrue(flag, "get 3-4 more times profiles text is missing");
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception ("FAILED WHILE VERIFYING THE GET 3-4 TIMES PROFILES TEXT " + "\n verifyGet3to4MoreTimesProfilesText " + e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	
	public boolean verifyTollFreeNumber() throws Exception
	{
		Log.info("Verification for Tollfree number");
		
		try 
		{
			flag=isElementPresent(Tollfreetext);
			Assert.assertTrue(flag, "Verifcation of Toll free number");
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFING THE TOLLFREE NUMBER" + "\n verifyTollFreeNumber" +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean VerifySearchForAllCurrentandWalkingjobs() throws Exception
	{
		Log.info("Verification of VerifySearchForAllCurrentandWalkingjobs");
		
		try 
		{
			flag= isElementPresent(searchallcurrentandwalkinjobs);
			Assert.assertTrue(flag, "VerifySearchForAllCurrentandWalkingjobs object is missing");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE VERIFY SEARCH FOR ALL CURRENT AND WALKIN JOBS" + "\nVerifySearchForAllCurrentandWalkingjobs " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifySearchWalkinJobsButton() throws Exception
	{
		Log.info("Verifcation of search walkin jobs button");
		
		try 
		{
			flag= isElementPresent(searchwalkingjobsbutton);
			Assert.assertTrue(flag, "SearchWalkinJObsButton object is missing");
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE SEARCH WALKIN JOBS BUTTON " + "\n verifySearchWalkinJObsButton "+e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public void clickOnSearchWalkinJobsButton() throws Exception
	{
		Log.info("Verification of Click on Search walking jobs button");
		
		try
		{ 
			
		uiDriver.findElement(searchwalkingjobsbutton).click();
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE CLICK ON SEARCH JOBS BUTTON" + "\n clickOnSearchWalkinJobsButton " + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyNaukriCareerNavigatorimageLink() throws Exception
	{
		Log.info("Verification of Career navigator image link");
		
		try
		{
			flag=isElementPresent(careernavigatiorimagelink);
			Assert.assertTrue(flag, "Career navigator image link is not displaying");
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE CAREER NAVIGATOR IMAGE LINK" + "\nverifyNaukriCareerNavigatorimageLink " +e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	
	public ResumeNaukriPage clickOnNaukriCareerNavigatorimageLink() throws Exception
	{
		Log.info("Verification of click opertaion of naukri career navigator image link");
		try 
		{
			verifyNaukriCareerNavigatorimageLink();
			
			
			uiDriver.findElement(careernavigatiorimagelink).click();
		
			
			
			for (String ChildResumeQuality : uiDriver.getWindowHandles()) 
			{
				uiDriver.switchTo().window(ChildResumeQuality);
				Thread.sleep(3000);
				String Actual_Result=uiDriver.getTitle();
				//Assert.assertEquals(Actual_Result, NKConstants.PAGETITLE_RESUMENAUKRIPAGE, "Resume Quality Title is Matching");
			}
			
			
			WebElement ele =uiDriver.findElement(resumetext);
			String actualResult= ele.getText();
			String exceptedresult="I need an impressive resume";
			Assert.assertEquals(actualResult, exceptedresult, "Both are not Matching");
			
			
			
		} 
		catch (Exception e)
		{
		throw new Exception("FAILED WHILE CLICKING ON CAREER NAVIGATOR IMAGE LINK" + "\n clickOnNaukriCareerNavigatorimageLink" +e.getLocalizedMessage());
		}
		return new ResumeNaukriPage(uiDriver);
	}
	/********************************************************************************************************************************************************/
	
	
	public boolean verifySalaryTrendText() throws Exception
	{
		Log.info("Verification of Salary Trend text or paragraph");
		
		try 
		{
			flag=uiDriver.findElement(Salarytrendstext).isDisplayed();
			Assert.assertTrue(flag, "Salary Trend Text is missing or not Matching");
			return flag;
			
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE SALARY TREND TEXT" + "\n verifySalaryTrendText" +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	
	public boolean verifyViewSalariesButton() throws Exception
	{
		Log.info("Verification of View salary button");
		
		try 
		{
			flag=uiDriver.findElement(viewSalarybutton).isDisplayed();
			Assert.assertTrue(flag, "View salary button is missing");
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE VERIFYING VIEW SALARY BUTTON" + "\n verifyViewSalariesButton" +e.getLocalizedMessage() );
		}
	}
	
	/********************************************************************************************************************************************************/
	public void clickOnViewSalaryButton() throws Exception
	{
		Log.info("click operation of View salary button" );
		
		try 
		{
			verifyViewSalariesButton();
			uiDriver.findElement(viewSalarybutton).click();
		} catch (Exception e)
		{
			throw new Exception("FAILED WHILE CLICKING ON VIEW SALARY BUTTON" +"\nclickOnViewSalaryButton " +e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	
	public boolean verifyConnectToRecruitersText() throws Exception
	{
		Log.info("Verification of connect to recruiters text");
		
		try
		{
			flag=uiDriver.findElement(connecttoRecruiterstext).isDisplayed();
			Assert.assertTrue(flag, "Connect to recruiters text is missing");
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE CONNECT TO RECRUITERS TEXT" +"\nverifyConnectToRecruitersText " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyViewRecruitersButton() throws Exception
	{
		Log.info("verification of view recruiters link");
		
		try 
		{
			flag=uiDriver.findElement(viewRecruitersbutton).isDisplayed();
			Assert.assertTrue(flag, "Verification of view recruiters link");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE VIEW RECRITERS LINK" + "\n verifyViewRecruiterkButton" +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public void clickOnViewRecruitersLinkButton() throws Exception
	{
		Log.info("Clicking on view recruiters link button");
		
		try 
		{
			verifyViewRecruitersButton();
			uiDriver.findElement(viewRecruitersbutton).click();
			
		} 
		catch (Exception e)
		{
			throw new Exception("FAILED WHILE CLICKING ON VIEW RECRUITERS LINK BUTTON");
		}
	}
	
	/********************************************************************************************************************************************************/
		
	public boolean verifyServicesForRecritersText() throws Exception
	{
		Log.info("Verification of verifyServicesForRecriters");
		
		try 
		{
			flag=uiDriver.findElement(serviceforrecruiters).isDisplayed();
			Assert.assertTrue(flag, "Service for recruiters text object is missing");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERYFING THE SERVICE FOR RECRUITERS TEXT" + "\nverifyServicesForRecritersText " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	
	public boolean verifyNaukriCallsLink() throws Exception
	{
		Log.info("Verification of Naukri links");
		try 
		{
			flag= uiDriver.findElement(naukricallslink).isDisplayed();
			Assert.assertTrue(flag, "Naukri links object is missing");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE NAUKRI CALLS LINK" + "\n verifyNaukriCallsLink " + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public RecruitNaukriPage clickOnNaukriCallsLink() throws Exception
	{
		Log.info("Clicking on naukri link");
		
		try 
		{
			verifyNaukriCallsLink();
			uiDriver.findElement(naukricallslink).click();
			
			for (String childNaukri : uiDriver.getWindowHandles()) 
			{
				uiDriver.switchTo().window(childNaukri);
			}
			
			
		/*	WebElement eld= uiDriver.findElement(youeorder);
			String actualresult= eld.getText();
			String ExpectedResult="Your Order Details";
			Assert.assertEquals(actualresult, ExpectedResult, "Your order is Not Matching");*/
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON NAUKRI LINKS LINK "+ "\n clickOnNaukriCallsLink" +e.getLocalizedMessage());
		}
		
		return new RecruitNaukriPage(uiDriver);
		
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyFastestRecruitersVechileText() throws Exception
	{
		Log.info("Verification of fastest recruiters Vechile text");
		
		try 
		{
			flag=uiDriver.findElement(FastestRecruitersvechileText).isDisplayed();
			Assert.assertTrue(flag, "Fastest Recruiters Vechile object is missing");
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE FASTEST RECRUITERS VECHILE TEXT" + "\n verifyFastestRecruitersVechileText " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifySearchCVforFreeLink() throws Exception
	{
		Log.info("Verifcation for search CV for free link");
		try
		{
			flag=uiDriver.findElement(searchcvforforfreelink).isDisplayed();
			Assert.assertTrue(flag, "Search cv for free link is missning");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE SEARCH CV FOR FREE " + "\n verifySearchCVforFreeLink" + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public void clickOnSearchCVForFreeLink() throws Exception
	{
		Log.info("Clciking on search cv for free link");
		try 
		{
			verifySearchCVforFreeLink();
			uiDriver.findElement(searchcvforforfreelink).click();
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON SEARCH CV FOR FREE LINK " + "\n clickOnSearchCVForFreeLink" + e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	
	public boolean verifyFindtheRightCandiText() throws Exception
	{
		Log.info("Verifcation  of verify Find the right candidate" );
		
		try 
		{
			flag=uiDriver.findElement(findtherightcandidatetext).isDisplayed();
			Assert.assertTrue(flag, "Find the Right Candidate Text is Missing");
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE FIND THE RIGHT CANDIDATE TEXT" + "\n verifyFindtheRightCandiText" + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyHRZoneLink() throws Exception
	{
		Log.info("Verification HR Zone Link");
		try 
		{
			flag= uiDriver.findElement(hrzonelink).isDisplayed();
			Assert.assertTrue(flag, "HR ZONE OBJECT IS MISSING");
			return flag;
		} catch (Exception e) 
		{
		throw new Exception("FAILED WHILE VERIFYING THE HR ZONE LINK" + "\n verifyHRZoneLink" + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public void ClickOnHRZoneLink() throws Exception
	{
		Log.info("Click on HR ZONE LINK");
		
		try 
		{
			verifyHRZoneLink();
			uiDriver.findElement(hrzonelink).click();
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON THE HR ZONE LINK" + "\n ClickOnHRZoneLink " + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyCampusHiringSolutionsLink() throws Exception
	{
		Log.info("Verifying the Compus Hiring Solutions Link");
		
		try 
		{
			flag=uiDriver.findElement(compusHiringsolutionslink).isDisplayed();
			Assert.assertTrue(flag, "Campuse Hiring Solutions Link is Missing");
			return flag;
			
		} catch (Exception e)
		{
			throw new Exception("FAILED WHILE VERIFYING THE CAMPUS HIRING SOLUTIONS LINK" + "\n verifyCampusHiringSolutionsLink" + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public void clickOnCampusHiringSolutionsLink() throws Exception
	{
		Log.info("Clicking on the Campus hriring solutions Link");
		try 
		{
			verifyCampusHiringSolutionsLink();
			uiDriver.findElement(compusHiringsolutionslink).click();
			
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON CAMPUSE HIRING SOLUTIONS LINK" + "\n clickOnCampusHiringSolutionsLink" + e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	
	public boolean verifyOptimizeYourFresherHiring() throws Exception
	{
		Log.info("Verifying the optimize your Fresher Hiring");
		
		try 
		{
			flag=uiDriver.findElement(optimizeyourfresherHiring).isDisplayed();
			Assert.assertTrue(flag, "Optimize your Freshers Hiring");
			return flag;
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERFYING THE OPTIMIZE YOUR FRESHER HIRING" + "\n verifyOptimizeYourFresherHiring" + e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	
	public boolean verifyNaukriJobSpeak() throws Exception
	{
		Log.info("Verification of Naukri Jobs Speak");
		
		try 
		{
			flag=uiDriver.findElement(naukriJobSpeakText).isDisplayed();
			Assert.assertTrue(flag, "Naukri job speak object is Missing");
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFING THE NAUKRI JOBS SPEAK TEXT" + "\n verifyNaukriJobSpeak" +e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	
	public boolean verifyMonthlyjobIndextext() throws Exception
	{
		Log.info("Verification of Monthly Job index Text");
		try 
		{
			flag=uiDriver.findElement(monthlyJobIndexText).isDisplayed();
			Assert.assertTrue(flag, "Monthly Job index Text objext is Missing");
			return flag;
			
		}
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE MONTHLY JOB INDEX TEXT" + "\n verifyMonthlyjobIndextext" +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyViewLatestEditionLink() throws Exception
	{
		Log.info("Verification of View Latest edition link");
		
		try 
		{
			flag=uiDriver.findElement(viewlatestadditionLink).isDisplayed();
			Assert.assertTrue(flag, "View Latest Edition Link is Missing");
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE VIEW LATEST EDITION LINK" + "\n verifyViewLatestEditionLink" +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public void clickOnViewLatestEditionLink() throws Exception
	{
		Log.info("Clicking on View lastest edition link");
		try 
		{
			verifyViewLatestEditionLink();
			uiDriver.findElement(viewlatestadditionLink).click();
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON THE VIEW LATEST EDITION LINK" + "\nclickOnViewLatestEditionLink " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyJobsByLocation() throws Exception
	{
		Log.info("Verification of jobs by location text");
		try
		{
			flag=isElementPresent(jobsbyLocationsText);
			Assert.assertTrue(flag, "Jobs by location text is missing");
			return flag;
		} 
		catch (Exception e) 
		{
		throw new Exception("FAILED WHILE VERIFYING THE JOBS BY LOCATION TEXT" + "\n verifyJobsByLocation" + e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/

	public JobSearchNaukriPage clickOnJobsBYLocationsName() throws Exception
	{
		Log.info("Getting the Locations Name");
		try 
		{
			Parent_window=uiDriver.getWindowHandle();
			List<WebElement> jobsbylocationsweblist=uiDriver.findElements(jobsByLocationsLinksList);
			
			List<String> arrayjobsbylocationslist= new ArrayList<String>();
			
			for (int i = 0; i < jobsbylocationsweblist.size(); i++) 
			{
				String linksname=jobsbylocationsweblist.get(i).getText();
				String actual_Result=linksname.substring(8);
				arrayjobsbylocationslist.add(actual_Result);
				jobsbylocationsweblist.get(i).click();
				System.out.println(actual_Result);
				switchToNewWindow();
				/*expected_Result=getAttributeValue(locationTextbox, "value");
				System.out.println("manju"+ expected_Result);*/
				Thread.sleep(4000);
				uiDriver.close();
				uiDriver.switchTo().window(Parent_window);
				
			}
			
		} 
	
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE GETTING THE LOCATIONS NAME" + "\n getLocationsName" +e.getLocalizedMessage());
		}
		return new JobSearchNaukriPage(uiDriver);
	}
	/********************************************************************************************************************************************************/
	
	
	public boolean verifyViewallLocationsLink() throws Exception
	{
		Log.info("Verification of View Location link");
		try 
		{
			flag=isElementPresent(viewalllocationslink);
			Assert.assertTrue(flag, "View Locations link is misssing");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE VIEW ALL LOCATION LINK" + "\n verifyViewallLocationsLink" + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	

	
	
	public JobSearchNaukriPage clickOnViewAllLocationsLink() throws Exception
	{
		Log.info("Clicking on View Location link");
		try 
		{
			Parent_window=uiDriver.getWindowHandle();
			uiDriver.findElement(viewalllocationslink).click();
			switchToNewWindow();
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON VIEW LOCATION LINK"+ "\n clickOnViewLocationsLink" +e.getLocalizedMessage());
		}
		return new JobSearchNaukriPage(uiDriver);
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyJobsByCategoryText() throws Exception
	{
		Log.info("Verification of Jobs by Category Text");
		try
		{
			flag=uiDriver.findElement(jobsbycategorytext).isDisplayed();
			Assert.assertTrue(flag, "Jobs by Category Text is Missing");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE JOBS BY CATEGORY TEXT" + "\n verifyJobsByCategoryText" +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	public JobSearchNaukriPage clickOnJobsByCategoryList() throws Exception
	{
		Log.info("Verifcation of Jobs by Categoryies list");
		try
		{
			Parent_window= uiDriver.getWindowHandle();
			
			List<WebElement> jobscategories= uiDriver.findElements(jobsbycategorylinsList);
			
			for (WebElement categ : jobscategories)
			{
				categ.click();
				actual_Result=categ.getText();
				//System.out.println(actual_Result);
				
				String splitx=actual_Result;
				String delim=" ";
				String catarr[]=splitx.split(delim);
				System.out.println(catarr[0]);
				Thread.sleep(4000);
				switchToNewWindow();
				uiDriver.close();
				uiDriver.switchTo().window(Parent_window);
			}
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON THE CATEGORIES LIST " + "\n clickOnJobsByCategoryList " + e.getLocalizedMessage());
		}
		return new JobSearchNaukriPage(uiDriver);
	}
	
	/********************************************************************************************************************************************************/
	
	public boolean verifyViewAllCategoriesLink() throws Exception
	{
		Log.info("Verification of view all categories link");
		try
		{
			flag=isElementPresent(viewallcategorieslink);
			Assert.assertTrue(flag, "View all categories Link is Missing");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFING THE VIEW ALL CATEGORIES LINK" + "\n verifyViewAllCategories"+ e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public JobSearchNaukriPage  clickONViewAllCategoriesLink() throws Exception
	{
		Log.info("Clicking on view all categories Link");
		
		try 
		{
			//verifyViewAllCategoriesLink();
			uiDriver.findElement(viewallcategorieslink).click();
			
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE CLICKING ON THE VIEW ALL CATEGORIES LINK" + "\n clickONViewAllCategoriesLink" + e.getLocalizedMessage());
		}
		return new JobSearchNaukriPage(uiDriver);
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyFootInformationText() throws Exception
	{
		Log.info("Verifcation of Information Text");
		try 
		{
			flag=isElementPresent(Foot_informationText);
			Assert.assertTrue(flag, "Foot information Text is missing");
			return flag;
		}
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE FOOT INFOPRMATION TEXT" + "\n verifyFootINformationText" + e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	
	public List<String> getFootInformationLinks() throws Exception
	{
		Log.info("Getting the links of inflomation");
		try
		{
			List<WebElement> informationwebList= uiDriver.findElements(Foot_informationLinks);
			List<String> arrayfootinformationlink= new ArrayList<String>();
			
			for (WebElement footarr : informationwebList) 
			{
				arrayfootinformationlink.add(footarr.getText());
			}
			return arrayfootinformationlink;
		}
		catch (Exception e)
		{
			throw new Exception("FAILED WHILE GETTING THE FOOT INFORMATION LINKS"+ "\n getFootInformationLinks " + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyJobseekerText() throws Exception
	{
		Log.info("Verifcation of jobseeker text");
		try
		{
			flag=uiDriver.findElement(Foot_jobseekerText).isDisplayed();
			Assert.assertTrue(flag, "Jobseeker Text is missing");
			return flag;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE JOBSEEKER TEXT" + "\n verifyJobseekerText" +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public List<String> getJobseekersLinks() throws Exception
	{
		Log.info("Verification for Jobseekers links");
		try 
		{
			List<WebElement> jobseekersweblist= uiDriver.findElements(foot_jobseekerlinks);
			List<String> Arrayjobseerkerlist= new ArrayList<String>();
			
			for (WebElement Arrjobseeker : jobseekersweblist) 
			{
				Arrayjobseerkerlist.add(Arrjobseeker.getText());
			}
			return Arrayjobseerkerlist;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE GETTING JOBSEEKERS LINKS NAME" + "\n getJobseekersLinks " + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyBrowseJobsText() throws Exception
	{
		Log.info("Verifcation of browse jobs text");
		
		try 
		{
			flag= uiDriver.findElement(foot_browsejostext).isDisplayed();
			Assert.assertTrue(flag, "Browse Jobs Text is Missing");
			return flag;
			
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE BROWSE JOBS TEXT " + "\n verifyBrowseJobsText" +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public List<String> getBrowseLinksList()  throws Exception
	{
		Log.info("getting all browse Links");
		
		try 
		{
			List<WebElement> webbrowselist= uiDriver.findElements(foot_browsejobslink);
			List<String> Arraybrowselist= new ArrayList<String>();
			
			for (WebElement arraybrowse : webbrowselist) 
			{
				Arraybrowselist.add(arraybrowse.getText());
			}
			return Arraybrowselist;
		} 
		catch (Exception e)
		{
			throw new Exception("FAILED WHILE GETTING THE LINKS OF BROWSE" + "\n getBrowseLinksList " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyEmployersText() throws Exception
	{
		Log.info("Verifcation of Employer text");
		try 
		{
			flag=uiDriver.findElement(Foot_employersText).isDisplayed();
			Assert.assertTrue(flag, "Employers Text is Missing");
			return flag;
			
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE EMPLOYERS TEXT" + "\n verifyEmployersText" + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public List<String> getEmployersLinksList() throws Exception
	{
		Log.info("Verification of getting the employers links name");
		try 
		{
			List<WebElement> employersweblist= uiDriver.findElements(Foot_employerslinks);
			List<String> arrayemployerlist= new ArrayList<String>();
			for (WebElement arremoloyer : employersweblist) 
			{
				arrayemployerlist.add(arremoloyer.getText());
			}
			return arrayemployerlist;
			
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE GETTING THE LINKS OF EMPLOYERS" + "\n getEmployersLinksList" + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	public boolean verifyFastForwardText() throws Exception
	{
		Log.info("Verification of Fast forward Text");
		
		try 
		{
			flag=uiDriver.findElement(Foot_FastForwardText).isDisplayed();
			Assert.assertTrue(flag, "Fast and Forward Text is missing on the Page");
			return flag;
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE FAST FORWARD TEXT" + "\n verifyFastForwardText" + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public List<String> getFastForwardLinksnames() throws Exception
	{
		Log.info("Verification of Fast and forward links names");
		
		try 
		{
			List<WebElement> webfastandforwordlinks=uiDriver.findElements(Foot_Fastforwardlinks);
			List<String> arrayfastandforwardlist= new ArrayList<String>();
			for (WebElement arrayfastandforward : webfastandforwordlinks) 
			{
				arrayfastandforwardlist.add(arrayfastandforward.getText());
			}
			return arrayfastandforwardlist;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE GETTING THE FAST AND FORWARD LINKS NAME" + "\n getFastForwardLinksnames" +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public boolean verifyFollowUsText() throws Exception
	{
		Log.info("Verification of follow us text");
		try 
		{
			flag=uiDriver.findElement(Foot_followustext).isDisplayed();
			Assert.assertTrue(flag, "Follow us Text is Missing:");
			return flag;
			
		} 
		catch (Exception e) 
		{
			throw new Exception(" FAILED WHILE VERIFYING THE FOLLOW US TEXT" + "\n verifyFollowUsText " +e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public List<String> getFollowUslinks() throws Exception
	{
		Log.info("Verification of follow us links");
		try 
		{
			List<WebElement> webfollowuslist= uiDriver.findElements(Foot_followusLinks);
			List<String> arrayfollowuslist= new ArrayList<String>();
			for (WebElement arrayfollowus : webfollowuslist) 
			{
				arrayfollowuslist.add(arrayfollowus.getText());
			}
			return arrayfollowuslist;
			
		} 
		catch (Exception e) 
		{
		throw new Exception("FAILED WHILE VERYFING THE FOLLOW US LINKS" + "\n getFollowUslinks" + e.getLocalizedMessage());
		}
	}
	/********************************************************************************************************************************************************/
	
	public LoginPage clickOnLoginbutton() throws Exception
	{
		Log.info("Clicking on loginbutton link button");
		
		try 
		{
			isElementPresent(loginlink);
			uiDriver.findElement(loginlink).click();
			Thread.sleep(4000);
			
		} 
		catch (Exception e)
		{
			throw new Exception("FAILED WHILE CLICKING ON login  LINK BUTTON" + e.getLocalizedMessage());
		}
		return new LoginPage(uiDriver);
	}
	/********************************************************************************************************************************************************/
	
	/********************************************************************************************************************************************************/
	public boolean verifyRegisterLink(){
		flag = uiDriver.findElement(registerLink).isDisplayed();
		Assert.assertTrue(flag, "RegisterLink is not displayed");
		return flag;
	}
	/********************************************************************************************************************************************************/

	public void clickOnRegisterLink() throws Exception
	{
		Log.info("Before Clicking on Register Link");
		
		try 
		{
			verifyRegisterLink();
			uiDriver.findElement(registerLink).click();
			Log.info("After Clicking on Register Link");
			
		} 
		catch (Exception e)
		{
			throw new Exception("FAILED WHILE CLICKING ON REGISTER LINK"+"clickOnRegisterLink()"+e.getLocalizedMessage());
		}
	}
	
	/********************************************************************************************************************************************************/
	
	/********************************************************************************************************************************************************/
	
	public boolean isSiteLogoDisplayed(){
		
		flag = isElementPresent(imgSIteLogo);
			//flag = uiDriver.findElement(imgSIteLogo).isDisplayed();
			return flag;
		}
		
		public boolean isLoginButtonDisplayed() {
			flag = uiDriver.findElement(lnkLogin).isDisplayed();
			
			return flag;
		}
		public JobseekerLoginPage clickOnLogin(){
			isLoginButtonDisplayed();
			uiDriver.findElement(lnkLogin).click();
			return new JobseekerLoginPage(uiDriver);
		}
		
		public AdvancedSearchPage clickOnAdvancedSearch(){
			WebElement element = uiDriver.findElement(lnkAdvancedSearch);
			flag = element.isDisplayed();
			Assert.assertTrue(flag, "Advanced search link is not displayed");
			element.click();
			return new AdvancedSearchPage(uiDriver);
		}
		
		public HomePage enterSkill(String skill){
			WebElement element = uiDriver.findElement(txtSkill);
			flag = element.isDisplayed();
			Assert.assertTrue(flag, "Advanced search link is not displayed");
			element.clear();
			element.sendKeys(skill);
			return this;
		}
		public boolean verifyLogin() throws Exception {
			Log.info(">>>Verifying Login is present or not>>>>>>>>");
			try {
				flag=uiDriver.findElement(siteLogo ).isDisplayed();
				Assert.assertTrue(flag, "Login is present");
				
			} catch (Exception e) {
			 throw new Exception("Failed while verifying Login"+e.getLocalizedMessage());
				// TODO: handle exception
			}
			return flag;
		
		}
			public JobSearchNaukriPage clickOndelhiJobsLink() throws Exception
			{
				Log.info("Clicking on naukri link");
				
				try 
				{
					uiDriver.findElement(jobsbydelhi).click();
					switchToNewWindow();
					
				} catch (Exception e) 
				{
					throw new Exception("FAILED WHILE CLICKING ON NAUKRI LINKS LINK "+ "\n clickOnNaukriCallsLink" +e.getLocalizedMessage());
				}
				
				return new JobSearchNaukriPage(uiDriver);
				
			}
			
			public void verifyBestPlaceToWorkTabs()
			{
				List<WebElement> bestplacetabs=uiDriver.findElements(bestplacestoworklinks);
			int counttabs=0;
			String bestarray[]={"All Sectors","Iformation Technology","Manufacturing","Services"};
			for (WebElement subtabs : bestplacetabs)
			{
				String tabsnames=subtabs.getText().trim();
				System.out.println(tabsnames);
				if(tabsnames.equals(bestarray[counttabs]))
{
					
					flag=true;	
}
				else
				{
					flag=false;
					System.out.println("Best Places to work tab is Not matching");
					break;
				}
				counttabs++;
			}
			Assert.assertTrue(flag, "Expected Tabs of Best Places to Work are not displayed");
			}
		
		

/*******************************************************************************************************************************************************/

public boolean verifyAboutusLink() throws Exception
{
Log.info("Verification of about us Link");	
try
{
	flag=isElementPresent(Foot_information_aboutus);
	Assert.assertTrue(flag, "About us Text is Missing on the Screen");
	return flag;
} catch (Exception e) 
{
	throw new Exception("FAILED WHILE VERIFYING THE ABOUT US TEXT" + "\n verifyAboutusLink" +e.getLocalizedMessage());
}
}
/*******************************************************************************************************************************************************/

public InfoEdgePage ClickOnAboutusLink() throws Exception
{
Log.info("Clicking on of about us Link");	
try
{
	Parent_window=uiDriver.getWindowHandle();
	uiDriver.findElement(Foot_information_aboutus).click();
	switchToNewWindow();
	
} 
catch (Exception e) 
{
	throw new Exception("FAILED WHILE VERIFYING THE ABOUT US TEXT" + "\n verifyAboutusText" +e.getLocalizedMessage());
}
return new InfoEdgePage(uiDriver);
}
/*******************************************************************************************************************************************************/

public boolean verifyFootTermsAndConditionLink() throws Exception
{
Log.info("Verification of verify FootTermsAnd ConditionLink");	
try
{
	flag=isElementPresent(Foot_information_TermsandConditions);
	Assert.assertTrue(flag, "Terms and Conditions  Text is Missing on the Footer Screen");
	return flag;
} catch (Exception e) 
{
	throw new Exception("FAILED WHILE VERIFYING THE TERMS AND CONDITION  TEXT ON FOOTER" + "\n verifyFootTermsAndConditionLink" +e.getLocalizedMessage());
}
}
/*******************************************************************************************************************************************************/

public TermsAndConditions ClickOnFootTermsAndConditionLink() throws Exception
{
Log.info("Clicking on FootTerms And ConditionLink");	
try
{
	Parent_window=uiDriver.getWindowHandle();
	uiDriver.findElement(Foot_information_TermsandConditions).click();
	switchToNewWindow();
	
} 
catch (Exception e) 
{
	throw new Exception("FAILED WHILE CLICKING ON THE FOOTER TERMS AND CONDITIONS LINK" + "\n ClickOnFootTermsAndConditionLink" +e.getLocalizedMessage());
}
return new TermsAndConditions(uiDriver);
}
/*******************************************************************************************************************************************************/

public boolean verifyPrivacyandPolicylink() throws Exception
{
Log.info("Verification of verify Privacy and PolicyLink");	
try
{
	flag=isElementPresent(Foot_information_PrivacyandPolicy);
	Assert.assertTrue(flag, "Privacy and Policy Text is Missing on the Footer Screen");
	return flag;
} catch (Exception e) 
{
	throw new Exception("FAILED WHILE VERIFYING THE Privacy and Policy  Link ON FOOTER" + "\n verifyPrivacyandPolicylink" +e.getLocalizedMessage());
}
}
/*******************************************************************************************************************************************************/

public JobSearchNaukriPage ClickOnPrivacyandPolicy() throws Exception
{
Log.info("Clicking on FootTerms And ConditionLink");	
try
{
	Parent_window=uiDriver.getWindowHandle();
	uiDriver.findElement(Foot_information_PrivacyandPolicy).click();
	switchToNewWindow();
	
} 
catch (Exception e) 
{
	throw new Exception("FAILED WHILE CLICKING ON THE PRIVACY AND POLICY LINK" + "\n ClickOnPrivacyandPolicy" +e.getLocalizedMessage());
}
return new JobSearchNaukriPage(uiDriver);
}
/*******************************************************************************************************************************************************/

public boolean verifyResourceslink() throws Exception
{
Log.info("Verification of verify ResourcesLink");	
try
{
	flag=isElementPresent(Foot_information_Resources);
	Assert.assertTrue(flag, "Resources Text is Missing on the Footer Screen");
	return flag;
} catch (Exception e) 
{
	throw new Exception("FAILED WHILE VERIFYING THE RESOURCES LINK ON FOOTER" + "\n verifyResourceslink" +e.getLocalizedMessage());
}
}
/*******************************************************************************************************************************************************/

public JobSearchNaukriPage ClickOnResourcesLink() throws Exception
{
Log.info("Clicking on Resources link");	
try
{
	//Parent_window=uiDriver.getWindowHandle();
	uiDriver.findElement(Foot_information_Resources).click();
	switchToNewWindow();
} 
catch (Exception e) 
{
	throw new Exception("FAILED WHILE CLICKING ON THE RESOURCES" + "\n ClickOnResourcesLink" +e.getLocalizedMessage());
}
return new JobSearchNaukriPage(uiDriver);
}
}


package com.mirth.application.version2.mso.testcases.regression;

import java.util.concurrent.TimeUnit;

import com.mirth.application.master.General;
import com.mirth.application.master.Testcase;
import com.mirth.application.version2.mso.pages.LoginPageMSO;
import com.mirth.results.QAProof;
import com.mirth.utility.staticlibraries.SleepLib;

public class TestCase1 extends Testcase{
	
	@Override
	public void steps() throws Exception {

		General.openFreshBrowser("main",testInventory.browser);
		General.browser().manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		QAProof.writeText("Browser Launched!!");
		LoginPageMSO.launch();
		QAProof.screenshot();
		QAProof.writeText("Website Launched!!");
		LoginPageMSO.login();
		
		SleepLib.sleep5Seconds();
		QAProof.writeText("Logged in!!");
		QAProof.screenshot();

	}

	
}



package com.mirth.application.version2.results.pages;

import com.mirth.application.master.PageObject;
import com.mirth.exceptions.NoSuchEntityException;
import com.mirth.utility.seleniumLib.TableS;

public final class SiteSelectorPageResults extends PageObject{
	
	public static final TableS $SiteSelectorTable =   new TableS ("SiteSelectorTable"); 
	
	//Element constants
	public static final String siteNameHeading = "Site Name";

	
	public static void selectSite() throws Exception {
		selectSite(td("SiteToSelect"));
	}
	public static void selectSite(String data) throws Exception {
		$SiteSelectorTable.processTable();
		
		int maxRows = $SiteSelectorTable.getDataRowsCount();
	
		for (int row =1; row<= maxRows; row++) {
			if (data.equalsIgnoreCase($SiteSelectorTable.getValueFromTable(siteNameHeading, row))) {
				$SiteSelectorTable.getCellTDElement(siteNameHeading, row).click();
				return;
			}
		}//for
		
		//if control reaches here, then no such site.
		throw new NoSuchEntityException("No such Site to select: " + data);		
	}
	

	
}//class



package com.mirth.application.version2.results.pages;

import com.mirth.application.master.PageObject;
import com.mirth.utility.seleniumLib.ButtonS;
import com.mirth.utility.seleniumLib.LinkS;
import com.mirth.utility.seleniumLib.TextBoxS;

public final class CommonObjectsResults extends PageObject{
	
	public static TextBoxS $SearchUsersTextBox = new TextBoxS("SearchUsersTextBox");
	public static ButtonS $QuickSearchMagnifyingButton = new ButtonS("QuickSearchMagnifyingButton");
	public static LinkS $Administration = new LinkS("Administration"); 
	public static LinkS $UsersLinkInAdministrationDropDown = new LinkS("UsersLinkInAdministrationDropDown");
	public static LinkS $SignOutButtonOnKanaToolBar = new LinkS("SignOutButtonOnKanaToolBar");
	public static final LinkS $MirthResultsInKanaToolBar = new LinkS("MirthResultsInKanaToolBar");
	public static final LinkS $MirthMatchInKanaToolBar = new LinkS("MirthMatchInKanaToolBar");
		
	
	public static void goToUsersPage() throws Exception{
		interactWith($Administration).click();
		interactWith($UsersLinkInAdministrationDropDown).click();
	}
	
	public static void setSearchTextBox(String text) throws Exception {		
		interactWith($SearchUsersTextBox).setText(text);
	}
	
	public static void clickMagnigyingSearchButton() throws Exception {
		interactWith($QuickSearchMagnifyingButton).click();
	}
	
	/*Search and advanced Search*/	
	//1. Basic searches	
	public static void searchTextBoxFor(String text) throws Exception {
		setSearchTextBox(text);
		clickMagnigyingSearchButton();
	}	
	

	
}//class


package com.mirth.application.master;

import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import com.mirth.application.version2.match.pages.pagemaster.MatchClassPageMapping;
import com.mirth.application.version2.mso.pages.pagemaster.MSOClassPageMapping;
import com.mirth.application.version2.results.pages.pagemaster.ResultsClassPageMapping;
import com.mirth.controller.Assertions;
import com.mirth.controller.DriverController;
import com.mirth.controller.Interact;
import com.mirth.controller.ThreadController;
import com.mirth.controller.Verification;
import com.mirth.controller.objects.ORMaster;
import com.mirth.dataObjects.SetterDataPair;
import com.mirth.dataObjects.TestInventoryData;
import com.mirth.exceptions.AppNotPresentException;
import com.mirth.exceptions.ClassPageMappingNotFoundException;
import com.mirth.exceptions.NotATableElementException;
import com.mirth.exceptions.TestDataNotPresentException;
import com.mirth.properties.ApplicationConfig;
import com.mirth.properties.TestDataConfig;
import com.mirth.utility.seleniumLib.SeleniumElement;
import com.mirth.utility.seleniumLib.SeleniumLib;
import com.mirth.utility.seleniumLib.Setter;
import com.mirth.utility.spreadsheet.MicrosoftSpreadsheet;
import com.mirth.utility.staticlibraries.MirthLib;
import com.mirth.utility.staticlibraries.SleepLib;
import com.mirth.utility.staticlibraries.StaticLib;
import com.mirth.utility.staticlibraries.StringLib;

public abstract class PageObject{
	
	//Master TestData Map
	//Appname/TestName -> Page -> Key-Value Pair
	private static final Map<String,Map<String,Map<String,String>>> testData = new HashMap<String,Map<String,Map<String,String>>>();
	private static final String keyDelimeter = "";
	
	public static void removetestData(TestInventoryData testInv) {
		testData.remove(testInv.appName+testInv.automationScriptID);
	}
		
	public static void clickElement(SeleniumElement selElement) throws Exception  {
		Class<? extends PageObject> pageClass = selElement.getPageClass();
		String canonicalOrigin = pageClass.getCanonicalName();
		String page = getPageNameOfClass(pageClass);
		String appName = MirthLib.getAppNameForCanonical(canonicalOrigin);
		interactWith(appName, page, selElement).click();
	}
	
	private static String td(String tdAppName,String page,String key) throws IOException, IllegalAccessException, IllegalArgumentException, TestDataNotPresentException, ClassPageMappingNotFoundException {
 		TestInventoryData testInv = ThreadController.getInventoryOfThread(Thread.currentThread().getId());
 		
 		String mapKey = tdAppName+keyDelimeter+testInv.automationScriptID;
 		Map<String,Map<String,String>> pageMap = testData.get(mapKey);
 		
 		if (Assertions.isNotNull(pageMap)) {
 			
 			Map<String,String> keyMap =  pageMap.get(page);
 			if (Assertions.isNotNull(keyMap)) { 				
 				String value = keyMap.get(key); 
 				
 				if (Assertions.isNotEmpty(value)) {
 					return value;
 				} 				
 				else {
 					throw new TestDataNotPresentException(key);
 				} 				
 			}//if (Assertions.isNotNull(keyMap)) 
 		}//if (Assertions.isNotNull(pageMap))
 		 		
 		return extractTestDataAndGetValue(tdAppName,testInv,page,key);

	}
	
	protected static String td(SeleniumElement eleKey) throws IOException, ClassPageMappingNotFoundException, AppNotPresentException, IllegalAccessException, IllegalArgumentException, TestDataNotPresentException {
		String page =  getCurrentPage();	
		return td(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),page,eleKey.get());
	}
	
	protected static String td(String key) throws IOException, IllegalAccessException, IllegalArgumentException, TestDataNotPresentException, ClassPageMappingNotFoundException, AppNotPresentException {
		String page =  getCurrentPage();	
		return td(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),page,key);
 		
 	}//public static String td(String key)
	
	public static String td(Class<? extends PageObject> pageClass,String key) throws IOException, IllegalAccessException, IllegalArgumentException, TestDataNotPresentException, ClassPageMappingNotFoundException, AppNotPresentException {
		
		String page = getPageNameOfClass(pageClass);
		return td(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),page,key);
	
	}
	
	public static String td(Class<? extends PageObject> pageClass,SeleniumElement eleKey) throws IOException, IllegalAccessException, IllegalArgumentException, TestDataNotPresentException, ClassPageMappingNotFoundException, AppNotPresentException {
		
		String page = getPageNameOfClass(pageClass);
		return td(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),page,eleKey.get());
	
	}
	
	public static String getTestDataFolderNameForApp(String appName) throws IOException{
 		String testDataFolder = StaticLib.appendFolderSeparatorIfNotPresent(StaticLib.getFrameWrorkFolderWithSeparator()+TestDataConfig.getValue("TestDataFolderName"));
 		return StaticLib.appendFolderSeparatorIfNotPresent(testDataFolder+appName);

	}
 	
	private static String extractTestDataAndGetValue(String tdAppName,TestInventoryData testInv,String page,String key) throws IOException, IllegalAccessException, IllegalArgumentException, TestDataNotPresentException {
 		
		String mapKey=tdAppName+keyDelimeter+testInv.automationScriptID;
 		Map<String,Map<String,String>> pageMap = testData.get(mapKey);		
 		
 		if (Assertions.isNull(pageMap)) {
 			pageMap = new HashMap<String,Map<String,String>>();
 			testData.put(mapKey,pageMap);
 		}
 		
 		Map<String,String> keyMap = testData.get(mapKey).get(page);
 		
 		if (Assertions.isNull(keyMap)) {
 			keyMap = new HashMap<String,String>();
 			testData.get(mapKey).put(page,keyMap);
 		}
 				
 		String testDataSpreadSheet = getTestDataFolderNameForApp(tdAppName)+page+"."+TestDataConfig.getValue("SpreadSheetType");
			
		MicrosoftSpreadsheet testSheet = new MicrosoftSpreadsheet(testDataSpreadSheet);
		testSheet.swithchToSheet(TestDataConfig.getValue("DataMappingSheet"));
		int maxRows = testSheet.getMaxRows();
		
		String defaultValueHeader = TestDataConfig.getValue("DefaultValueHeader");
		String dataToUseHeader = defaultValueHeader;
		
		boolean isTestCasePresent=false;
		
		//start iterating through the test case rows to find if the test case mapping is present for this object
		DataMappingSearchLoop:
		for (int row = 2; row<= maxRows; row++) {
			
			String testCaseString = testSheet.readCell(row,1);
			if (Assertions.isNotEmpty(testCaseString) && Assertions.isSame(testInv.automationScriptID, testCaseString, false)) {

				dataToUseHeader = testSheet.readCell(row,2);

				if (!Assertions.isNotEmpty(dataToUseHeader)) {
					dataToUseHeader = defaultValueHeader;
				}
				
				isTestCasePresent = true;
				break DataMappingSearchLoop;
			}			
			
		}//DataMappingSearchLoop: for (int row = 2; row<= maxRows; row++)

		//Now, read the Data for the test case
		testSheet.swithchToSheet(TestDataConfig.getValue("TestDataSheet"));
		int testDataMaxRows = testSheet.getMaxRows();
		
		TestDataReadLoop:		
		for (int row = 2; row<= testDataMaxRows; row++) {
			
			String keyString = testSheet.readCell(row, 1);
			if (!Assertions.isNotEmpty(keyString)) {
				continue TestDataReadLoop;
			}
			String valueString = testSheet.readCell(dataToUseHeader, row);
			if (isTestCasePresent) {				
				if (!Assertions.isNotEmpty(valueString)) {
					valueString = testSheet.readCell(defaultValueHeader, row);					
				}//if (Assertions.isNotEmpty(valueString))
			}//if (isTestCasePresent)
			
			valueString = StringLib.getNotNullString(valueString, "");
			
			keyMap.put(keyString, valueString);
		}//TestDataReadLoop: for (int row = 2; row<= maxRows; row++)
		testSheet.closeXl();
		
		String value = keyMap.get(key);
		
		if (!Assertions.isNotEmpty(value)) {
			throw new TestDataNotPresentException(key);
		} 	

		return value;
		
 	}//private static String extractTestDataAndGetValue()
		
 	

	protected static DriverController getDriverController() {		
		return ThreadController.getDriverControllerForThread(Thread.currentThread().getId());
	}
	
	protected static WebDriver getDriver() {		
		return ThreadController.getDriverControllerForThread(Thread.currentThread().getId()).getCurrentMirthDriver().getDriver();
	}
	
	protected static WebDriver getDriver(String name) {		
		return ThreadController.getDriverControllerForThread(Thread.currentThread().getId()).getMirhDriver(name).getDriver();
	}
 	
	
	protected static WebElement getObject(WebDriver driver, String applicationName, String pageName,
			String objectName) throws Exception {

		return ORMaster.getObject(driver, applicationName, pageName,objectName);

	}
	
	protected static WebElement getObject(WebElement element, String applicationName, String pageName,
			String objectName) throws Exception {

		return ORMaster.getObject(element, applicationName, pageName,objectName);

	}	

	
	protected static Interact interactWith(WebDriver driver, String applicationName, String pageName,
			String objectName) throws Exception {

		return new Interact(getObject(driver, applicationName, pageName,objectName));

	}		
	
	
 	private static WebElement getObject(String appName,String page, String objectName) throws Exception {

 		return ORMaster.getObject(getDriver(), appName, page, objectName);
 		
 	}
 	
	
 	private static Interact interactWith(String appName,String page, String objectName) throws Exception {
 		
 		return new Interact(getObject(appName,page,objectName));
 		
 	}

 	public static Interact interactWithFromOutsidePage(String appName,String page, String objectName) throws Exception {
 		
 		return new Interact(getObject(appName,page,objectName));
 		
 	}

 	
 	private static Interact interactWith(String appName,String page, SeleniumElement selElement) throws Exception {
 		
 		return new Interact(getObject(appName,page,selElement.get()));
 		
 	}

 	//Extra method for ease
 	protected static WebElement getObject(SeleniumElement selElement) throws Exception {		
 		
 		String page = getCurrentPage(); 
 		return getObject(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),page, selElement.get());
 		
 	}
 	//End - Extra method
 	
 	protected static WebElement getObject(String objectName) throws Exception {		
 		
 		String page = getCurrentPage(); 
 		return getObject(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),page, objectName);
 		
 	}
 	
 	protected static WebElement getObject(WebElement sourceElement,String objectName) throws Exception {		
 		
 		String page = getCurrentPage(); 
 		return getObject(sourceElement,MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),page, objectName);
 		
 	}
 	
 	protected static Interact interactWith(String objectName) throws Exception {		
 		
 		String page = getCurrentPage(); 
 		return new Interact(getObject(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),page,objectName));
 		
 	}
 	
 	protected static Interact interactWith(SeleniumElement elementName) throws Exception {		
 		
 		String page = getCurrentPage(); 
 		return new Interact(getObject(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),page,elementName.get()));
 		
 	}
 	

 	private static String getCurrentPage() throws IOException, ClassPageMappingNotFoundException, AppNotPresentException {
 		
 		String canonicalOrigin = StaticLib.getPreviousCanonicalOrigin(3); 
 		String appName = MirthLib.getAppNameForCanonical(canonicalOrigin);
 		String callingClassName = StaticLib.getValueAfterLastIndex(canonicalOrigin,'.'); 	
 		System.out.println(getClassPageMap(appName));
 		return getClassPageMap(appName).getPageNameForClass(callingClassName); 		 		
 	}
 	
 	public static String getPageNameOfClass(Class<? extends PageObject> className) throws IOException, ClassPageMappingNotFoundException, AppNotPresentException {
 		
 		String canonicalOrigin = className.getCanonicalName();
 		String appName =MirthLib.getAppNameForCanonical(canonicalOrigin);
		String callingClassName = StaticLib.getValueAfterLastIndex(canonicalOrigin,'.');
 		return getClassPageMap(appName).getPageNameForClass(callingClassName); 
 		 		
 	}
 	
	private static ClassPageMapping getClassPageMap(String appName) throws IOException, ClassPageMappingNotFoundException {
		ClassPageMapping classPageMap = null;
		if (appName.equalsIgnoreCase(ApplicationConfig.getValue("MSO"))) {
			classPageMap = MSOClassPageMapping.getObject();
		}
		
		else if (appName.equalsIgnoreCase(ApplicationConfig.getValue("Results"))) {
			classPageMap = ResultsClassPageMapping.getObject();
		}
		
		else if (appName.equalsIgnoreCase(ApplicationConfig.getValue("Match"))) {
			classPageMap = MatchClassPageMapping.getObject();
		}
		
		else {
			throw new ClassPageMappingNotFoundException(appName);
		}
		
		return classPageMap;
	}	
	
		
	   //////////////////////////////////////////////////////
	  //    Interlinked overloaded verification methods	  //
	 // Please be careful before changing anything below // 
	//////////////////////////////////////////////////////
	
	//simple StraightForwardComparision
	public static boolean verifyStringData(String fieldName,String expected,String actual,boolean isCaseSensitiveComparision) throws InvalidFormatException, IOException{
		Verification verify = ThreadController.getVerifyOfCurrentThread();
		return verify.withReport(fieldName).isSame(expected, actual, isCaseSensitiveComparision);
	}
	
	public static void printSuccessReport(String fieldName,String string1,String string2) throws InvalidFormatException, IOException {
		Verification verify = ThreadController.getVerifyOfCurrentThread();
		verify.withReport(fieldName).reportSuccess(string1, string2);
	}
	
	public static void printFailureReport(String fieldName,String string1,String string2) throws InvalidFormatException, IOException {
		Verification verify = ThreadController.getVerifyOfCurrentThread();
		verify.withReport(fieldName).reportIssue(string1, string2);
	}

	public static void printFailureReport(String fieldName,String value) throws InvalidFormatException, IOException {
		Verification verify = ThreadController.getVerifyOfCurrentThread();
		verify.withReport(fieldName).reportIssue(value);
	}

	
	//verifying string data with page - called from this own class
	private static boolean verifyStringData(String tdAppName,String page,String expected,boolean isCaseSensitiveComparision,SeleniumElement selElement) throws Exception {
		String actual = getData(tdAppName,page,selElement);
		return verifyStringData(selElement.get(), expected, actual, isCaseSensitiveComparision);
		
	}
	
	public static boolean verifyStringData(SeleniumElement selElement,String expected,boolean isCaseSensitiveComparision) throws Exception {
		
		Class<? extends PageObject> pageClass = selElement.getPageClass();
		String page = PageObject.getPageNameOfClass(pageClass);
		return verifyStringData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),page, expected, isCaseSensitiveComparision, selElement);
	}
	
	//verifying string data on Map with page - called from this own class
	private static Map<SeleniumElement,Boolean> verifyStringData(String tdAppName,String page,Map<SeleniumElement,String> selElements,boolean isCaseSensitiveComparision) throws Exception {
		Map<SeleniumElement,Boolean> resultMap = new LinkedHashMap<SeleniumElement,Boolean>();
		
		for (SeleniumElement selElement: selElements.keySet()){
			resultMap.put(selElement,verifyStringData(tdAppName,page, selElements.get(selElement), isCaseSensitiveComparision, selElement));
		}
		
		return resultMap;	
	}
	
	//verifying string data on Map without page - to be called from outside
	protected static Map<SeleniumElement,Boolean> verifyStringData(Map<SeleniumElement,String> selElements,boolean isCaseSensitiveComparision) throws Exception {
		return verifyStringData(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),getCurrentPage(), selElements,isCaseSensitiveComparision);
	}
	
	public static Map<SeleniumElement,Boolean> verifyStringData(Class<? extends PageObject> pageClass,Map<SeleniumElement,String> selElements,boolean isCaseSensitiveComparision) throws Exception {
		String page = PageObject.getPageNameOfClass(pageClass);
		return verifyStringData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),page, selElements,isCaseSensitiveComparision);
	}
		
	/* Explicipt map verfication of elements -> aiming to depricate-->
	//=======Verify data as per Map
	//by default case will be ignored	
	protected static void verifyDataAsPerMap(Map<String,Object[]> dataMap,boolean isCaseSensitive,String headingString,boolean isDocumentScreenshot) throws Exception {
		verifyDataAsPerMap(getCurrentPage(),dataMap,isCaseSensitive,headingString,isDocumentScreenshot);
	}
	
	protected static void verifyDataAsPerMap(Map<String,Object[]> dataMap,String headingString,boolean isDocumentScreenShot) throws Exception {
		verifyDataAsPerMap(getCurrentPage(),dataMap,false,headingString,isDocumentScreenShot);
	}
	

	public static void verifyDataAsPerMap(String page,Map<String,Object[]> dataMap,boolean isCaseSensitiveComparision,String headingString,boolean isDocumentScreenShot) throws Exception {
		

		Boolean isNoFailureTillNow = true;
		Map<Integer,Boolean> isHeadingScreenMap = new HashMap<Integer,Boolean>();
		isHeadingScreenMap.put(0,false);
		
		if (dataMap==null){
			return;
		}
		
		//need to work on boolean return and screenshot problem
		verifyingDataLoop:
		for (String fieldIdentifier: dataMap.keySet()){

			
			Object[] valMap = dataMap.get(fieldIdentifier);
			Boolean isGetEnabled = StaticLib.convertToType(valMap[3], Boolean.class);
			if (!isGetEnabled){
				continue verifyingDataLoop;
			}			
			
			String[] setterDataPair = new String[2];
			System.arraycopy(dataMap.get(fieldIdentifier), 0, setterDataPair, 0, 2);		
			if (!isNoFailureTillNow) {
				headingString = null;
			}//if (!isNoFailureTillNow)
			
			DataVerify vData = new DataVerify(fieldIdentifier,setterDataPair,headingString,isCaseSensitiveComparision,ThreadController.getThreadHeading()); 
			isNoFailureTillNow = verifyData(page,vData,isHeadingScreenMap);
			if (isHeadingScreenMap.get(0)){
				ThreadController.updateThreadHeading(false);
			}		
			
 			vData = null;
			
		}//for (String fieldIdentifier: dataMap.keySet())
		
		ThreadController.updateThreadHeading(true);
		ThreadController.updateThreadScreenShot(true);
		
	}//public static void verifyDataAsPerMap(String page,Map<String,String[]> dataMap,,boolean isCaseSensitiveComparision)

//=========Verify data as per map finishes.
	
	//verifiable=true by default
	protected static void addTestDataToMap(Map<String,Object[]> valMap, String testKey) throws IllegalAccessException, IllegalArgumentException, IOException, TestDataNotPresentException, ClassPageMappingNotFoundException, InvalidRadioButtonValueException, InvalidCheckBoxValueException {
		addTestDataToMap(getCurrentPage(),valMap, testKey,true,true);
	}
	
	protected static void addTestDataToMap(Map<String,Object[]> valMap, String testKey,Boolean isSetData,Boolean isVerifiable) throws IllegalAccessException, IllegalArgumentException, IOException, TestDataNotPresentException, ClassPageMappingNotFoundException, InvalidRadioButtonValueException, InvalidCheckBoxValueException {
		addTestDataToMap(getCurrentPage(),valMap, testKey,isSetData,isVerifiable);
	}
	
	public static void addTestDataToMap(String page,Map<String,Object[]> valMap, String testKey,Boolean isSetData,Boolean isVerifiable) throws IllegalAccessException, IllegalArgumentException, IOException, TestDataNotPresentException, ClassPageMappingNotFoundException, InvalidRadioButtonValueException, InvalidCheckBoxValueException {
		
		String patternData = td(page,testKey);
		
		if (valMap!=null) {
			
			if (!testKey.equals(InteractConfig.getValue("blankValue"))) {			
				
				Object[] origArray = Interact.getRawSetterDataPair(patternData);
				int origArrayLength = origArray.length;
				Object[] newArray = new Object[origArrayLength+2];
				System.arraycopy(origArray, 0, newArray, 0, origArrayLength);
				
				newArray[origArrayLength] = isSetData;
				newArray[origArrayLength+1] = isVerifiable;
				
				valMap.put(testKey, newArray);
			}			
		}//if (valMap!=null)	
	}//public static void addTestDataToMap(Map<String,String[]> valMap, String testKey) 
	
	public static Object[] updateSetterForvalMapObject(Object[] obj,String setter){
		obj[0] = setter;
		return obj;
	}
	
		
	//--	
	public static synchronized void setTdStringVal (String key,String val) {		
		ThreadData threadData = ThreadController.getThreadData(Thread.currentThread().getId());
		if (threadData!=null) {
			threadData.dataMap.put(Thread.currentThread().getId() + "_" +key,val);
		}			
	}
	
	public static synchronized void setTdObjStrVal (String key, Object val) {		
		ThreadData threadData = ThreadController.getThreadData(Thread.currentThread().getId());
		if (threadData!=null) {
			threadData.objMap.put(Thread.currentThread().getId() +  "_" +key,val);
			
			@SuppressWarnings("unchecked")
			Map<String,Object[]> o = (Map<String,Object[]>)val;
			
			for (String s: o.keySet()){
				
				String strVal = (String)o.get(s)[1];
				setTdStringVal(s,strVal);
			}			
		}					
	}
		
	public static synchronized void setTdObjVal (String key, Object val) {		
		ThreadData threadData = ThreadController.getThreadData(Thread.currentThread().getId());
		if (threadData!=null) {
			threadData.objMap.put(Thread.currentThread().getId() + "_" +key,val);			
		}					
	}
	
	public static synchronized String getTdStringVal (String key) {		
		ThreadData threadData = ThreadController.getThreadData(Thread.currentThread().getId());
		if (threadData!=null) {
			return threadData.dataMap.get(Thread.currentThread().getId() + "_" + key);
		}
		
		return null;			
	}
	
	public static synchronized Object getTdObjVal (String key) {		
		ThreadData threadData = ThreadController.getThreadData(Thread.currentThread().getId());
		if (threadData!=null) {
			return threadData.objMap.get(Thread.currentThread().getId() + "_" + key);
		}
		
		return null;			
	}
	
	//----	
	 
	 */
	
	
	
	 //End - depreciated items
	 //End of following functions. Need to re-visit and take a call as to what to retain and what not.
	 
	
	//NEED TO Write Verify data functions and re-visit above
	
	//GUI Setters and Getters for Page Object classes
	//Starting with setters
	
	//Get TestData formatted
	//get Processed Data from test data
	private static String getProcessedTestData(String tdAppName,String page,SeleniumElement selElement) throws NotATableElementException, Exception {
		
		String fieldId = selElement.get();
		String testDataString = td(tdAppName,page,fieldId);
		SetterDataPair setterData = Interact.getActualSetterDataPair(selElement, testDataString);
		//String dataToSet = setterData.data;
		
		return setterData.data;
		
		
		//This needs to be fixed for multi select drop down.
	
	}//public String setData(SeleniumElement selElement)
	
	public static String getProcessedTestData(SeleniumElement selElement) throws NotATableElementException, Exception {
		Class<? extends PageObject> pageClass= selElement.getPageClass();
		return getProcessedTestData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass), selElement);
	}
	
	
	//Get subset of test Data
	private static Map<SeleniumElement,String> getProcessedTestData(String tdAppName,String page,SeleniumElement... selElements) throws NotATableElementException, Exception {
		
		Map<SeleniumElement,String> dataMap = new LinkedHashMap<SeleniumElement,String>();
		
		for (SeleniumElement selElement: selElements) {
			dataMap.put(selElement, getProcessedTestData(tdAppName,page,selElement));
		}
		
		return dataMap;
		
	}//public String setData(SeleniumElement selElement) 
	
	protected static Map<SeleniumElement,String> getProcessedTestData(SeleniumElement... selElements) throws NotATableElementException, Exception {
		return getProcessedTestData(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),getCurrentPage(), selElements);
	}
	
	public static Map<SeleniumElement,String> getProcessedTestData(Class<? extends PageObject> pageClass, SeleniumElement... selElements) throws NotATableElementException, Exception {
		return getProcessedTestData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass), selElements);
	}
	
	//---
	
	//Get subset of test Data
	private static Map<SeleniumElement,String> getProcessedTestData(String tdAppName,String page,List<SeleniumElement> selElementList) throws NotATableElementException, Exception {
		
		Map<SeleniumElement,String> dataMap = new LinkedHashMap<SeleniumElement,String>();
		
		for (SeleniumElement selElement: selElementList) {
			dataMap.put(selElement, getProcessedTestData(tdAppName,page,selElement));
		}
		
		return dataMap;
		
	}//public String setData(SeleniumElement selElement) 
	
	protected static Map<SeleniumElement,String> getProcessedTestData(List<SeleniumElement> selElementList) throws NotATableElementException, Exception {
		return getProcessedTestData(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),getCurrentPage(), selElementList);
	}
	
	public static Map<SeleniumElement,String> getProcessedTestData(Class<? extends PageObject> pageClass, List<SeleniumElement> selElementList) throws NotATableElementException, Exception {
		return getProcessedTestData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass), selElementList);
	}
	
	//---
	
	//set Data from test data
	private static String setData(String tdAppName,String page,SeleniumElement selElement) throws NotATableElementException, Exception {
		
		String fieldId = selElement.get();
		String testDataString = td(tdAppName,page,fieldId);
		SetterDataPair setterData = Interact.getActualSetterDataPair(selElement, testDataString);
		Setter actualSetter = setterData.setter;
		String dataToSet = setterData.data;
		
		interactWith(tdAppName,page,fieldId).setElementData(actualSetter,dataToSet);	
		
		
		return dataToSet;
	
	}//public String setData(SeleniumElement selElement) 
	
	public static String setData(SeleniumElement selElement) throws NotATableElementException, Exception {
		Class<? extends PageObject> pageClass = selElement.getPageClass();
		return setData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass), selElement);
	}
	
	//Set subset of test Data
	private static Map<SeleniumElement,String> setData(String tdAppName,String page,SeleniumElement... selElements) throws NotATableElementException, Exception {
		
		Map<SeleniumElement,String> dataMap = new LinkedHashMap<SeleniumElement,String>();
		
		for (SeleniumElement selElement: selElements) {
			dataMap.put(selElement, setData(tdAppName,page,selElement));
		}
		
		return dataMap;
		
	}//public String setData(SeleniumElement selElement) 
	
	protected static Map<SeleniumElement,String> setData(SeleniumElement... selElements) throws NotATableElementException, Exception {
		return setData(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),getCurrentPage(), selElements);
	}
	
	public static Map<SeleniumElement,String> setData(Class<? extends PageObject> pageClass, SeleniumElement... selElements) throws NotATableElementException, Exception {
		return setData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass), selElements);
	}
	
	//Set subset of test Data
	private static Map<SeleniumElement,String> setData(String tdAppName,String page,List<SeleniumElement> selElementList) throws NotATableElementException, Exception {
		
		Map<SeleniumElement,String> dataMap = new LinkedHashMap<SeleniumElement,String>();
		
		for (SeleniumElement selElement: selElementList) {
			dataMap.put(selElement, setData(tdAppName,page,selElement));
		}
		
		return dataMap;
		
	}//public String setData(SeleniumElement selElement) 
	
	protected static Map<SeleniumElement,String> setData(List<SeleniumElement> selElementList) throws NotATableElementException, Exception {
		return setData(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),getCurrentPage(), selElementList);
	}
	
	public static Map<SeleniumElement,String> setData(Class<? extends PageObject> pageClass, List<SeleniumElement> selElementList) throws NotATableElementException, Exception {
		return setData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass), selElementList);
	}
	
	//set literal data
	private static String setData(String tdAppName,String page,SeleniumElement selElement,String data) throws NotATableElementException, Exception {
		System.out.println("In Setdata for field " + selElement.get() +"=-------->"+data);
		String fieldId = selElement.get();
		Setter actualSetter = selElement.getSetter();		
		interactWith(tdAppName,page,fieldId).setElementData(actualSetter,data);		
		return data;
	
	}//public String setData(SeleniumElement selElement) 
	
	public static String setData(SeleniumElement selElement,String data) throws NotATableElementException, Exception {
		Class<? extends PageObject> pageClass = selElement.getPageClass();
		return setData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass), selElement, data);
	}
	
	//Set subset of literal Data
	private static Map<SeleniumElement,String> setData(String tdAppName,String page,Map<SeleniumElement,String> inputMap) throws NotATableElementException, Exception {
		
		for (SeleniumElement selElement: inputMap.keySet()) {
			 SeleniumLib.waitForVisiblity(selElement);
			 
			 if (selElement.get().equals("Chk_ChangePasswordNextLogin")){
				 System.out.println("Writing ob");
				 System.out.println(selElement.interact().getIsCheckBox_ON());
				 selElement.interact().click();
				 System.out.println(selElement.interact().getIsCheckBox_ON());
				 SleepLib.sleep5Seconds();		
				 System.out.println("start");
			 }
			 
			 setData(selElement,inputMap.get(selElement));
			 System.out.println("Done");
			 
			 
			 System.out.println("???????"+selElement.get()+" : " + inputMap.get(selElement));
		}
		
		return inputMap;
		
	}//public String setData(SeleniumElement selElement) 

	protected static Map<SeleniumElement,String> setData(Map<SeleniumElement,String> inputMap) throws NotATableElementException, Exception {
		return setData(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),getCurrentPage(),inputMap);	
	}
	
	public static Map<SeleniumElement,String> setData(Class<? extends PageObject> pageClass, Map<SeleniumElement,String> inputMap) throws NotATableElementException, Exception {
		return setData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass),inputMap);	
	}
	//End 
	
	
	/**********************
	Setting processed data
	**********************/
	/*
	//set Data from test data
	//set literal data
	private static String setProcessedData(String tdAppName,String page,SeleniumElement selElement,String data,Setter actualSetter) throws NotATableElementException, Exception {
		System.out.println("In setProcessedData for field " + selElement.get() +"=-------->"+data);
		String fieldId = selElement.get();
		interactWith(tdAppName,page,fieldId).setElementData(actualSetter,data);		
		return data;
	
	}//public String setProcessedData(SeleniumElement selElement) 
	
	public static String setProcessedData(SeleniumElement selElement,String data,Setter actualSetter) throws NotATableElementException, Exception {
		Class<? extends PageObject> pageClass = selElement.getPageClass();
		return setProcessedData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass), selElement, data,actualSetter);
	}
	
	
	//set literal data Setter data pair
	private static String setProcessedData(String tdAppName,String page,SeleniumElement selElement,SetterDataPair sdPair) throws NotATableElementException, Exception {
		System.out.println("In setProcessedData for field " + selElement.get() +"=-------->"+sdPair.data);
		String fieldId = selElement.get();
		interactWith(tdAppName,page,fieldId).setElementData(sdPair.setter,sdPair.data);		
		return sdPair.data;
	
	}//public String setProcessedData(SeleniumElement selElement) 
	
	public static String setProcessedData(SeleniumElement selElement,SetterDataPair sdPair) throws NotATableElementException, Exception {
		Class<? extends PageObject> pageClass = selElement.getPageClass();
		return setProcessedData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass), selElement, sdPair);
	}
	
	//Set subset of literal Data
	private static Map<SeleniumElement,SetterDataPair> setProcessedData(String tdAppName,String page,Map<SeleniumElement,SetterDataPair> inputMap) throws NotATableElementException, Exception {
		
		for (SeleniumElement selElement: inputMap.keySet()) {
			SetterDataPair sdPair = inputMap.get(selElement);
			 setProcessedData(selElement,sdPair.data,sdPair.setter);
		}
		
		return inputMap;
		
	}//public String setProcessedData(SeleniumElement selElement) 

	protected static Map<SeleniumElement,SetterDataPair> setProcessedData(Map<SeleniumElement,SetterDataPair> inputMap) throws NotATableElementException, Exception {
		return setProcessedData(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),getCurrentPage(),inputMap);	
	}
	
	public static Map<SeleniumElement,SetterDataPair> setProcessedData(Class<? extends PageObject> pageClass, Map<SeleniumElement,SetterDataPair> inputMap) throws NotATableElementException, Exception {
		return setProcessedData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass),inputMap);	
	}
	
	//End of processedData Setters.
	*/
	
	
	//End of Setters.
	
	//Now starting with getters	
	//one getter
	private static String getData(String tdAppname,String page,SeleniumElement selElement) throws NotATableElementException, Exception {		
		
		return interactWith(tdAppname,page,selElement).getElementData(Interact.getSetter(selElement));
	}
	
	public static String getData(SeleniumElement selElement) throws NotATableElementException, Exception {		
		Class<? extends PageObject> pageClass = selElement.getPageClass();
		return getData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass), selElement);
	}
	

	//subset of getter
	private static Map<SeleniumElement,String> getData(String tdAppName,String page,SeleniumElement... selElements) throws NotATableElementException, Exception {	
		
		Map<SeleniumElement,String> dataMap = new LinkedHashMap<SeleniumElement,String>();
		
		for (SeleniumElement selElement: selElements) {
			dataMap.put(selElement, getData(tdAppName,page,selElement));
		}
		
		return dataMap;
	}//public static Map<SeleniumElement,String> getData(SeleniumElement... selElements) throws NotATableElementException, Exception {

	protected static Map<SeleniumElement,String> getData(SeleniumElement... selElements) throws NotATableElementException, Exception {	
		return getData(MirthLib.getAppNameForCanonical(StaticLib.getPreviousCanonicalOrigin(2)),getCurrentPage(), selElements);
	}
	
	public static Map<SeleniumElement,String> getData(Class<? extends PageObject> pageClass, SeleniumElement... selElements) throws NotATableElementException, Exception {	
		return getData(MirthLib.getAppNameForCanonical(pageClass.getCanonicalName()),PageObject.getPageNameOfClass(pageClass), selElements);
	}
	
	//END - GUI Setters and Getters for Page Object classes
	
	
}//class


package com.mirth.application.master;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.ElementNotVisibleException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;

import com.mirth.controller.DriverController;
import com.mirth.controller.ThreadController;
import com.mirth.dataObjects.Browser;
import com.mirth.exceptions.AppNotPresentException;
import com.mirth.exceptions.ClassPageMappingNotFoundException;
import com.mirth.exceptions.InternetExplorerNotSupportedException;
import com.mirth.exceptions.InvalidSeleniumLocatorError;
import com.mirth.exceptions.UnknownBrowserException;
import com.mirth.utility.seleniumLib.MirthWait;
import com.mirth.utility.seleniumLib.SeleniumElement;

public final class General extends PageObject{

	public static void openFreshBrowser(String name,Browser browser) throws InvalidSeleniumLocatorError, IOException, UnknownBrowserException, InterruptedException, InternetExplorerNotSupportedException {
		
		ThreadController.updateThreadDriverMapping(Thread.currentThread().getId(),new DriverController());
		getDriverController().createAndPointToNewDriver(name,browser);		
	}	

	public static void openAndPointToAddtionalBrowser(String name,Browser browser) throws InvalidSeleniumLocatorError, IOException, UnknownBrowserException, InterruptedException, InternetExplorerNotSupportedException {
		getDriverController().createAndPointToNewDriver(name,browser);		
	}
	
	public static void switchToBrowser(String name) {
		getDriverController().pointToDriver(name);
	}
	
	public static void closeAndDestroyBrowser(String name) {
		getDriverController().closeAndRemoveDriver(name);
	}
	
	public static WebDriver browser() {
		return getDriverController().getCurrentMirthDriver().getDriver();
	}
	
	public static MirthWait getBrowserWaitTime(){
		return getDriverController().getCurrentMirthDriver().getWaitTime();
	}
	
	public static void setBrowserWaitTime(long timeOut, TimeUnit tUnit){
		getDriverController().getCurrentMirthDriver().setWaitTime(timeOut, tUnit);
	}

	public static void scrollBrowser(int pixels) {
		((JavascriptExecutor)browser()).executeScript("scroll(0, "+pixels+");");
	}

	public static void acceptAlert() {	
		String winHandleBefore = browser().getWindowHandle();
		browser().switchTo().alert().accept();	
		browser().switchTo().window(winHandleBefore);		
	}
	
	public static boolean checkIfElementExistsImmediately(SeleniumElement selElement) throws IOException, ClassPageMappingNotFoundException, AppNotPresentException, Exception{
		
		long time = General.getBrowserWaitTime().getTimeOut();
		TimeUnit timeUnit = General.getBrowserWaitTime().getTimeUnit();
		boolean elementExists = false;
		
		General.setBrowserWaitTime(0, TimeUnit.SECONDS);
		
		try{
			selElement.interact();
			elementExists = true;
		}catch(ElementNotVisibleException | NoSuchElementException envE){
			elementExists = false;
		}
		finally{
			General.setBrowserWaitTime(time,timeUnit);
		}
		
		return elementExists;				
	}	
	
	
	//Common Functions
	public static boolean checkIfElementVisibleImmediately(SeleniumElement selElement) throws IOException, ClassPageMappingNotFoundException, AppNotPresentException, Exception{
		
		boolean isDisplayed = false;
		long time = General.getBrowserWaitTime().getTimeOut();
		TimeUnit timeUnit = General.getBrowserWaitTime().getTimeUnit();
		General.setBrowserWaitTime(0, TimeUnit.SECONDS);
		try{
			isDisplayed =  selElement.interact().webElement().isDisplayed();
		}catch(ElementNotVisibleException | NoSuchElementException envE){
			isDisplayed = false;
		}finally{
			General.setBrowserWaitTime(time, timeUnit);	
		}
		
		return isDisplayed;	
		
	}

	
}


package com.mirth.controller.objects;

import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import com.mirth.exceptions.ORSheetNotPresentForApplicationException;
import com.mirth.properties.ObjectConfig;
import com.mirth.utility.spreadsheet.MicrosoftSpreadsheet;
import com.mirth.utility.staticlibraries.StaticLib;

public class ORMaster {

	//Master xpath Map
	private static final Map<String,String> masterOR = new LinkedHashMap<String,String>();
	private static String orSpreadsheetPath;
	
	private static final String valueDelimeter = ":#:";
	private static final String keyDelimeter = "";
	
	public static String[] getSelectorAndValueWithSeparator(String applicationName, String pageName,
			String objectName) {
	
		System.out.println(applicationName+"-"+pageName+"-"+objectName);
		return masterOR.get(applicationName+keyDelimeter+pageName+keyDelimeter+objectName).split(valueDelimeter);
	}

	public static SeleniumLocator getSelector(String applicationName, String pageName,
			String objectName) {

		return SeleniumLocator.valueOf(getSelectorAndValueWithSeparator(applicationName,pageName,objectName)[0]);
	}
	
	public static String getObjectValue(String applicationName, String pageName,
			String objectName) {

		return getSelectorAndValueWithSeparator(applicationName,pageName,objectName)[1];
	}		
	
	
	public static WebElement getObject(WebDriver driver,WebElement sourceElement,SeleniumLocator locatorType,String locatorString) {
		
		WebElement element = null;
		
		if (locatorType == SeleniumLocator.XPath) {				
			if (sourceElement == null) element = driver.findElement(By.xpath(locatorString));
			else element = sourceElement.findElement(By.xpath(locatorString));
		}
		
		else if (locatorType == SeleniumLocator.ID) {
			if (sourceElement == null) element = driver.findElement(By.id(locatorString));
			else element = sourceElement.findElement(By.id(locatorString));
		}
		
		else if (locatorType == SeleniumLocator.Name) {
			if (sourceElement == null) element = driver.findElement(By.name(locatorString));
			else element = sourceElement.findElement(By.name(locatorString));
		}
		
		else if (locatorType == SeleniumLocator.CssSelctor) {
			if (sourceElement == null) element = driver.findElement(By.cssSelector(locatorString));
			else element = sourceElement.findElement(By.cssSelector(locatorString));
		}
		
		else if (locatorType == SeleniumLocator.LinkText) {
			if (sourceElement == null) element = driver.findElement(By.linkText(locatorString));
			else element = sourceElement.findElement(By.linkText(locatorString));
		}
		
		else if (locatorType == SeleniumLocator.PartialLinkText) {
			if (sourceElement == null) element = driver.findElement(By.partialLinkText(locatorString));
			else element = sourceElement.findElement(By.partialLinkText(locatorString));
		}
		
		else if (locatorType == SeleniumLocator.ClassName) {
			if (sourceElement == null) element = driver.findElement(By.className(locatorString));
			else element = sourceElement.findElement(By.className(locatorString));
		}
		
		else if (locatorType == SeleniumLocator.TagName) {
			if (sourceElement == null) element = driver.findElement(By.tagName(locatorString));
			else element = sourceElement.findElement(By.tagName(locatorString));
		}	

		
		return element;
	}
	
	public static WebElement getObject(WebDriver driver,SeleniumLocator locatorType,String locatorString) {
		if (driver == null){
			throw new NullPointerException();
		}
		
		return getObject(driver,null, locatorType, locatorString);
	}
	
	public static WebElement getObject(WebElement sourceElement,SeleniumLocator locatorType,String locatorString) {
		if (sourceElement == null){
			throw new NullPointerException();
		}
		
		return getObject(null,sourceElement, locatorType, locatorString);
	}
	
	public static WebElement getObject(WebDriver driver, WebElement sourceElement,String applicationName, String pageName,String objectName) throws Exception {
 		
		String[] selectorValueWithSeparator = getSelectorAndValueWithSeparator(applicationName,pageName,objectName);
		SeleniumLocator locator =  getSelector(applicationName,pageName,objectName);
		String objectValue =  selectorValueWithSeparator[1];
		WebElement element = getObject(driver,sourceElement,locator,objectValue);
		
		return element;
		
	}
	
	public static WebElement getObject(WebDriver driver,String applicationName, String pageName,String objectName) throws Exception {
		if (driver == null){
			throw new NullPointerException();
		}
		
		return getObject(driver, null, applicationName, pageName, objectName);
	}
	
	public static WebElement getObject(WebElement sourceElement,String applicationName, String pageName,String objectName) throws Exception {
		if (sourceElement == null){
			throw new NullPointerException();
		}
		
		return getObject(null, sourceElement, applicationName, pageName, objectName);
	}
	
	public static synchronized void addAppObjectsToRepo(String applicationName,boolean ignore) throws IOException, ORSheetNotPresentForApplicationException, IllegalAccessException, IllegalArgumentException {
		
		//This method runs based on following assumption
		/*
		col=2 will have page start
		col=2 will have corresponding page end
		col=2 will have object name
		col=3 will have selector
		col=4 will have object value		
		*/
		
		//if Object Repository is NOT readbefore, then read it!!
		if (orSpreadsheetPath == null) {			
			String orFolderPathWithSeparator = StaticLib.appendFolderSeparatorIfNotPresent(StaticLib.getFrameWrorkFolderWithSeparator() 
												+ ObjectConfig.getValue("ObjectRepositoryFolderName"));
			ORMaster.orSpreadsheetPath = orFolderPathWithSeparator + ( ObjectConfig.getValue("ObjectRepositoryFileName") );			
		}
		
		MicrosoftSpreadsheet objectRepository = new MicrosoftSpreadsheet(ORMaster.orSpreadsheetPath);
		
		if (objectRepository.isSheetPresent(applicationName)) {
			objectRepository.swithchToSheet(applicationName);
		}
		else {
			
			if (ignore){ return; }
				
			throw new ORSheetNotPresentForApplicationException(applicationName);
		}
		
		
		int maxRows = objectRepository.getMaxRows();
		
		//iterate through the entire page and collect object in the Map
		RowbyRowIterateForLoop:
		for (int row=1;row<=maxRows;row++) {
			
			//If the row is NOT a Start Page, skip it!!
			String rowValue = objectRepository.readCell(row, 2);
			if (rowValue==null || !rowValue.trim().equalsIgnoreCase(ObjectConfig.getValue("StartPageH"))) {
				continue RowbyRowIterateForLoop;
			}
			
			String pageName = objectRepository.readCell(row, 3).trim();
			//If page name is blank, then ignore that page.
			if (pageName == null || pageName.equalsIgnoreCase("")) {
				continue RowbyRowIterateForLoop;
			}
			
			//skip current row!!!
			row++; //this row is the 2nd heading row
			
			String objectVal = null;
			ObjectsReadLoop:
			do{
				 row++; //go to next actual row
				 objectVal = objectRepository.readCell(row, 2);
				
				//If blank values in between objects, then ignore
				while(objectVal==null || objectVal.trim().equalsIgnoreCase("")) {
					row++;
					if (row>maxRows) {
						break RowbyRowIterateForLoop;
					}
					
					objectVal = objectRepository.readCell(row, 2);
				}//while(objectVal==null || objectVal.trim().equalsIgnoreCase(ObjectConfig.getValue("")))
				
				if (objectVal.trim().equalsIgnoreCase(ObjectConfig.getValue("EndPageH"))) {
					break ObjectsReadLoop;
				}
				
				//Here, the actual reading of objects takes place
				String key = applicationName+keyDelimeter+pageName+keyDelimeter+objectVal.trim();
				String value = objectRepository.readCell(row, 3).trim() + valueDelimeter + objectRepository.readCell(row, 4).trim();
				masterOR.put(key, value);
				
			}while(true); //breaking out of this will happen inside the loop						
			
		}//RowbyRowIterateForLoop:	for (int row=1;row<=maxRows;row++) {
		
		objectRepository.closeXl();
		
	}
	
	public static void printAllContentsOfORMap() {
		
		for(String key: masterOR.keySet()) {
			System.out.println(key + "="+ masterOR.get(key));
		}
		
		System.out.println(masterOR.size());
		
	}
	
	
}
package com.mirth.controller.objects;

public enum SeleniumLocator {
		
	XPath,ID,LinkText,Name,CssSelctor,PartialLinkText,ClassName,TagName;

}
package com.mirth.controller;

import java.io.IOException;
import java.util.HashMap;

import com.mirth.application.master.TestCaseMapping;
import com.mirth.application.master.Testcase;
import com.mirth.application.version2.mso.testcases.MSOTestCaseMapping;
import com.mirth.application.version2.results.testcases.ResultsTestCaseMapping;
import com.mirth.dataObjects.TestCaseResultData;
import com.mirth.dataObjects.TestInventoryData;
import com.mirth.exceptions.TestMappingNotFoundException;
import com.mirth.properties.ApplicationConfig;
import com.mirth.properties.ResultConfig;
import com.mirth.results.QAProof;
import com.mirth.results.ResultWriter;
import com.mirth.utility.staticlibraries.StaticLib;
import com.mirth.utility.staticlibraries.TimeLib;

public class TestRunner implements Runnable{
	
	@Override
	public void run() {		
			
			try {
				MirthLogger.log("Starting Test Case thread: " + Thread.currentThread().getId());
				this.startExecution();
				this.doHouseKeeping();	
			} catch (Exception e) {
				//This exception Should be handled
				e.printStackTrace();
				try {
					MirthLogger.log(e.getStackTrace().toString());
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		
	
	
	}
	
	private void startExecution() throws Exception {
		MirthLogger.methodEntry();
		TestInventoryData testInventory = null;
		
		TestInventoryWhileLoop:
		while(true) {
			
				try {			
				
					testInventory = Executor.testContainer.getNextData();
					if (testInventory == null) {
						break TestInventoryWhileLoop;
					}
					
					this.runTest(testInventory);

				} catch (InstantiationException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (TestMappingNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} finally {
					
				}//finally
				
		}//while(true)
		
		MirthLogger.methodExit();
	}//startExecution()
		
	private void runTest(TestInventoryData testInventory) throws Exception {
		MirthLogger.methodEntry();
		ThreadController.updateThreadInventoryMapping(testInventory);
		ThreadController.updateThreadDriverMapping(Thread.currentThread().getId(), new DriverController());
		ThreadController.updateThreadImageDocMapping(Thread.currentThread().getId(), QAProof.getCorrespondingImageDoc(testInventory));
		ThreadController.updateThreadStringMap(Thread.currentThread().getId(),new HashMap<String,String>());
		ThreadController.updateThreadObjectMap(Thread.currentThread().getId(),new HashMap<String,Object>());
		
		
		Testcase test = TestRunner.getTesstCaseClassObject(testInventory.appName, testInventory.automationScriptID);
		final TestCaseResultData resultData = new TestCaseResultData();
		
		//Pass on appropriate data required for reporting.
		resultData.appName = testInventory.appName;
		resultData.startDateTime = TimeLib.getDateTimeInFormat(ResultConfig.StartEndDateTimeFormat);
		resultData.jiraID = testInventory.manualTestID;
		resultData.scriptID = testInventory.automationScriptID;
		resultData.scriptName = testInventory.automationScriptName;
		resultData.belongsToModules = StaticLib.getStringListValuesAsString(testInventory.belongsToModulesList, ",");
		resultData.browserName = testInventory.browser.toString();
		//execute test case
		test.startTestCaseExecution(resultData);
		
		resultData.endDateTime = TimeLib.getDateTimeInFormat(ResultConfig.StartEndDateTimeFormat);
		
		ResultWriter.addTestResult(resultData);
		ThreadController.removeThreadInventoryMapping(Thread.currentThread().getId());
		ThreadController.removeThreadStringMap(Thread.currentThread().getId());
		ThreadController.removeThreadObjectMap(Thread.currentThread().getId());
		MirthLogger.methodExit();
	}

	private static Testcase getTesstCaseClassObject(String appName, String automationScriptID) throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException, TestMappingNotFoundException {

		Testcase test = null;
		String testcaseCanonicalPathName = null;
		TestCaseMapping testcaseMap = getTestCaseMap(appName);

		
		testcaseCanonicalPathName = testcaseMap.getTestClassRelativeName("TestCasePackagePath");
		String testCaseClassName = testcaseMap.getTestClassRelativeName(automationScriptID);
		testcaseCanonicalPathName += "." + testCaseClassName;
	
		test = (Testcase) Class.forName(testcaseCanonicalPathName).newInstance();
		
		return test;
		
	}	

	private static TestCaseMapping getTestCaseMap(String appName) throws IOException, TestMappingNotFoundException {
		
		TestCaseMapping testcaseMap = null;
		if (appName.equalsIgnoreCase(ApplicationConfig.getValue("MSO"))) {
			testcaseMap = MSOTestCaseMapping.getObject();
		}
		
		else if (appName.equalsIgnoreCase(ApplicationConfig.getValue("Results"))) {
			testcaseMap = ResultsTestCaseMapping.getObject();
		}
		
		else {
			throw new TestMappingNotFoundException(appName);
		}
		
		return testcaseMap;
	}

	private void doHouseKeeping() throws IOException {
		MirthLogger.methodExit();
		ThreadController.removeThreadDriverMapping(Thread.currentThread().getId());		
		ThreadController.allThreads.remove(Thread.currentThread());
		ThreadController.getLogFileOfThread(Thread.currentThread().getId()).close();
		MirthLogger.methodExit();
	}//doHouseKeeping()
}

package com.mirth.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.mirth.dataObjects.ApplicationData;
import com.mirth.dataObjects.ControllerData;
import com.mirth.dataObjects.ModuleInventoryData;
import com.mirth.dataObjects.ProductSetData;
import com.mirth.dataObjects.TestInventoryData;
import com.mirth.exceptions.NoSuchProductException;
import com.mirth.exceptions.ProductSheetNotPresentException;
import com.mirth.properties.ApplicationConfig;
import com.mirth.properties.ControllerConfig;
import com.mirth.utility.spreadsheet.MicrosoftSpreadsheet;

public class Controller {
	
	private static boolean isControllerNotActive = true;
	
	//Disable the class from ever getting initiated
	private Controller() {
		
	}
	
	public static void readControllerData(String controllerSpreadSheetPath) throws IllegalArgumentException, IllegalAccessException, IOException, NoSuchProductException, ProductSheetNotPresentException {
		MirthLogger.methodEntry();
		if (isControllerNotActive) {
			
			Controller.readControllerSpreadSheetData(controllerSpreadSheetPath);
			isControllerNotActive = false;	
			
		}
		MirthLogger.methodExit();
	}
		
	private static void readControllerSpreadSheetData(String controllerSpreadSheetPath) throws IllegalArgumentException, IOException, 
						IllegalAccessException, NoSuchProductException, ProductSheetNotPresentException {
		
		MirthLogger.methodEntry();
		
		//If the conifg object is empty, then initiate it and read config contents into it.
		if (ControllerConfig.isConfigPropertyNull())  {
			ControllerConfig.initiateControllerConfig();
		}
		
		//Available Product Set
		List<String> productSet = new ArrayList<String>();
		productSet.add(ApplicationConfig.getValue("MSO"));
		productSet.add(ApplicationConfig.getValue("Results"));
		productSet.add(ApplicationConfig.getValue("Mail"));
		productSet.add(ApplicationConfig.getValue("Match"));
		productSet.add(ApplicationConfig.getValue("Care"));
		productSet.add(ApplicationConfig.getValue("Appliance"));
		//-------------------------------------------------------------	
		
		//General attributes List
		List<String> generalAttributes = new ArrayList<String>();
		generalAttributes.add(ControllerConfig.NumberOfThreadsSH);
		generalAttributes.add(ControllerConfig.DefaultBrowserSH);
		generalAttributes.add(ControllerConfig.OneAppAtATimeSH);
		generalAttributes.add(ControllerConfig.RunNameSH);
		//-------------------------------------------------------------	
		
		//Application attributes List
		List<String> applicationAttributes = new ArrayList<String>();
		applicationAttributes.add(ControllerConfig.OverrideControllerConfigSH);
		applicationAttributes.add(ControllerConfig.ModuleExecutionOnlySH);
		applicationAttributes.add(ControllerConfig.ExecFlagDuringModuleExecSH);
		applicationAttributes.add(ControllerConfig.PriorityDuringModuleExecutionSH);
		applicationAttributes.add(ControllerConfig.PriorityBasedExecutionSH);
		applicationAttributes.add(ControllerConfig.TakeQAProofSH);
		applicationAttributes.add(ControllerConfig.TestServerSH);
		//-------------------------------------------------------------	
		
		//Browsers List
		List<String> browsersList = new ArrayList<String>();
		browsersList.add(ControllerConfig.Firefox);
		browsersList.add(ControllerConfig.Chrome);
		browsersList.add(ControllerConfig.IE);
		browsersList.add(ControllerConfig.Safari);
		browsersList.add(ControllerConfig.Default);
		//-------------------------------------------------------------	
		
		
		//Point to controller sheet
		String mainControllerSheet = ControllerConfig.MainController;
		MicrosoftSpreadsheet controller = new MicrosoftSpreadsheet(controllerSpreadSheetPath);
		//-------------------------------------------------------------
		
		//Read Product Set 
		//check which products have the execution flags set to Yes put it inside appsToRun List of Controller class
		controller.swithchToSheet(mainControllerSheet);
		int maxNumOfRowsInConfig = controller.getMaxRows();
		ProductSetData productData = new ProductSetData();
		for (int row = 3; row<=maxNumOfRowsInConfig; row++) {
			
			String rowVal = controller.readCell(2,ControllerConfig.TestExecutionFlagH, row);
			
			if (rowVal!=null && rowVal.equalsIgnoreCase(ControllerConfig.Yes)) {

				String product = controller.readCell(2,ControllerConfig.ProductH, row);
				int priority = Integer.parseInt(controller.readCell(2,ControllerConfig.ProductPriorityH, row));
				
				if (priority < 1) {priority =1;}
				//Check if product is a valid one and if NOT throw exception
				
				if (product==null || !productSet.contains(product)) {
					throw new NoSuchProductException(product);
				}
				productData.addProduct(product, priority);
			
			}//if (rowVal.equalsIgnoreCase("Yes"))	
		
		}//Product Set - for (int row = 3; row<=maxNumOfRows; row++)
		//Add the product to the executable List.
		ControllerData.getAppsToRunList().addAll(productData.getSortedProductList());
		//-------------------------------------------------------------
		
		
		//Read General Attributes from controller
		//Capture General Attributes in controllerAttributes Map of ControllerData class				
		for (int row = 3; row<=maxNumOfRowsInConfig; row++) {
			
			String key = controller.readCell(2,ControllerConfig.GeneralAttributeH, row);
			if (key!=null && generalAttributes.contains(key.trim())) {
				
				String value = controller.readCell(2,ControllerConfig.GeneralValueH, row);
				ControllerData.getGeneralAttributesMap().put(key, (value==null)?"":value);	
				
			}//controllerData - General Attributes: if (key!=null && applicationAttributes.contains(key.trim()))
	
		}//controllerData - General Attributes: for (int row = 3; row<=maxNumOfRowsInConfig; row++)
		//-------------------------------------------------------------
		
		
		//Read Application Attributes from controller
		//Capture Application Attributes in controllerAttributes Map of ControllerData class				
		for (int row = 3; row<=maxNumOfRowsInConfig; row++) {
			
			String key = controller.readCell(2,ControllerConfig.ApplicationAttributeH, row);
			if (key!=null && applicationAttributes.contains(key.trim())) {
				
				String value = controller.readCell(2,ControllerConfig.ValueH, row);
				ControllerData.getGlobalApplicationAttributesMap().put(key, (value==null)?"":value);							
			}//controllerData - Application Attributes: if (key!=null && applicationAttributes.contains(key.trim()))
	
		}//controllerData - Application Attributes: for (int row = 3; row<=maxNumOfRowsInConfig; row++)			
		//-------------------------------------------------------------		
		
		
		//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
		
		
		//Start collecting Application data based on appsToRun List in controllerData.		
		for (String appName: ControllerData.getAppsToRunList()) {
			ApplicationData appData = new ApplicationData();
			
			//throw Product Sheet NOT present exception when product sheet is NOT present.
			if (!controller.isSheetPresent(appName)) {
				throw new ProductSheetNotPresentException(appName);
			}
			
			controller.swithchToSheet(appName);
			int maxNumOfRowsInProductSheet = controller.getMaxRows();
			
			
			//Capture TestInventory and add it to appData Map of controllerData
			ReadInventoryData:
			for (int row=3;row<=maxNumOfRowsInProductSheet; row++) {
				
				String autoID = controller.readCell(2,ControllerConfig.AutomationScriptIDH, row);
								
				//If automation scriptID is NOT present, then skip the row 
				if (autoID == null  || autoID.equalsIgnoreCase("")) {
					continue ReadInventoryData;
				}
				
				TestInventoryData appInventoryData = new TestInventoryData();
				
				//appInventoryData.appName
				appInventoryData.appName = appName;
				
				//appInventoryData.manualTestID
				appInventoryData.manualTestID = controller.readCell(2,ControllerConfig.ManualTestCaseIDH, row);
				if (appInventoryData.manualTestID == null) {
					appInventoryData.manualTestID = "";
				}
				//----------------------------------
				
				
				//appInventoryData.automationScriptID
				appInventoryData.automationScriptID = autoID;
				if (appInventoryData.automationScriptID == null) {
					appInventoryData.automationScriptID = "";
				}
				//----------------------------------
				
				
				//appInventoryData.automationScriptName
				appInventoryData.automationScriptName = controller.readCell(2,ControllerConfig.AutomationScriptNameH, row);
				if (appInventoryData.automationScriptName == null) {
					appInventoryData.automationScriptName = "";
				}
				//----------------------------------
				
				
				//appInventoryData.isExecutionFlag
				String executionFlag = controller.readCell(2,ControllerConfig.ExecutionFlagH, row);
				if (executionFlag != null && executionFlag.equalsIgnoreCase(ControllerConfig.Yes)) {
					appInventoryData.isExecutionFlag = true;
				}
				else {
					appInventoryData.isExecutionFlag = false;
				}
				//----------------------------------
				
				
				//appInventoryData.browser
				String browser = controller.readCell(2,ControllerConfig.BrowserH, row);
				if (browser != null && browsersList.contains(browser)) {
					appInventoryData.browserString = browser;
				}
				else {
					appInventoryData.browserString =  ControllerConfig.Default;
				}
				//----------------------------------
				
				
				//appInventoryData.priority
				String intPriority = controller.readCell(2,ControllerConfig.PriorityH, row);
				if (intPriority!=null) {
					
					try {
						int priority = Integer.parseInt(intPriority);
						
						if (priority<1) {
							priority = 1;
						}
						
						appInventoryData.priority = priority;
						
					} catch (Exception parseException) {
						appInventoryData.priority = 1;
					}//catch (Exception parseException)
					
				}//if (intPriority!=null) 
				//----------------------------------
				
							
				//appInventoryData.qaProofNeeded
				appInventoryData.qaProofNeeded = controller.readCell(2,ControllerConfig.QAProofH, row);
				//---------------------------------
							
				
				//appInventoryData.belongsToModulesList
				String moduleMappingList = 	controller.readCell(2,ControllerConfig.ModuleMappingH, row);			
				if (moduleMappingList!=null && !moduleMappingList.equalsIgnoreCase("")) {
					
					try {
						
						String[] modules = moduleMappingList.split(",");
						
						appInventoryData.belongsToModulesList = new ArrayList<String>();
						
						for (String module: modules) {
							appInventoryData.belongsToModulesList.add(module);
						}
						
					}catch(Exception splitException) {
						appInventoryData.belongsToModulesList = null;
					}
					
				}//if (moduleMappingList!=null && !moduleMappingList.equalsIgnoreCase(""))
				//----------------------------------
				
				
				//appInventoryData.dependentOnTestCasesList
				String dependingOnList = 	controller.readCell(2,ControllerConfig.DependentOnH, row);			
				if (dependingOnList!=null && !dependingOnList.equalsIgnoreCase("")) {
					
					try {

						String[] dependsOnArray = dependingOnList.split(",");
						appInventoryData.dependentOnTestCasesList = new ArrayList<String>();
						
						for (String dependOn: dependsOnArray) {
							appInventoryData.dependentOnTestCasesList.add(dependOn);
						}
						
					}catch(Exception splitException) {
						appInventoryData.dependentOnTestCasesList = null;

					}

				}//if (dependingOnList!=null && !dependingOnList.equalsIgnoreCase(""))
				//----------------------------------
				
				
				//appInventoryData.dontRunWithList
				String runsAlone = controller.readCell(2,ControllerConfig.RunsAloneH, row);
				if (runsAlone != null && runsAlone.equalsIgnoreCase(ControllerConfig.Yes)) {
					appInventoryData.isRunsAlone = true;
				}
				else {
					appInventoryData.isRunsAlone = false;
				}
				//----------------------------------
				
				
				//appInventoryData.automationScriptID
				String dontRunWithList = 	controller.readCell(2,ControllerConfig.DontRunWithH, row);			
				if (dontRunWithList!=null && !dontRunWithList.equalsIgnoreCase("")) {
					
					try {

						String[] dontRunArray = dontRunWithList.split(",");
						
						
						appInventoryData.dontRunWithList = new ArrayList<String>();
						
						for (String dontRunOn: dontRunArray) {
							appInventoryData.dontRunWithList.add(dontRunOn);
						}
						
					}catch(Exception splitException) {

						appInventoryData.dontRunWithList = null;						
					}
					
				}//if (dontRunWithList!=null && !dontRunWithList.equalsIgnoreCase(""))
				//----------------------------------
					
				//Add the test to TestInventory of our AppData
				appData.getTestInventory().add(appInventoryData);
				
			}//ReadInventroyData - for (int row=3;row<=maxNumOfRowsInProductSheet; row++)		
			
			
			//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
			
			//Read Application configuration to applicationAttributesMap of Application Data				
			for (int row = 3; row<=maxNumOfRowsInProductSheet; row++) {
				
				String key = controller.readCell(2,ControllerConfig.ApplicationAttributeH, row);
				if (key!=null && !key.equalsIgnoreCase("") && applicationAttributes.contains(key.trim())) {
					
					String value = controller.readCell(2,ControllerConfig.ValueH, row);
					appData.getLocalApplicationAttributesMap().put(key, (value==null)?"":value);							
				}//appData-Application Attributes: if (key!=null && applicationAttributes.contains(key.trim()))
		
			}// appData - Application attributes - (int row=3; row<=maxNumOfRowsInProductSheet; row++)				
			//-------------------------------------------------------------	
			
			//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//
			
			//Read Module data to moduleInventoryList of ApplicationsData
			ReadModuleInventoryData:
			for (int row = 3; row<=maxNumOfRowsInProductSheet; row++) {
				
				String moduleID = controller.readCell(2,ControllerConfig.ModuleIDH, row);
				if (moduleID != null && !moduleID.equalsIgnoreCase("")) {
					
					ModuleInventoryData mData = new ModuleInventoryData();
					mData.moduleID = moduleID;
					
					String moduleFlag = controller.readCell(2,ControllerConfig.ModuleExecutionFlagH, row);
					
					if (moduleFlag==null || !moduleFlag.equalsIgnoreCase(ControllerConfig.Yes)) {
						
						//Don't Read this!! Just Skip..
						continue ReadModuleInventoryData;	
					
					}//mData					
					
					String moduleName = controller.readCell(2,ControllerConfig.ModuleNameH, row);		
					if (moduleName==null) {
						moduleName="";
					}
					mData.moduleName = moduleName;			
					
					//Add the moduleData to Applications Data
					appData.getModuleInventoryList().add(mData);
					
				}//ModuleData - if (moduleID != null && !moduleID.equalsIgnoreCase(""))
			}//Applications Data - Module Data: for (int row = 3; row<=maxNumOfRowsInProductSheet; row++)
			//-------------------------------------------------------------	
						
			//Write the appData to AppData of ControllerData
			ControllerData.getAppDataMap().put(appName, appData);					
			
			//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//			
			
		}//AppsToRun - for (String appName: ControllerData.getAppsToRun())		
	
		//close spreadsheet and make controller object eligible for garbage collection
		controller.closeXl();
		controller = null;
		MirthLogger.methodExit();
	}
}
package com.mirth.controller;

import java.util.List;
import java.util.Map;
import java.util.Set;

public class Assertions {

	public static boolean isSame(String expected, String actual,boolean isCaseSensitive) {
		
		if (isCaseSensitive){
			return expected.equals(actual);
		}

		return expected.equalsIgnoreCase(actual);
		
	}

	public static boolean isSame(long expected, long actual) {
		return (expected==actual);
	}
	
	public static boolean isSame(double expected, double actual) {
		return (expected==actual);
	}

	public static boolean isSame(double expected, long actual) {
		return (expected==(double)actual);
	}

	public static boolean isSame(long expected, double actual) {
		return isSame(actual,expected);
	}

	public static boolean isSame(boolean expected, boolean actual) {
		return (expected==actual);
	}
	
	public static boolean isSame(Object objA,Object objB) {
		return objA.equals(objB);
	}

	public static boolean isSame(String expected,Long actual, boolean isCaseSensitive) {
		return isSame(expected,actual.toString(),isCaseSensitive);
	}
	
	public static boolean isSame(Long expected,String actual, boolean isCaseSensitive) {
		return isSame(actual,expected,isCaseSensitive);
	}
	
	public static boolean isSame(String expected,Double actual, boolean isCaseSensitive) {
		return isSame(expected,actual.toString(),isCaseSensitive);
	}
	
	public static boolean isSame(Double expected,String actual, boolean isCaseSensitive) {
		return isSame(actual,expected,isCaseSensitive);
	}

	public static boolean isSame(String expected,Boolean actual, boolean isCaseSensitive) {
		return isSame(expected,actual.toString(),isCaseSensitive);
	}
	
	public static boolean isSame(Boolean expected,String actual, boolean isCaseSensitive) {
		return isSame(actual,expected,isCaseSensitive);
	}

	public static boolean isSame(String expected,long actual) {
		
		try{
			return isSame(Long.parseLong(expected),actual);
		}catch(Exception e) {
			//non parsable if the control comes here.
		}		
		return false;		
	}
	
	public static boolean isSame(long expected,String actual) {
		return isSame(actual,expected);
	}
	
	public static boolean isSame(String expected,double actual) {
		
		try{
			return isSame(Double.parseDouble(expected),actual);
		}catch(Exception e) {
			//non parsable if the control comes here.
		}		
		return false;		
	}
	
	public static boolean isSame(double expected,String actual) {
		return isSame(actual,expected);
	}


	public static boolean isTrue(boolean expression) {
		if (expression) {
			return true;
		}
		
		return false;
	}
	

	public static boolean isFalse(boolean expression) {
		
		return !isTrue(expression);
	}
	
	public static boolean isNull(Object obj) {
		return (obj==null);
	}
	
	public static boolean isNotNull(Object obj) {
		return !isNull(obj);
	}
	
	public static boolean isNotEmpty(String str) {
		
		if (isNull(str)) {
			return false;
		}
		return !str.equalsIgnoreCase("");
	}
	
	public static boolean isNotEmpty(List<? extends Object> c) {
		if (isNull(c)) {
			return false;
		}
		return (c.size()>0);
	}
	
	public static boolean isNotEmpty(Set<? extends Object> s) {
		if (isNull(s)) {
			return false;
		}
		return (s.size()>0);
	}
	
	
	public static boolean isNotEmpty(Map<? extends Object,? extends Object> m) {
		if (isNull(m)) {
			return false;
		}
		return (m.size()>0);
	}

	public static boolean isNegetive(double num) {
		return (num<0);
	}
	
	public static boolean isNotNegetive(double num) {
		return !isNegetive(num);
	}
	
	public static boolean isPositive(double num) {
		return (num<0);
	}
	
	public static boolean isNotPositive(double num) {
		return !isPositive(num);
	}

	public static boolean isZero(double num) {
		return (num == 0);
	}

	public static boolean isNotZero(double num) {
		return !isZero(num);
	}


}
package com.mirth.dataObjects;

import java.io.PrintWriter;
import java.util.Map;

import com.mirth.controller.DriverController;
import com.mirth.controller.Verification;
import com.mirth.utility.microsoftDocX.TextImageDoc;

public class ThreadData {
		
	public DriverController driverController = null;
	public PrintWriter printWriter = null;
	public TestInventoryData testInventoryData = null;
	public TextImageDoc textImageDoc = null;
	public Map<String,String> dataMap = null;
	public Map<String,Object> objMap = null;
	public Verification verify = null;
	
	public HeadingController headingController = new HeadingController("");
	
	
	public ThreadData() {
		
	}
	
}
package com.mirth.dataObjects;

import com.mirth.utility.seleniumLib.Setter;

public class SetterDataPair {

	public Setter setter = Setter.plainText;
	public String data = null;
	
}
package com.mirth.dataObjects;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import java.util.TreeSet;

public class ProductSetData {

	TreeMap<Integer,ArrayList<String>> productMap = new TreeMap<Integer,ArrayList<String>>();

	
	public void addProduct(String product,int priority){
		
		ArrayList<String> listProduct = productMap.get(priority);
		if (listProduct == null) {
			listProduct = new ArrayList<String>();
			productMap.put(priority, listProduct);
		}
		listProduct.add(product);
	}
	
	public List<String> getSortedProductList() {
		
		List<String> finalProductList = new ArrayList<String>();
		for (Integer i: new TreeSet<Integer>(productMap.keySet())) {
			
			for (String product: productMap.get(i)) {
				finalProductList.add(product);
			}//for (String product: productMap.get(i))					
		}//for (Integer i: new TreeSet<Integer>(productMap.keySet()))
		
		return finalProductList;
	}
}
package com.mirth.dataObjects;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class ApplicationData {

	private List<TestInventoryData> testInventoryList = new ArrayList<TestInventoryData>();
	private Map<String,String> localApplicationAttributesMap = new LinkedHashMap<String,String>();
	private List<ModuleInventoryData> moduleInventoryList = new ArrayList<ModuleInventoryData>();
	
	public Map<String,String> getLocalApplicationAttributesMap() {
		return localApplicationAttributesMap;
	}
	
	public List<TestInventoryData> getTestInventory() {
		return testInventoryList;
	}
	
	public List<ModuleInventoryData> getModuleInventoryList() {
		return moduleInventoryList;
	}

	
}
package com.mirth.dataObjects;

public enum Browser {
	Firefox,Chrome,IE,Safari
}
package com.mirth.properties;

import java.io.IOException;
import java.util.Properties;

public class OtherConfig{
	
	private OtherConfig() {
		//Singleton
	}

	//singleton object
	private static OtherConfig appConfig =null; 
	private Properties config;
	private String configFileName= "OtherConfig.properties";
	//Config Variable END----------------------
	
	public synchronized static OtherConfig getObject() {
		
		if (OtherConfig.appConfig == null) {
			OtherConfig.appConfig = new OtherConfig();
		}
		
		return OtherConfig.appConfig;
	}
	
	
	private synchronized void initiateControllerConfig() throws IOException {
		config = new Properties();
		config.load(OtherConfig.class.getResourceAsStream(configFileName));
		
	}//initiateControllerConfig() throws IOException
	
	
	public synchronized String getVal(String configKey) throws IOException {
		
		if (isConfigPropertyNull()) {
			initiateControllerConfig();
		}
		
		return config.getProperty(configKey);
	}
	
	public static synchronized String getValue(String configKey) throws IOException {		
		return OtherConfig.getObject().getVal(configKey);	
	}

	public synchronized boolean isConfigPropertyNull() {
		return (config==null)?true:false;
	}
	
}
package com.mirth.properties;

import java.io.IOException;
import java.util.Properties;

public class TestDataConfig{
	
	private TestDataConfig() {
		//Singleton
	}

	//singleton object
	private static TestDataConfig appConfig =null; 
	private Properties config;
	private String configFileName= "TestData.properties";
	//Config Variable END----------------------
	
	public synchronized static TestDataConfig getObject() {
		
		if (TestDataConfig.appConfig == null) {
			TestDataConfig.appConfig = new TestDataConfig();
		}
		
		return TestDataConfig.appConfig;
	}
	
	
	private synchronized void initiateControllerConfig() throws IOException {
		config = new Properties();
		config.load(TestDataConfig.class.getResourceAsStream(configFileName));
		
	}//initiateControllerConfig() throws IOException
	
	
	public synchronized String getVal(String configKey) throws IOException {
		
		if (isConfigPropertyNull()) {
			initiateControllerConfig();
		}
		
		return config.getProperty(configKey);
	}
	
	public static synchronized String getValue(String configKey) throws IOException {		
		return TestDataConfig.getObject().getVal(configKey);	
	}

	public synchronized boolean isConfigPropertyNull() {
		return (config==null)?true:false;
	}
	
}
package com.mirth.results;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;

import com.mirth.controller.Assertions;
import com.mirth.controller.DriverScript;
import com.mirth.controller.Executor;
import com.mirth.controller.MirthLogger;
import com.mirth.controller.TestOrganizer;
import com.mirth.controller.ThreadController;
import com.mirth.dataObjects.ApplicationResultData;
import com.mirth.dataObjects.SynchronizedDataQueue;
import com.mirth.dataObjects.TestCaseResultData;
import com.mirth.properties.ResultConfig;
import com.mirth.utility.spreadsheet.CellFormatting;
import com.mirth.utility.spreadsheet.MicrosoftSpreadsheet;
import com.mirth.utility.staticlibraries.SleepLib;
import com.mirth.utility.staticlibraries.StaticLib;
import com.mirth.utility.staticlibraries.StringLib;

public class ResultWriter implements Runnable{

	private static boolean isResultWriterInitiated = false;
	private static ResultWriter thisWriter;
	private static String resultFolderPath;
	private static Map<String,ApplicationResultData> appResultContainer = new HashMap<String,ApplicationResultData>();
	private static Map<String,Integer> testCaseHeaderRow = new HashMap<String,Integer>();
	private static SynchronizedDataQueue<TestCaseResultData> testResultContainer = new SynchronizedDataQueue<TestCaseResultData>();
	private static boolean isResultWriterFinished=false;
	private static int resultStallTimeInSeconds = 1;
	private static String noAppDataString = "<Unknown>";
	private static String runName="";
	private static String runNameSeparator="";
	
	private static String runResultFolderPath = null;
	
	public static String getRunResultFolderPath() {
		return ResultWriter.runResultFolderPath;
	}

//
	private static Map<String, Integer> nextTestCaseNumMap = new HashMap<String,Integer>();
	
	private static String getNextTestCaseNumber(String appName) {
		Integer num = nextTestCaseNumMap.get(appName);
		
		if(Assertions.isNull(num)) {
			num = 1;
		}
		
		nextTestCaseNumMap.put(appName, num+1);	
		
		return num.toString();
	}
	
	private static int getTestCaseHeaderRow(String appName) {
		
		Integer num = testCaseHeaderRow.get(appName);
		
		if(Assertions.isNull(num)) {
			num = 1;
		}
		
		return num;
		
	}
	
	private static void putTestCaseHeaderRow(String appName,int rowNum) {
		
		testCaseHeaderRow.put(appName, rowNum);
		
	}
	
	public static boolean getIsResultWriterFinished() {
		return isResultWriterFinished;
	}
	
	private ResultWriter() {
		//Singleton Object
	}
	
	public static ResultWriter getWriter() {
		
		if (thisWriter == null) {
			thisWriter = new ResultWriter();
		}
		
		return thisWriter;
	}
	
	public static synchronized void addTestResult(TestCaseResultData testResult){
		//putData is synchronized internally.
		testResultContainer.putData(testResult);
	}
	
	public static synchronized void addAppResult(ApplicationResultData appResult){
		appResultContainer.put(appResult.appName, appResult);		
	}	
	
	private static synchronized TestCaseResultData getNextTestResult(){
		//putData is synchronized internally.
		return testResultContainer.getNextData();
	}
	
	private static synchronized boolean isResultContainerEmpty(){
		//putData is synchronized internally.
		return testResultContainer.isContainerEmpty();
	}
	
	private static synchronized ApplicationResultData getAppResult(String appName){
		return appResultContainer.get(appName);	
	}
	
	
	@Override
	public void run() {
		
		if (ResultWriter.isResultWriterInitiated) {
			//Result writer already started. It has been called incorrectly. So quit thread!!
			return;
		}
		ResultWriter.isResultWriterInitiated = true;
		
		
		try {				
				ThreadController.updateThreadLogMapping(
															Thread.currentThread().getId(),
															MirthLogger.getNewResultsThreadLogFile()
													   );
				
				processResults();

			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				
			} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			}
 		
	}//public void run()k
	
	
	private void processResults() throws InterruptedException, IOException, IllegalAccessException, IllegalArgumentException {

		MirthLogger.log("Starting Results Thread!!");
		
		//Create a spreadsheet
		String runSpreadSheetPath = ResultWriter.runResultFolderPath + StaticLib.getCustomDateTimeNameInFormat(DriverScript.executionStartTime,runName+runNameSeparator, ResultConfig.RunDateTimeFormat);
		runSpreadSheetPath+= "."+ResultConfig.ResultSpreadSheetFormat;
		MicrosoftSpreadsheet resultXL = new MicrosoftSpreadsheet(runSpreadSheetPath);
		File resultXLFile = new File(resultXL.getFilePath());
		MirthLogger.log("Pointed to Results file path");		
		
		//Run forever until all the execution is completed.
		while(true) {
			
			//if Result container is NOT empty keep on writing results!!
			while (!isResultContainerEmpty()){
				
				TestCaseResultData resultData = getNextTestResult();
				MirthLogger.log("Writing result for test case: " + resultData.scriptID +" for app: "+resultData.appName);
				if (!resultXLFile.exists()) {
					resultXL.createWorkbook(resultData.appName,true);
					
				}				
								
				if (!resultXL.isSheetPresent(resultData.appName)){
					resultXL.createSheet(resultData.appName);
				}
				
				//Switch to appropriateSheet
				resultXL.closeXl();
				MirthLogger.log("Switching to sheet: "+resultData.appName);
				resultXL.swithchToSheet(resultData.appName);
				int maxRow = resultXL.getMaxRows();
				MirthLogger.log("Max rows in "+resultData.appName + " sheet as of now is " + maxRow);
												
				//If Appresult is NOT written, then write it or leave space for it
				ApplicationResultData appResult = getAppResult(resultData.appName);
				
				//in case app result is not passed, put blank data
				if (appResult==null) {
					appResult = new ApplicationResultData();
					appResult.appName = resultData.appName;
					addAppResult(appResult);					
				}
				
				if (!appResult.isWritten) {
					MirthLogger.log("Writing applicaion related result");
					//Logic for writing appResult
					maxRow = 1;
					
					CellFormatting cellFormat = new CellFormatting();
					cellFormat.foregroundColor = IndexedColors.BLACK.getIndex();
					cellFormat.fontColor=IndexedColors.GOLD.getIndex();
					cellFormat.boldFont = true;
					cellFormat.borderType = CellStyle.BORDER_THICK;
					cellFormat.fullBorders = true;
					cellFormat.fontHeight = 14;
					cellFormat.alignMent = CellStyle.ALIGN_CENTER;
					
					resultXL.writeCell(maxRow,1,ResultConfig.RunInformationH,cellFormat,false);
					//below is a dummy write for Border to appear around Run Information
					resultXL.writeCell(maxRow++,2,"",cellFormat,false);
					
					resultXL.mergeColumnsInRow(1,1,2);
					
					cellFormat.fontHeight = Font.SS_NONE;
					cellFormat.fontColor=IndexedColors.BLACK.getIndex();
					cellFormat.foregroundColor = IndexedColors.GOLD.getIndex();
					resultXL.writeCell(maxRow,1,ResultConfig.AppHeadingConfigH,cellFormat,false);
					resultXL.writeCell(maxRow++,2,ResultConfig.AppHeadingValueH,cellFormat,false);
					
					cellFormat.alignMent = CellStyle.ALIGN_GENERAL;
					cellFormat.foregroundColor = CellStyle.NO_FILL;
					cellFormat.fullBorders = false;
					cellFormat.bucketBorder = true;
					cellFormat.borderType = CellStyle.BORDER_THIN;
					cellFormat.boldFont = false;
					resultXL.writeCell(maxRow,1,ResultConfig.ApplicationNameH,cellFormat,false);
					resultXL.writeCell(maxRow++,2,StringLib.getNotNullString(appResult.appName, noAppDataString),cellFormat,false);
					
					resultXL.writeCell(maxRow,1,ResultConfig.EnvironmentH,cellFormat,false);
					resultXL.writeCell(maxRow++,2,StringLib.getNotNullString(appResult.environment,noAppDataString),cellFormat,false);
					
					resultXL.writeCell(maxRow,1,ResultConfig.BuildNumberH,cellFormat,false);
					resultXL.writeCell(maxRow++,2,StringLib.getNotNullString(appResult.buildNumber,noAppDataString),cellFormat,false);
					
					resultXL.writeCell(maxRow,1,ResultConfig.RunStartH,cellFormat,false);
					resultXL.writeCell(maxRow++,2,StringLib.getNotNullString(appResult.runStart,noAppDataString),cellFormat,false);
					
					resultXL.writeCell(maxRow,1,ResultConfig.RunEndH,cellFormat,false);
					resultXL.writeCell(maxRow++,2,StringLib.getNotNullString(appResult.runEnd,noAppDataString),cellFormat,false);
					
					resultXL.writeCell(maxRow,1,ResultConfig.RunIDH,cellFormat,false);		
					resultXL.writeCell(maxRow++,2,StringLib.getNotNullString(appResult.runID,noAppDataString),cellFormat,false);
										
					appResult.isWritten = true;
					
					//Mandatorily print this Heading
					maxRow+=2;
					
					cellFormat =null;
					cellFormat = new CellFormatting();
					cellFormat.foregroundColor = IndexedColors.SKY_BLUE.getIndex();
					cellFormat.boldFont = true;
					cellFormat.borderType = CellStyle.BORDER_THICK;
					cellFormat.fullBorders = true;
					cellFormat.alignMent = CellStyle.ALIGN_CENTER;
					
					
					resultXL.writeCell(maxRow,1,ResultConfig.TestCaseNumber,cellFormat,false);
					resultXL.writeCell(maxRow,2,ResultConfig.StartDateTime,cellFormat,false);
					resultXL.writeCell(maxRow,3,ResultConfig.EndDateTime,cellFormat,false);
					resultXL.writeCell(maxRow,4,ResultConfig.JiraID,cellFormat,false);
					resultXL.writeCell(maxRow,5,ResultConfig.ScriptID,cellFormat,false);
					resultXL.writeCell(maxRow,6,ResultConfig.TestName,cellFormat,false);
					resultXL.writeCell(maxRow,7,ResultConfig.BelongsToModule,cellFormat,false);
					resultXL.writeCell(maxRow,8,ResultConfig.Browser,cellFormat,false);
					resultXL.writeCell(maxRow,9,ResultConfig.Result,cellFormat,false);
					resultXL.writeCell(maxRow,10,ResultConfig.Issues,cellFormat,false);
					resultXL.writeCell(maxRow,11,ResultConfig.MiscData,cellFormat,false);
					
					putTestCaseHeaderRow(resultData.appName, maxRow);
					resultXL.save();
					resultXL.closeXl();
					resultXL.swithchToSheet(resultData.appName);
					MirthLogger.log("Finished writing applicaion related result");
				}//if (!appResult.isWritten)
				
				CellFormatting cellFormat = new CellFormatting();
				cellFormat.boldFont = false;
				cellFormat.borderType = CellStyle.BORDER_THIN;
				cellFormat.bucketBorder = true;
				
				//if control reaches here, then AppResult and test heading is already Written. So, just write the result row.
				MirthLogger.log("Writing actual test result to row now.");
				maxRow++;
				int headingRowOfExcel=getTestCaseHeaderRow(resultData.appName);
				resultXL.writeCell(headingRowOfExcel,ResultConfig.TestCaseNumber,maxRow,"["+getNextTestCaseNumber(resultData.appName)+"]",cellFormat,false);
				resultXL.writeCell(headingRowOfExcel,ResultConfig.StartDateTime,maxRow,resultData.startDateTime,cellFormat,false);
				resultXL.writeCell(headingRowOfExcel,ResultConfig.EndDateTime,maxRow,resultData.endDateTime,cellFormat,false);
				resultXL.writeCell(headingRowOfExcel,ResultConfig.JiraID,maxRow,resultData.jiraID,cellFormat,false);
				resultXL.writeCell(headingRowOfExcel,ResultConfig.ScriptID,maxRow,resultData.scriptID,cellFormat,false);
				resultXL.writeCell(headingRowOfExcel,ResultConfig.TestName,maxRow,resultData.scriptName,cellFormat,false);
				resultXL.writeCell(headingRowOfExcel,ResultConfig.BelongsToModule,maxRow,resultData.belongsToModules,cellFormat,false);
				resultXL.writeCell(headingRowOfExcel,ResultConfig.Browser,maxRow,resultData.browserName,cellFormat,false);
				resultXL.writeCell(headingRowOfExcel,ResultConfig.Issues,maxRow,resultData.getIssues(),cellFormat,false);
				resultXL.writeCell(headingRowOfExcel,ResultConfig.MiscData,maxRow,resultData.getMiscData(),cellFormat,false);	

				//Write result data in color
				cellFormat.boldFont = true;			
				String resultString = resultData.getResultString();
				if (resultString.equalsIgnoreCase(ResultConfig.Pass)) {
					cellFormat.fontColor = IndexedColors.GREEN.getIndex();
				}				
				else {
					cellFormat.fontColor = IndexedColors.RED.getIndex();
				}
				resultXL.writeCell(headingRowOfExcel,ResultConfig.Result,maxRow,resultString,cellFormat,false);
				
				MirthLogger.log("Auto sizing columns in sheet: "+resultData.appName);
				resultXL.autoSizeSheet(resultData.appName,testCaseHeaderRow.get(resultData.appName));
				resultXL.save();
			}//while (!isResultContainerEmpty()){
			
			resultXL.closeXl();
			//this block should be in the bottom of while loop
			if (Executor.isExecutionCompleted) {
				
				if (ResultWriter.isResultContainerEmpty()) {
					break;
				}//if (ResultWriter.getIsFinishedWithResults())
				
			}//if (Executor.isExecutionCompleted)			
			
			SleepLib.sleepSeconds(resultStallTimeInSeconds);
			
		}//while(true) 

		//
		if (!resultXL.isWorkBookPresent()) {
			resultXL.createWorkbook("No Execution", false);
			resultXL.swithchToSheet("No Execution");	
			
			CellFormatting cellFormat= new CellFormatting();
			cellFormat.boldFont = true;
			cellFormat.fontColor = IndexedColors.RED.getIndex();
			cellFormat.fontHeight = 20;
			
			resultXL.writeCell("A1", "None of the test cases were executed!!", cellFormat, true);
		}//if (!resultXL.isWorkBookPresent()) 

		resultXL.closeXl();
		ResultWriter.isResultWriterFinished = true;
		System.out.println("ResultWriterDone!!!");
		ThreadController.getLogFileOfThread(Thread.currentThread().getId()).close();
	}//private void processResults() throws InterruptedException
	
	
	public static void createRequiredResultFolders() throws IOException {
		MirthLogger.methodEntry();
		//Create a resultFolder if not exists.
		ResultWriter.resultFolderPath = StaticLib.appendFolderSeparatorIfNotPresent(StaticLib.getFrameWrorkFolderWithSeparator() + ResultConfig.ResultFolderName);
		File resultFolder = new File(ResultWriter.resultFolderPath);
		if (!resultFolder.exists()) {
			resultFolder.mkdir();
		}//if (!resultFolder.exists()) 
				
		//Create a run folder
		runName = TestOrganizer.runResultPrefix;
		if (!Assertions.isNotEmpty(runName)) {
			runName = ResultConfig.RunPrefix;
		}//if (runFolderName==null || runFolderName.equalsIgnoreCase(""))
		
		runNameSeparator = "_";
		//Below code can be used if we need a folder for each run
		
		String runFolderName=StaticLib.getCustomDateTimeNameInFormat(DriverScript.executionStartTime,runName+runNameSeparator, ResultConfig.RunDateTimeFormat);
		String runFolderPath = StaticLib.appendFolderSeparatorIfNotPresent(ResultWriter.resultFolderPath + runFolderName);
		
		File runFolder = new File(runFolderPath);
		if (!runFolder.exists()) {
			runFolder.mkdir();
		}//if (!runFolder.exists())
		
		//Now, ready for ThreadExecution.
		ResultWriter.runResultFolderPath = runFolderPath;
		MirthLogger.methodExit();
		
	}
	
}//class
package com.mirth.results;

import java.io.File;
import java.io.IOException;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.WebDriver;

import com.mirth.controller.MirthLogger;
import com.mirth.controller.ThreadController;
import com.mirth.dataObjects.TestInventoryData;
import com.mirth.exceptions.AppNotPresentException;
import com.mirth.exceptions.ClassPageMappingNotFoundException;
import com.mirth.properties.ResultConfig;
import com.mirth.utility.microsoftDocX.TextImageDoc;
import com.mirth.utility.seleniumLib.SeleniumElement;
import com.mirth.utility.staticlibraries.Screenshot;
import com.mirth.utility.staticlibraries.StaticLib;

public class QAProof {
	
	private static String infoColor = "FF00FF";//Cyan

	public static TextImageDoc getCorrespondingImageDoc(TestInventoryData testInventory) {
		
		String screenshotFolderPath = StaticLib.appendFolderSeparatorIfNotPresent(
				ResultWriter.getRunResultFolderPath()+ResultConfig.getConfigVal("ScreenShotFolderName"));
		File screenShotFolder = new File(screenshotFolderPath);
		if (!screenShotFolder.exists()){
			synchronized(QAProof.class){
				if(!screenShotFolder.exists()) screenShotFolder.mkdir();
			}			
		}
		
		String 	screenShotAppFolderPath = 	StaticLib.appendFolderSeparatorIfNotPresent(screenshotFolderPath + testInventory.appName);
		File screenShotAppFolder = new File(screenShotAppFolderPath);
		if (!screenShotAppFolder.exists()) {
			synchronized(QAProof.class){
				if(!screenShotAppFolder.exists()) screenShotAppFolder.mkdir();
			}	
		}
		
		String textImageDocFileName = screenShotAppFolderPath + testInventory.automationScriptID + "." + ResultConfig.getConfigVal("QAProofDocFileExtension");
		return new TextImageDoc(textImageDocFileName);
		
	}//public static TextImageDoc getCorrespondingImageDoc(TestInventoryData testInventory) 
	
	public static void screenshot(SeleniumElement selElement) throws ClassPageMappingNotFoundException, AppNotPresentException, Exception{
		selElement.interact().isDisplayed();
		QAProof.screenshot();
	}
	
	public static void screenshot() throws IOException, InvalidFormatException {
		
		if (!ThreadController.getInventoryOfThread(Thread.currentThread().getId()).isQAProofNeed) {
			return;
		}
		
		WebDriver driver = ThreadController.getDriverControllerForThread(
				Thread.currentThread().getId() )
				.getCurrentMirthDriver().getDriver();
				
				
		if (driver == null) {
			return;
		}
		
		int width = Integer.parseInt(ResultConfig.getConfigVal("ScreenShotWidth"));
		int height = Integer.parseInt(ResultConfig.getConfigVal("ScreenShotHeight"));
		
		/*
		byte[] screenshotBytes = Screenshot.getScreenshotInBytes(driver);
			
		ThreadController.getTextImageDocOfThread(
				Thread.currentThread().getId() )
				.insertImage(screenshotBytes, width, height);				
		*/
		
		File screenshotFile = Screenshot.getScreenshotInFile(driver);
		ThreadController.getTextImageDocOfThread(
				Thread.currentThread().getId() )
				.insertImage(screenshotFile, width, height);
		
		MirthLogger.log("Screenshot taken.");
	}
	
	public static void writeText(String data, String colorInHex) throws IOException {
		
		if (!ThreadController.getInventoryOfThread(Thread.currentThread().getId()).isQAProofNeed) {
			return;
		}
		
		ThreadController.getTextImageDocOfThread(
				Thread.currentThread().getId() )
				.writeText(data, colorInHex);
		
		MirthLogger.log(data);
		
	}
	
	public static void writeText(String data) throws IOException {		
		writeText(data,"000000");
	}
	
	public static void writeInfo(String data) throws IOException{
		writeText(data,infoColor);
	}
	
}//class
package com.mirth.properties;

import java.io.IOException;
import java.util.Properties;

public class LogConfig{
	
	private LogConfig() {
		//Singleton
	}

	//singleton object
	private static LogConfig appConfig =null; 
	private Properties config;
	private String configFileName= "LogConfig.properties";
	//Config Variable END----------------------
	
	public synchronized static LogConfig getObject() {
		
		if (LogConfig.appConfig == null) {
			LogConfig.appConfig = new LogConfig();
		}
		
		return LogConfig.appConfig;
	}
	
	
	private synchronized void initiateControllerConfig() throws IOException {
		config = new Properties();
		config.load(LogConfig.class.getResourceAsStream(configFileName));
		
	}//initiateControllerConfig() throws IOException
	
	
	public synchronized String getVal(String configKey) throws IOException {
		
		if (isConfigPropertyNull()) {
			initiateControllerConfig();
		}
		
		return config.getProperty(configKey);
	}
	
	public static synchronized String getValue(String configKey) throws IOException {		
		return LogConfig.getObject().getVal(configKey);	
	}

	public synchronized boolean isConfigPropertyNull() {
		return (config==null)?true:false;
	}
	
}


public void windowHandleTest() throws Exception
{
	try 
	{
		WebElement mainbuyonline= uidriver.findElement(SuperBuyOnline);
		flag=mainbuyonline.isDisplayed();
		Assert.assertTrue(flag,"Main Buy online Element is Missing on th Page");
		
	
	Actions menuAct= new Actions(uidriver);
	menuAct.moveToElement(mainbuyonline).build().perform();
		
		WebElement subbuyonline= uidriver.findElement(childBuyonline);
		flag=subbuyonline.isDisplayed();
		Assert.assertTrue(flag,"Sub Buy online Element is Missing");
		
		parent_window=uidriver.getWindowHandle();
		subbuyonline.click();
		
	for (String ChildBuyonlinewindow : uidriver.getWindowHandles()) 
	{
		uidriver.switchTo().window(ChildBuyonlinewindow);
		
	}
	
	WebElement cart= uidriver.findElement(CartEmpty);
	expected_result="Your cart is empty";
	actual_result=cart.getText().trim();
		Assert.assertEquals(actual_result, expected_result, "Both the Text are Not matching");
		
		uidriver.close();
		
		uidriver.switchTo().window(parent_window);
		
Actions menuact= new Actions(uidriver);
menuAct.moveToElement(mainbuyonline).build().perform();

WebElement postinsta= uidriver.findElement(PostinstaJob);
flag=postinsta.isDisplayed();
Assert.assertTrue(flag, "Post insta Link is Missing");


parent_window=uidriver.getWindowHandle();
postinsta.click();

for (String Childpost : uidriver.getWindowHandles())
{
	uidriver.switchTo().window(Childpost);
}

WebElement postheading= uidriver.findElement(postinstaheading);
actual_result=postheading.getText();
expected_result="Insta Job Posting";

Assert.assertEquals(actual_result, expected_result,"Heading is Not Matching");

uidriver.close();

uidriver.switchTo().window(parent_window);

System.out.println("Manjunath");
		
	} 
	catch (Exception e) 
	{
		
	}
	package myCollections;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class HasMapE {

	/**
	 * @param args
	 */
	public static void main(String[] args)
	{
		// TODO Auto-generated method stub

		Map<Integer, String> hmp= new HashMap<Integer, String>();
		hmp.put(1, "tri");
		hmp.put(2, "sin");
		hmp.put(3, "sgg");
		hmp.put(4, "tri");
		
		Set<Integer> smt= hmp.keySet();
		
		for (Integer slu : smt)
		{
			System.out.println("The values are " + slu);
		}
		
		
		for (Map.Entry<Integer, String> sit : hmp.entrySet()) 
		{
			System.out.println("Manju");
		}
	}

}
package com.training.arrays;

import java.util.ArrayList;

public class Collection1 {

	/**
	 * @param args
	 */
	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub

		ArrayList<String> al= new ArrayList<>();
		al.add("Manju");
		al.add("Harish");
		al.add("Sachin");
		
		for (String Listdetails : al)
		{
			System.out.println(Listdetails);
		}
	}

}
package com.proware.util;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public class BasePageClass
{
	WebDriver uiDriver=null;
	public BasePageClass(WebDriver uiDriver) 
	{
		this.uiDriver=uiDriver;
	}

	public void TypeThisValue(By ele,String val)
	{
		
		uiDriver.findElement(ele).sendKeys(val);
	}


	public void clickThisElement(By ele)
	{
		
		uiDriver.findElement(ele).click();
	}

}
<methods>
                  <exclude name="firsttestmethod"></exclude>
                <include name="secondTestemethod"></include>
                <include name="thirdtestmethod"></include>
                <include name="fourthTestemethod"></include>
                </methods>
				
				Truecaller Has Been Upgraded With Millions Of More Phone Numbers That Are Searchable. Click On The Button Below To Get The Latest Version To Your Phone. Enjoy!
				
				package com.st.pages;

import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.Select;
import org.testng.Assert;

import com.st.common.NKConstants;
import com.st.util.BasePageObject;


public class RegistrationPage extends BasePageObject {
	
	
	private static Logger Log = Logger.getLogger(Logger.class.getName());
	
	/*UI Element Initialization*/
	By curRegMsg = By.tagName("h1");
	By createLoginDetails = By.xpath("//div[@id='lftcont']/div[contains(.,'Create Login Details')]");
	By yourContactInformationSection = By.xpath("//div[@id='lftcont']/div[contains(.,'Your Contact Information')]");
	By yourCurrentEmploymentDetailsSection = By.xpath("//div[@id='lftcont']/div[contains(.,'Your Current Employment Details')]");
	By yourEducationBackgroundSection = By.xpath("//div[@id='lftcont']/div[contains(.,'Your Education Background')]");
	By uploadYourDetailedResumeSection = By.xpath("//div[@class='cls padLR10']/div[contains(.,'Upload your detailed resume')]");
	By mailerAndPrivacySettingsSection = By.xpath("//div[@class='cls padLR10']/div[contains(.,'Mailer and Privacy Settings')]");
	By iAgreeCheckBox = By.xpath("//input[@id='agreetnc']");
	By termsConditionslnk  = By.xpath("//div[@class='cls padLR10']//a[contains(.,'Terms and Conditions')]");
	By joinNaukriButton = By.xpath("//input[@value='Join Naukri.com']");
	By email = By.id("email");//By.xpath("//input[@id='email']");
	By password = By.id("password");
	By emailError = By.xpath("//div[@id='error_email']");
	By confirmPassword = By.id("cpassword");
	By errorAlert = By.xpath("//div[@id='forGotPassword']");
	By alreadyRegisteredMsg = By.xpath("//div[@id='forGotPassword']/div[contains(.,'is already registered with us')]");
	By close = By.xpath("//div[@id='forGotPassword']//a[@title='Close']");
	By passwordError = By.xpath("//div[(@id='error_password')]");
	By confirmPasswordError = By.xpath("//div[(@id='error_cpassword')]");
	By fullName = By.id("cname");
	By curLocationDropdown = By.xpath("//input[@id='inpcityContainerDD']");
	By mobile = By.id("mphone");
	By landlineLink = By.xpath("//a[contains(.,'Landline no.')]");
	By countryCode = By.xpath("//input[@id='countrycode']");
	By areaCode = By.xpath("//input[@id='areacode']");
	By landLine = By.xpath("//input[@id='landline']");
	By mobileError = By.xpath("//div[(@id='error_mphone')]");
	By basicEducationError = By.xpath("//div[(@id='error_ugcourse')]");
	By experienceDropDown = By.xpath("//select[@id='expyear']");
	By skillsAutoSuggest = By.id("keywords1");
	By experienceError = By.xpath("//div[(@id='error_experience')]");
	By designation = By.id("Desig_0");
	By basicEducationDropDown = By.xpath("//select[@id='ugcourse']");
	By browseButton = By.id("inpFile");
	By nonSupportedFileError = By.xpath("//i[@id='atchResErr']");
	By pasteResumeLnk = By.xpath("//a[@id='copy_p']");
	By resumetextArea = By.xpath("//textarea[@id='txtcv']");
	By jobAlertsCheckBox = By.xpath("//div[@class='fleft cls w260']/div[contains(.,'Job Alerts')]");
	By fastforwardEmailsCheckBox = By.xpath("//div[@class='fleft cls w260']/div[contains(.,'Naukri FastForward E-Mails')]");
	By fastforwardSMSCheckBox = By.xpath("//div[@class='fleft cls w260']/div[contains(.,'Naukri FastForward Calls/SMS ')]");
	By notificationsCheckBox = By.xpath("//div[@class='fright w265']/div[contains(.,'Important Notifications from Naukri.com ')]");
	By communicationCheckBox = By.xpath("//div[@class='fright w265']/div[contains(.,'Communication from Clients(Voice/Calls/SMS')]");
	By promoCheckBox = By.xpath("//div[@class='fright w265']/div[contains(.,'Other Promotions/ Special Offers')]");
	By iAgreeError = By.xpath("//span[@id='error_agreetnc']");
	By LocationBangalore = By.linkText("Bengaluru / Bangalore");
	By locationDDError = By.xpath("//div[@id='error_location']");
	By skillsError = By.xpath("//div[@id='error_keywords']");
	
	
	public RegistrationPage(WebDriver driver){
		super(driver);
		
	}
	
	
	
	
	/*Variable Initialization*/
	boolean flag = false;
	
	
	/**This method will help us to verify Registration Page Message
	 * @author Senthil
	 * @return flag
	 */
	public void verifyRegistrationPageMessage(){
		String regMessage = getText(curRegMsg);
		Assert.assertEquals(regMessage, NKConstants.MESSAGE_REGISTRATIONPAGE, "Expected Registration Page Message is not displayed");
		
		
	}
	
	
	/**This method will help us to verify Create Login Details Section
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyCreateLoginDetailsSection(){
		flag = isElementPresent(createLoginDetails);
		Assert.assertTrue(flag, "Create Login Details Section is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Your Contact Information section
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyYourContactInformationSection(){
		flag = isElementPresent(yourContactInformationSection);
		Assert.assertTrue(flag, "Your Contact Information section is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Your Current Employment Details Section
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyYourCurrentEmploymentDetailsSection(){
		flag = isElementPresent(yourCurrentEmploymentDetailsSection);
		Assert.assertTrue(flag, "Your Current Employment Details section is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Your Education Background section
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyYourEducationBackgroundSection(){
		flag = isElementPresent(yourEducationBackgroundSection);
		Assert.assertTrue(flag, "Your Education Background section is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Upload Your Detailed Resume section
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyUploadYourDetailedResumeSection(){
		flag = isElementPresent(uploadYourDetailedResumeSection);
		Assert.assertTrue(flag, "Upload Your Detailed Resume section is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Mailer And Privacy Settings Section
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyMailerAndPrivacySettingsSection(){
		flag = isElementPresent(mailerAndPrivacySettingsSection);
		Assert.assertTrue(flag, "Mailer And Privacy Settings Section is not displayed");
		return flag;
	}
	
	/**This method will help us to verify I Agree Checkbox
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyIAgreeCheckbox(){
		flag = isElementPresent(iAgreeCheckBox);
		Assert.assertTrue(flag, "I Agree Checkbox is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Terms And Conditions link
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyTermsConditionslink(){
		flag = isElementPresent(termsConditionslnk);
		Assert.assertTrue(flag, "Terms And Conditions link is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Join Naukri Button
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyJoinNaukriButton(){
		flag = isElementPresent(joinNaukriButton);
		Assert.assertTrue(flag, "Join Naukri Button is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Email Field
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyEmailField(){
		flag = isElementPresent(email);
		Assert.assertTrue(flag, "Email Field is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Password Field
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyPasswordField(){
		flag = isElementPresent(password);
		Assert.assertTrue(flag, "Password Field is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Email Error
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyEmailError(){
		flag = isElementPresent(emailError);
		Assert.assertTrue(flag, "Email Error is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Email Error
	 * @author Senthil
	 * @return flag
	 */
	public void verifyEmailErrorDisplayed(){
		verifyEmailError();
		String emailErrorDisplayed = getText(emailError);
		Assert.assertEquals(emailErrorDisplayed, NKConstants.ERROR_EMAIL, "Email Error doesnot match with the expected error ");
		
	}
	
	/**This method will help us to verify Password Error
	 * @author Senthil
	 * @return flag
	 */
	public void verifyPasswordErrorDisplayed(){
		verifyPasswordError();
		String passwordErrorDisplayed = getText(passwordError);
		Assert.assertEquals(passwordErrorDisplayed, NKConstants.ERROR_PASSWORD, "Password Error doesnot match with the expected error ");
		
	}
	
	/**This method will help us to verify Confirm Password Field
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyConfirmPassword(){
		flag = isElementPresent(confirmPassword);
		Assert.assertTrue(flag, "Confirm Password Field is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Error Alert
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyErrorAlert(){
		flag = isElementPresent(errorAlert);
		Assert.assertTrue(flag, "Error Alert is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Already Registered Message
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyAlreadyRegisteredMsg(){
		flag = isElementPresent(alreadyRegisteredMsg);
		Assert.assertTrue(flag, "Already Registered Message is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Close(X)
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyClose(){
		flag = isElementPresent(close);
		Assert.assertTrue(flag, "Close(X) is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Password Error
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyPasswordError(){
		flag = isElementPresent(passwordError);
		Assert.assertTrue(flag, "Password Error is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Confirm Password Error
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyConfirmPasswordError(){
		flag = isElementPresent(confirmPasswordError);
		Assert.assertTrue(flag, "Confirm Password Error is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Confirm Password Error displayed
	 * @author Senthil
	 * @return flag
	 */
	public void verifyConfirmPasswordErrorDisplayed(){
		verifyConfirmPasswordError();
		String cPwdError = getText(confirmPasswordError);
		Assert.assertEquals(cPwdError, NKConstants.ERROR_CONFIRMPASSWORD, "Expected Confirm Password Error doesnot match with the error displayed");
	}
	
	/**This method will help us to verify Full Name Field
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyFullNameField(){
		flag = isElementPresent(fullName);
		Assert.assertTrue(flag, "Full Name Field is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Current Location Dropdown
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyCurrentLocationDropdown(){
		flag = isElementPresent(curLocationDropdown);
		Assert.assertTrue(flag, "Current Location Dropdown is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Location Dropdown Error
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyLocationDropdownError(){
		flag = isElementPresent(locationDDError);
		Assert.assertTrue(flag, "Location Dropdown Error is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Location Dropdown Error Displayed
	 * @author Senthil
	 * @return flag
	 */
	public void verifyLocationDDErrorDisplayed(){
		verifyLocationDropdownError();
		String locError = getText(locationDDError);
		Assert.assertEquals(locError, NKConstants.ERROR_CURRENTLOCATION, "Expected Location Dropdown Error doesnot match with the displayed error");
	}
	
	/**This method will help us to verify Mobile Number field
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyMobileNumberField(){
		flag = isElementPresent(mobile);
		Assert.assertTrue(flag, "Mobile Number field is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Landline link
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyLandlineLink(){
		flag = isElementPresent(landlineLink);
		Assert.assertTrue(flag, "Landline link is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Country Code field
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyCountryCode(){
		flag = isElementPresent(countryCode);
		Assert.assertTrue(flag, "Country Code field is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Area Code field
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyAreaCode(){
		flag = isElementPresent(areaCode);
		Assert.assertTrue(flag, "Area Code field is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Land line field
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyLandLine(){
		flag = isElementPresent(landLine);
		Assert.assertTrue(flag, "Land line field is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Mobile number Error
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyMobileNumberError(){
		flag = isElementPresent(mobileError);
		Assert.assertTrue(flag, "Mobile number Error is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Mobile number Error
	 * @author Senthil
	 * @param errorExpectedmobilenumber 
	 * @return flag
	 */
	public void verifyMobileNumberErrorDisplayed(String errorExpectedmobilenumber){
		verifyMobileNumberError();
		String mobileErr = getText(mobileError);
		Assert.assertEquals(mobileErr, errorExpectedmobilenumber, "Expected Mobile number Error doesnot match with the displayed error");
	}
	
	/**This method will help us to verify Skills Error 
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifySkillsError(){
		flag = isElementPresent(skillsError);
		Assert.assertTrue(flag, "Skills Error is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Skills Error Displayed
	 * @author Senthil
	 * @param Skills 
	 * @return flag
	 */
	public void verifySkillsErrorDisplayed(String errorskills){
		verifySkillsError();
		String skillerr = getText(skillsError);
		Assert.assertEquals(skillerr, errorskills, "Expected skills Error doesnot match with the displayed error");
	}
	
	
	/**This method will help us to verify Basic Education Error
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyBasicEducationError(){
		flag = isElementPresent(basicEducationError);
		Assert.assertTrue(flag, "Basic Education Error is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Basic Education Error Displayed
	 * @author Senthil
	 * @return flag
	 */
	public void verifyBasicEducationErrorDisplayed(){
		verifyBasicEducationError();
		String eduError = getText(basicEducationError);
		Assert.assertEquals(eduError, NKConstants.ERROR_BASICEDUCATION, "Basic Education Error is not displayed");
		
	}
	
	/**This method will help us to verify Experience DropDown
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyExperienceDropDown(){
		flag = isElementPresent(experienceDropDown);
		Assert.assertTrue(flag, "Experience DropDown is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Skills AutoSuggest box
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifySkillsAutoSuggest(){
		flag = isElementPresent(skillsAutoSuggest);
		Assert.assertTrue(flag, "skills AutoSuggest box is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Experience Error
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyExperienceError(){
		flag = isElementPresent(experienceError);
		Assert.assertTrue(flag, "Experience Error is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Experience Error displayed
	 * @author Senthil
	 * @return flag
	 */
	public void verifyExperienceErrorDisplayed(){
		verifyExperienceError();
		String expError = getText(experienceError);
		Assert.assertEquals(expError, NKConstants.ERROR_EXPERIENCE, "Experience Error is not displayed");
	}
	
	/**This method will help us to verify Designation field
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyDesignationField(){
		flag = isElementPresent(designation);
		Assert.assertTrue(flag, "Designation field is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Basic Education DropDown
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyBasicEducationDropDown(){
		flag = isElementPresent(basicEducationDropDown);
		Assert.assertTrue(flag, "Basic Education DropDown is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Browse Button
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyBrowseButton(){
		flag = isElementPresent(browseButton);
		Assert.assertTrue(flag, "Browse Button is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Non-Supported File Error
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyNonSupportedFileError(){
		flag = isElementPresent(nonSupportedFileError);
		Assert.assertTrue(flag, "Non-Supported File Error is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Non-Supported File Error Displayed
	 * @author Senthil
	 * @return flag
	 */
	public void verifyNonSupportedFileErrorDisplayed(){
		verifyNonSupportedFileError();
		String fileError = getText(nonSupportedFileError);
		Assert.assertEquals(fileError, NKConstants.ERROR_INVALIDFILEPATH, "Expected Non-Supported File Error doesnot match wjth the displayed error");
			
	}
	
	/**This method will help us to verify Paste Resume Link
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyPasteResumeLnk(){
		flag = isElementPresent(pasteResumeLnk);
		Assert.assertTrue(flag, "Paste Resume Link is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Resume Text Area
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyTextArea(){
		flag = isElementPresent(resumetextArea);
		Assert.assertTrue(flag, "Resume Text Area is not displayed");
		return flag;
	}
	
	/**This method will help us to verify JobAlerts CheckBox
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyJobAlertsCheckBox(){
		flag = isElementPresent(jobAlertsCheckBox);
		Assert.assertTrue(flag, "JobAlerts CheckBox is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Fastforward Emails CheckBox
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyFastforwardEmailsCheckBox(){
		flag = isElementPresent(fastforwardEmailsCheckBox);
		Assert.assertTrue(flag, "Fastforward Emails CheckBox is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Fastforward SMS CheckBox
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyFastforwardSMSCheckBox(){
		flag = isElementPresent(fastforwardSMSCheckBox);
		Assert.assertTrue(flag, "Fastforward SMS CheckBox is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Notifications CheckBox
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyNotificationsCheckBox(){
		flag = isElementPresent(notificationsCheckBox);
		Assert.assertTrue(flag, "Notifications CheckBox is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Communication CheckBox
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyCommunicationCheckBox(){
		flag = isElementPresent(communicationCheckBox);
		Assert.assertTrue(flag, "Communication CheckBox is not displayed");
		return flag;
	}
	
	/**This method will help us to verify Promo CheckBox
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyPromoCheckBox(){
		flag = isElementPresent(promoCheckBox);
		Assert.assertTrue(flag, "Promo CheckBox is not displayed");
		return flag;
	}
	
	/**This method will help us to verify I Agree Error
	 * @author Senthil
	 * @return flag
	 */
	public boolean verifyIAgreeError(){
		flag = isElementPresent(iAgreeError);
		Assert.assertTrue(flag, "I Agree Error is not displayed");
		return flag;
	}
	
	/**This method will help us to verify I Agree Error displayed
	 * @author Senthil
	 * @return flag
	 */
	public void verifyIAgreeErrorDisplayed(){
		verifyIAgreeError();
		String errorIAgree = getText(iAgreeError);
		Assert.assertEquals(errorIAgree, NKConstants.ERROR_IAGREE, "Expected I Agree Error doesnot match with the error displayed");
	}
	
	/**This method will help us to verify RegistrationPage Title
	 * @author Senthil
	 * @return flag
	 */
	public void verifyRegistrationPageTitle(){
		String pageTitle = getPageTitle();
		compareTwoStrings(pageTitle, NKConstants.PAGETITLE_REGISTRATION, "Failed to load Registration page");
		//Assert.assertEquals(pageTitle, NKConstants.PAGETITLE_REGISTRATION, "Failed to load Registration page");
		
	}
	
	/**This method will help us to Click on Email Field
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void clickOnEmailfield() throws Exception{
		Log.info("Before Clicking on Email Field");
		try{
		verifyEmailField();
		uiDriver.findElement(email).click();
		uiDriver.findElement(email).clear();
		Log.info("After Clicking on Email Field");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CLICKING ON EMAIL FIELD:::"+"\n clickOnEmailfield()"+e.getLocalizedMessage());
			
		}
		
	}
	
	/**This method will help us to Click on Password Field
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void clickOnPasswordfield() throws Exception{
		Log.info("Before Clicking on Password Field");
		try{
		verifyPasswordField();
		uiDriver.findElement(password).click();
		uiDriver.findElement(password).clear();
		Log.info("After Clicking on Password Field");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CLICKING ON PASSWORD FIELD"+"\n clickOnPasswordfield()"+e.getLocalizedMessage());
			
		}
		
	}
	
	/**This method will help us to Click on Close(X)
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void clickOnClose() throws Exception{
		Log.info("Before Clicking on Close(X)");
		try{
		verifyClose();
		javaScriptClick(close);
		Log.info("After Clicking on Close(X)");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CLICKING ON CLOSE(x):::"+"\n clickOnClose()"+e.getLocalizedMessage());
		}
				
	}
	
	/**This method will help us to Click on ConfirmPassword field
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void clickOnConfirmPasswordField() throws Exception{
		Log.info("Before Clicking on ConfirmPassword field");
		try{
		verifyConfirmPassword();
		uiDriver.findElement(confirmPassword).click();
		uiDriver.findElement(confirmPassword).clear();
		Log.info("After Clicking on ConfirmPassword field");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CLICKING ON CONFIRM PASSWORD FIELD:::"+"\n clickOnConfirmPasswordField()"+e.getLocalizedMessage());
		}
				
	}
	
	/**This method will help us to Click on Full Name field
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void clickOnNameField() throws Exception{
		Log.info("Before Clicking on Name field");
		try{
		verifyFullNameField();
		uiDriver.findElement(fullName).click();
		Log.info("After Clicking on Name field");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CLICKING ON NAME FIELD:::"+"\n clickOnNameField()"+e.getLocalizedMessage());
		}
	}
	
	/**This method will help us to Click on Currrent Location Dropdown
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void clickOnCurrrentLocationDropdown() throws Exception{
		Log.info("Before Clicking on Location Dropdown");
		try{
		verifyCurrentLocationDropdown();
		uiDriver.findElement(curLocationDropdown).click();
		Log.info("After Clicking on Location Dropdown");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CLICKING ON CURRENT LOCATION DROPDOWN:::"+"\n clickOnCurrrentLocationDropdown()"+e.getLocalizedMessage());
		}
				
	}
	
	/**This method will help us to Click on Landline field
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void clickOnLandlineLink() throws Exception{
		Log.info("Before Clicking on Landline Link");
		try{
		verifyLandlineLink();
		uiDriver.findElement(landlineLink).click();
		Log.info("After Clicking on Landline Link");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CLICKING ON LANDLINE LINK:::"+"\n clickOnLandlineLink()"+e.getLocalizedMessage());
		}
		
				
	}
	
	/**This method will help us to Click on Join Naukri Button
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void clickOnJoinNaukriButton() throws Exception{
		Log.info("Before Clicking on Join Naukri Button");
		try{
		verifyJoinNaukriButton();
		javaScriptClick(joinNaukriButton);
		Log.info("After Clicking on Join Naukri Button");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CLICKING ON JOIN NAUKRI BUTTON:::"+"\n clickOnJoinNaukriButton()"+e.getLocalizedMessage());
		}
				
	}
	
	
	
	/**This method will help us to Click on Skills field
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void clickOnSkillsField() throws Exception{
		Log.info("Before Clicking on Skills field");
		try{
		verifySkillsAutoSuggest();
		javaScriptClick(skillsAutoSuggest);
		Log.info("After Clicking on Skills field");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CLICKING ON SKILLS AUTOSUGGEST FIELD"+"\n clickOnSkillsField()"+e.getLocalizedMessage());
		}
				
	}
	
	/**This method will help us to Click on Mobile field
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void clickOnMobilefield() throws Exception{
		Log.info("Before Clicking on Mobile field");
		try{
		verifyMobileNumberField();
		uiDriver.findElement(mobile).click();
		Log.info("After Clicking on Mobile field");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CLICKING ON MOBILE FILED:::"+"\n clickOnMobilefield()"+e.getLocalizedMessage());
		}
				
	}
	
	/**This method will help us to Click on Paste Resume Link
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void clickOnPasteResumeLink() throws Exception{
		Log.info("Before Clicking on Paste Resume Link");
		try{
		verifyPasteResumeLnk();
		uiDriver.findElement(pasteResumeLnk).click();
		Log.info("After Clicking on Paste Resume Link");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CLICKING ON PASTE RESUME LINK:::"+"\n clickOnPasteResumeLink()"+e.getLocalizedMessage());
		}
	}
	
	/**This method will help us to Click on I Agree CheckBox
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void clickOnIAgreeCheckBox() throws Exception{
		Log.info("Before Clicking on I Agree CheckBox");
		try{
		verifyIAgreeCheckbox();
		uiDriver.findElement(iAgreeCheckBox).click();
		Log.info("After Clicking on I Agree CheckBox");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CLICKING ON I AGREE CHECKBOX:::"+"\n clickOnIAgreeCheckBox()"+e.getLocalizedMessage());
		}
				
	}
	
	/**This method will help us to Select Bangalore from Location Dropdown
	 * @author Senthil
	 * @throws Exception 
	 */	
	public void selectBangalore() throws Exception{
		Log.info("Before Selecting Bangalore from Location Dropdown");
		try{
		uiDriver.findElement(LocationBangalore).click();
		Log.info("After Selecting Bangalore from Location Dropdown");		
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE SELECTING BANGALORE FROM LOCATION DROPDOWN:::"+"\n clickOnBlore()"+e.getLocalizedMessage());	
			
		}
	}
	
	/**This method will help us to Enter text in Email Field
	 * @author Senthil
	 * @param emailId
	 * @throws Exception 
	 */	
	public void enterEmail(String emailID) throws Exception{
		Log.info("Before entering emailId");
		try{
			verifyEmailField();
			uiDriver.findElement(email).clear();
			uiDriver.findElement(email).sendKeys(emailID);
			Log.info("After entering emailId");
			Thread.sleep(2000);
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE ENTERING EMAIL ID:::"+"\n enterEmail()"+e.getLocalizedMessage());
		}
	}
	
	/**This method will help us to Enter text in Email Field
	 * @author Senthil
	 * @param emailId
	 * @throws Exception 
	 *//*	
	public void enterEmail(String emailID) throws Exception{		
		clearAndEnterValueInTextBox(email, emailID);
		}*/
	
	/**This method will help us to Enter text in Password Field
	 * @author Senthil
	 * @param pwd
	 * @throws Exception 
	 */	
	public void enterPassword(String pwd) throws Exception{
		Log.info("Before entering password");
		try{
			verifyPasswordField();
			uiDriver.findElement(password).clear();
			uiDriver.findElement(password).sendKeys(pwd);
			Log.info("After entering password");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE ENTERING PASSWORD:::"+"\n enterPassword(pwd)"+e.getLocalizedMessage());
		}
	}
	
	/**This method will help us to Enter text in Confirm Password Field
	 * @author Senthil
	 * @param cpwd
	 * @throws Exception 
	 */	
	public void enterConfirmPassword(String cpwd) throws Exception{
		Log.info("Before entering confirm password");
		try{
			verifyConfirmPassword();
			uiDriver.findElement(confirmPassword).clear();
			uiDriver.findElement(confirmPassword).sendKeys(cpwd);
			Log.info("After entering confirm password");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE ENTERING CONFIRM PASSWORD:::"+"\n enterConfirmPassword(cpwd)"+e.getLocalizedMessage());
		}
	}
	
	/**This method will help us to Enter text in Full name Field
	 * @author Senthil
	 * @param emailId
	 * @throws Exception 
	 */	
	public void enterFullName(String name) throws Exception{
		Log.info("Before entering Full name");
		try{
			verifyFullNameField();
			uiDriver.findElement(fullName).sendKeys(name);
			Log.info("After entering Full name");
			Thread.sleep(2000);
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE ENTERING FULL NAME:::"+"\n enterFullName()"+e.getLocalizedMessage());
		}
	}
	
	/**This method will help us to Enter Mobile number
	 * @author Senthil
	 * @param mobNum
	 * @throws Exception 
	 */	
	public void enterMobileNumber(String mobNum) throws Exception{
		Log.info("Before entering Mobile number");
		try{
			verifyMobileNumberField();
			uiDriver.findElement(mobile).clear();
			uiDriver.findElement(mobile).sendKeys(mobNum);
			Log.info("After entering Mobile number");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE ENTERING MOBILE NUMBER:::"+"\n enterMobileNumber(mobNum)"+e.getLocalizedMessage());
		}
	}
	
	/**This method will help us to Select Experience from Experience Dropdown
	 * @author Senthil
	 * @param exp
	 * @throws Exception 
	 */	
	public void selectExperience(String exp) throws Exception{
		Log.info("Before Selecting Experience");
		try{
			verifyExperienceDropDown();
			new Select(uiDriver.findElement(experienceDropDown)).selectByVisibleText(exp);
	    	Log.info("After Selecting Experience");
			
			}
		catch(Exception e){
			throw new Exception("FAILED WHILE SELECTING EXPERIENCE:::"+"\n selectExperience(exp)"+e.getLocalizedMessage());
		}
	}
	
	/**This method will help us to enter Designation
	 * @author Senthil
	 * @param design
	 * @throws Exception 
	 */	
	public void enterDesignation(String design) throws Exception{
		Log.info("Before Entering Designation");
		try{
			verifyDesignationField();
			uiDriver.findElement(designation).sendKeys(design);
			Log.info("After Entering Designation");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE ENTERING DESIGNATION:::"+"\n enterDesignation(design)"+e.getLocalizedMessage());
		}
	}
	
	/**This method will help us to enter Skills
	 * @author Senthil
	 * @param skill
	 * @throws Exception 
	 */	
	public void enterSkills(String skill) throws Exception{
		Log.info("Before Entering Skills");
		try{
			clickOnSkillsField();
			uiDriver.findElement(skillsAutoSuggest).sendKeys(skill);
			Log.info("After Entering Skills");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE ENTERING SKILLS:::"+"\n enterSkills(skill)"+e.getLocalizedMessage());
		}
	}
	
	/**This method will help us to select Basic Education
	 * @author Senthil
	 * @param  bedu
	 * @throws Exception 
	 */	
	public void selectBasicEducation(String bedu) throws Exception{
		Log.info("Before Selecting Basic Education");
		try{
			verifyBasicEducationDropDown();
			new Select(uiDriver.findElement(basicEducationDropDown)).selectByVisibleText(bedu);
			Log.info("After Selecting Basic Education");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE SELECTING BASIC EDUCATION:::"+"\n selectBasicEducation(bedu)"+e.getLocalizedMessage());
		}
	}
	
	/**This method will help us to choose file path using browse button
	 * @author Senthil
	 * @param fPath
	 * @throws Exception 
	 */	
	public void chooseFilepath(String fPath) throws Exception{
		Log.info("Before Choosing file path");
		try{
			verifyBrowseButton();
			uiDriver.findElement(browseButton).sendKeys(fPath);
			Log.info("After Choosing file path");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE CHOOSING FILE PATH:::"+"\n chooseFilepath(fPath)"+e.getLocalizedMessage());
		}
	}
	
	/**This method will help us to Enter text in Resume text area
	 * @author Senthil
	 * @param  rText
	 * @throws Exception 
	 */	
	public void enterResumeText(String rText) throws Exception{
		Log.info("Before Entering text in Resume text area");
		try{
			verifyTextArea();
			uiDriver.findElement(resumetextArea).sendKeys(rText);
			Log.info("After Entering text in Resume text area");
		}
		catch(Exception e){
			throw new Exception("FAILED WHILE ENTERING TEXT IN RESUME TEXT AREA:::"+"\n enterResumeText(rText)"+e.getLocalizedMessage());
		}
	}


	public void verifyUploadedFile() {
		verifyBrowseButton();
		String docName = uiDriver.findElement(browseButton).getAttribute("value").trim();
		Assert.assertEquals(docName, NKConstants.UPLOADEDFILENAME, "The uploaded file names doesnot match with the displayed file name");
  	}
	
}
package com.ppp.erail;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class RedBuss
{
WebDriver uidriver;
	
	@BeforeTest
	public void setup()
	{
		uidriver= new FirefoxDriver();
		uidriver.get("https://www.redbus.in/");
		uidriver.manage().window().maximize();
		uidriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
	}
		@AfterTest
		public void teardown() throws Exception
		{
			uidriver.quit();
		}
		
		@Test
		public void searchMe() throws Exception
		{
			try 
			{
				
				uidriver.findElement(By.id("txtSource")).sendKeys("bangalore");
				uidriver.findElement(By.id("txtDestination")).sendKeys("Pune");
				
				uidriver.findElement(By.id("txtOnwardCalendar")).click();
				Thread.sleep(5000);
				
				String mon= uidriver.findElement(By.xpath("//div[@id='rbcal_txtOnwardCalendar']/table[1]//tr[@class='monthHeader']/td[2]")).getText();
				
				System.out.println(mon);
				
				List<WebElement> dates=uidriver.findElements(By.xpath("//div[@id='rbcal_txtOnwardCalendar']/table[1]//td"));
					
				List<String> mos= new ArrayList<String>();
				mos.add("Jan  2016");
				mos.add("Feb 2016");
				mos.add("Mar  2016");
				mos.add("Apr  2016");
				mos.add("May 2016");
				mos.add("Jun 2016");
				mos.add("Jul  2016");
				mos.add("Aug 2016");
				mos.add("Sep  2016");
				mos.add("Oct 2016");
				mos.add("Nov  2016");
				mos.add("Dec 2016");
				
				
				int ct= dates.size();
				
				for(int i=0; i<=ct; i++)
				{
					String date=dates.get(i).getText();
					if(date.equalsIgnoreCase("28"))
					{
						dates.get(i).click();
						break;
					}
				}
							Thread.sleep(5000);
				uidriver.findElement(By.xpath(".//*[@id='searchBtn']")).click();
				Thread.sleep(3000);
				
				List<WebElement>  list= uidriver.findElements(By.xpath("//div/div/span[2]/span"));
				
			System.out.println("Size="+list.size());
			
				// creating  new  array List
					ArrayList<String>	StrPrice= new ArrayList<String>();
					
					for(int i=0; i<list.size(); i++)
					{
					//adding items to arraylist
						StrPrice.add(list.get(i).getText());
						
					}
				
					System.out.println(StrPrice);
					
					//Converting string array to int array
					List<Integer> intprice= new ArrayList<Integer>(StrPrice.size());
					
					for (String str : StrPrice) 
					{
						//Adding values to int list
						intprice.add(Integer.valueOf(str));
					}
					
					
					// converting to TreeSet
					TreeSet<Integer> tr= new TreeSet<Integer>(intprice);
				
					//Printing Last value
					System.out.println(tr.last());			
				
			} 
			catch (Exception e)
			{
				throw new Exception(e.getMessage());
			}
		}
		
		public  int getMonthNum(String month){
			for (Month mName : Month.values()) {
			if(mName.name().equalsIgnoreCase(month))
			return mName.value;
			}
			return -1;
			}
		
		public enum Month {
			January(1), February(2), March(3), April(4), May(5), June(6) , July(7), August(8), September(9), October(10), November(11),December(12);
			private int value;

			private Month(int value) {
			this.value = value;
			}
		}
}
package com.proware.tests;

import java.io.IOException;

import org.testng.annotations.Test;

import com.proware.pages.SearchPage;
import com.proware.pages.SelectBusPage;
import com.proware.util.BaseTest;
import com.proware.util.ReadConfig;

public class FareTest extends BaseTest
{
	SearchPage objSearchPage=null;
	SelectBusPage objSelectBusPage=null;
	
	@Test
	public void getFare() throws IOException, Exception
	{
		String srcname=ReadConfig.readConfigFile("srcname");
		String destname=ReadConfig.readConfigFile("destname");
		String dateval=ReadConfig.readConfigFile("dateval");
		
		objSearchPage=new SearchPage(uiDriver);
		objSearchPage.enterSrcPlace(srcname);
		objSearchPage.enterDestPlace(destname);
		objSearchPage.enterDate(dateval);
		objSelectBusPage=objSearchPage.clickSearchBtn();
		objSelectBusPage.getMaxFare();
		
		
	}

}
public static String readConfig(String property) throws Exception
	{
		FileInputStream filestream= new FileInputStream(".\\config.properties");
		
		Properties prop= new Properties();
		prop.load(filestream);
		
		String Propvalue= prop.getProperty(property);
		return Propvalue;
		
		
		
		
		Properties prop= new Properties();
		prop.setProperty("BeforeGoingtowar", "newPropertyfile I ahve created");
		
		FileWriter writer= new FileWriter("confi.Property");
		prop.store(writer, "Manjunath");
		
		writer.close();
		
		package com.proware.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import com.proware.util.BasePageClass;

public class SelectBusPage extends BasePageClass
{
	public WebDriver uiDriver=null;
	public SelectBusPage(WebDriver uiDriver) 
	{
		super(uiDriver);
		this.uiDriver=uiDriver;
		
	}
	//form[@id='u_ps_0_0_f']/div[2]/div/div[2]/div[@class='UFICommentContentBlock']
	/****************************************/
	By fareLink=By.partialLinkText("Fare");
	By farefield=By.xpath("(//div[@class='busItem clearfix'])[1]//div[@class='fareBlock busDataBlock']/div/span[2]");
	
	public void clickOnFare() throws Exception
	{
		try
		{
			clickThisElement(fareLink);
		}
		catch(Exception e)
		{
			throw new Exception("unable to type srcname...e.printStackTrace()");
		}
	}
	
	
	public void getMaxFare() throws Exception
	{
		try
		{
			clickOnFare();
			String MaxFare=uiDriver.findElement(farefield).getText();
			System.out.println("Maxium Fare is "+MaxFare);
			
			
		}
		catch(Exception e)
		{
			throw new Exception("unable to type srcname...e.printStackTrace()");
		}
	}

}
package com.proware.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import com.proware.util.BasePageClass;
import com.proware.util.ReadConfig;

public class SearchPage extends BasePageClass
{
	WebDriver uiDriver=null;
	public SearchPage(WebDriver uiDriver)
	{
		super(uiDriver);
		this.uiDriver=uiDriver;
	}
	
	
	/*********************UI Elements******************/
	By srcfield=By.id("txtSource");
	By destfield=By.id("txtDestination");
	By datefield=By.id("txtOnwardCalendar");
	By SearchBtn=By.id("searchBtn");
	
	
	public void enterSrcPlace(String srcname) throws Exception
	{
		try
		{
			TypeThisValue(srcfield, srcname);
		}
		catch(Exception e)
		{
			throw new Exception("unable to type srcname...e.printStackTrace()");
		}
		
	}
	
	
	public void enterDestPlace(String destname) throws Exception
	{
		try
		{
			TypeThisValue(destfield, destname);
		}
		catch(Exception e)
		{
			throw new Exception("unable to type srcname...e.printStackTrace()");
		}
		
	}
	
	
	public void enterDate(String datevalue) throws Exception
	{
		By dateele=By.xpath("//div[@id='rbcal_txtOnwardCalendar']/table[@class='monthTable first']//td[contains(text(),'"+datevalue+"')]");
		try
		{
			clickThisElement(datefield);
			clickThisElement(dateele);
		}
		catch(Exception e)
		{
			throw new Exception("unable to type srcname...e.printStackTrace()");
		}
		
	}
	
	public SelectBusPage clickSearchBtn() throws Exception
	{
		try
		{
			clickThisElement(SearchBtn);
		}
		catch(Exception e)
		{
			throw new Exception("unable to type srcname...e.printStackTrace()");
		}
		return new SelectBusPage(uiDriver);
	}

}

package com.proware.AllExamples;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class RedBus {
	 
	 WebDriver dir = new FirefoxDriver();
	 
	 @BeforeTest
	 
	 public void beforetest()
	 {
	  dir.get("https://www.redbus.in/");
	  dir.manage().window().maximize();
	    
	 }
	 
//	 @AfterTest(enabled=false)
//	 public void aftertest()
//	 {
//	  dir.close();
//	  
//	 }
	 
	 
	 @Test
	 
	 public void test1() throws Exception
	 {
	  dir.findElement(By.id("txtSource")).sendKeys("Bengaluru");
	  dir.findElement(By.id("txtDestination")).sendKeys("Chennai");
	  
	  
	  dir.findElement(By.id("txtOnwardCalendar")).click();
	  Thread.sleep(1000);
	 
	  java.util.List<WebElement> calender = dir.findElements(By.id(".//*[@id='rbcal_txtOnwardCalendar']/table"));
	  
	  int cal = calender.size();
	  
	  System.out.println(cal);
	  
	  Thread.sleep(1000);
	  for(int i=0;i<cal;i++)
	  {
	  String date = calender.get(i).getText();
	   
	  Thread.sleep(1000);
	  
	   if(date.equalsIgnoreCase("20"))
	   {
	    Thread.sleep(1000);
	    
	    calender.get(i).click();
	    
	   }
	   
	  }
	  
	  Thread.sleep(2000);
	    
	  dir.findElement(By.id("searchBtn")).click();
	    
	  Thread.sleep(3000);
	 }
	 
	 //https://www.youtube.com/watch?v=d1w6LQTVg1w
	 
	 
		 

	}
	
	package com.proware.util;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.browserlaunchers.locators.GoogleChromeLocator;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.proware.util.ReadConfig;

public class BaseTest 
{
	public static WebDriver uiDriver;
	@BeforeMethod
	public void BFMethod() throws IOException
	{
	
	String browser=ReadConfig.readConfigFile("browser");
	String url=ReadConfig.readConfigFile("url");
	
	if(browser.equalsIgnoreCase("FF"))
	{
		uiDriver=new FirefoxDriver();
	}
	else if(browser.equalsIgnoreCase("GC"))
	{
		uiDriver=new ChromeDriver();
	}
	else if(browser.equalsIgnoreCase("IE"))
	{
		uiDriver=new InternetExplorerDriver();
	}
	
	uiDriver.get(url);
	uiDriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
	uiDriver.manage().window().maximize();
	


}
	
	
	}
package com.proware.util;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public class BasePageClass
{
	WebDriver uiDriver=null;
	public BasePageClass(WebDriver uiDriver) 
	{
		this.uiDriver=uiDriver;
	}

	public void TypeThisValue(By ele,String val)
	{
		
		uiDriver.findElement(ele).sendKeys(val);
	}


	public void clickThisElement(By ele)
	{
		
		uiDriver.findElement(ele).click();
	}

}
package com.proware.util;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;

public class ReadConfig 
{
	public  static String readConfigFile(String property) throws IOException
	{
		FileInputStream fis=new FileInputStream(".\\Config.properties");
		Properties prop=new Properties();
		prop.load(fis);
		
		String propval=prop.getProperty(property);
//		System.out.println(propval);
		return propval;
	}

}
1.What is abstraction and Encapsulation
2.What are the different annotations of TestNG
3.What is the difference between Before Test and Before Method annotation.
4.logic for copyig the data from one webtable and making sure the data is not changed when table is zoomed.
5.what is the differnce between collections and Sets
6.Why do you think Page Object model will better suit your project.
7.How is interface used in your prject explain me the main use of it.
8.Question on SubQuery of Sql by taking some table as example
9.Query on SubGroup by taking an example.
10.Query on the Inner join, table was given.
11.which is better among subquery and joins.

 <classes>
      <class name="com.ppp.tests.AlertsTest"></class>
    </classes>
  </test>

<test name="SmokeTest">
  <classes>
   <class name="com.ppp.tests.JavaScriptExamplesTest"></class>
  </classes>
  </test>
  
  
  <test name="Sanity Test">
  <classes>
  <class name="com.ppp.tests.JavaScriptsTest"></class>
  </classes>
  </test>
  package com.proware.tests;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.browserlaunchers.locators.GoogleChromeLocator;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.proware.util.ReadConfig;

public class BaseTest 
{
	public static WebDriver uiDriver;
	@BeforeMethod
	public void BFMethod() throws IOException
	{
	
	String browser=ReadConfig.readConfigFile("browser");
	String url=ReadConfig.readConfigFile("url");
	
	if(browser.equalsIgnoreCase("FF"))
	{
		uiDriver=new FirefoxDriver();
	}
	else if(browser.equalsIgnoreCase("GC"))
	{
		uiDriver=new ChromeDriver();
	}
	else if(browser.equalsIgnoreCase("IE"))
	{
		uiDriver=new InternetExplorerDriver();
	}
	
	uiDriver.get(url);
	uiDriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
	uiDriver.manage().window().maximize();
	
//	@Test
//	public void test() throws IOException
//	{
//		ReadConfig.readConfigFile("url");
//	}

}
	
	@Test
	public void test()
	{
	}
	}
package com.proware.util;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;

public class ReadConfig 
{
	public  static String readConfigFile(String property) throws IOException
	{
		FileInputStream fis=new FileInputStream(".\\Config.properties");
		Properties prop=new Properties();
		prop.load(fis);
		
		String propval=prop.getProperty(property);
//		System.out.println(propval);
		return propval;
	}

}


public boolean isPrmenumber(int numb)
	{
		for(int i=2; i<=numb/2; i++)
		{
			if(numb%i==0)
			{
				return false;
			}
		}
			
		
		return true;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		PrimeNumber pn= new PrimeNumber();
		System.out.println(pn.isPrmenumber(11));
	}

}
/* Variables*/
	
	String PageTitle=null;
	boolean flag=false;
	String Parent_window=null;
	String Child_window=null;
	String actual_Result=null;
	String expected_Result=null;
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	
	public boolean verifyComposeMessage() throws Exception
	{
		Log.info("Verification of Compose Message");
		try {
			flag=uiDriver.findElement(composeMessagelbl).isDisplayed();
			Assert.assertTrue(flag, "Compose Message Label is not displaying");
			return flag;
		} catch (Exception e)
		{
			throw new Exception("FAILED VERIFYING THE COMPOSE MESSAGE TEXT " + "\n verifyComposeMessage " + e.getLocalizedMessage());
		}
		
		//div[@id='ctl00_ContentPlaceHolder1_CalExtStartDate_popupDiv']/div[2]//table[@id='ctl00_ContentPlaceHolder1_CalExtStartDate_daysTable']/tbody/tr/td
	}
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	public boolean verifySelectPracticeandPatientLabel() throws Exception
	{
		Log.info("Verification of Select Practice and Patient label");
		try 
		{
			flag=uiDriver.findElement(selectpracticeandpatientlabel).isDisplayed();
			Assert.assertTrue(flag, "Select Practice and Patient Label is Missing");
			return flag;
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE SELECT PRACTICE AND PATIENT LABEL" + "\n verifySelectPracticeandPatientLabel " +e.getLocalizedMessage());
		}
	}
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	public boolean practiceLabel() throws Exception
	{
		Log.info("Verification of Practice label");
		try 
		{
			flag=uiDriver.findElement(Practicelabel).isDisplayed();
			Assert.assertTrue(flag, "Practice Label is Missing");
			return flag;
		} catch (Exception e) 
		{
			throw new Exception("FAILED WHILE VERIFYING THE PRACTICE LABEL" + "\n practiceLabel" + e.getLocalizedMessage() );
		}
	}
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	public void selectPracticeDropdown(String practicename) throws Exception
	{
		Log.info("Verification of Practice dropdown");
		
		try
		{
		//selectDropDown(Practicedropdown, "7c46a640-d4f4-4987-bbc1-cfd0c446b552");
			
			new Select(uiDriver.findElement(Practicedropdown)).selectByValue(practicename);
		} 
		catch (Exception e) 
		{
			throw new Exception("FAILED WHILE SELECTING THE PRACTICE DROPDOWN" +"\n selectPracticeDropdown" + e.getLocalizedMessage());
		}
	}
	
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	public boolean verifySelectMessageCategoryandRecipientTextisPresent() throws Exception
	{
		Log.info("Verification of SelectMessageCategoryandRecipientTextisPresent on Page" );
		try 
		{
			flag=isTextPresent(NKConstants.selectMessageCategoryText);
			return flag;
		} 
		catch (Exception e)
		{
			throw new Exception("FAILED WHILE VERIFING THE TEXT OF  " + "\n verifySelectMessageCategoryandRecipientTextisPresent" + e.getLocalizedMessage());
		}
		
	}
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	public boolean verifyCategoryElement() throws Exception
	{
		Log.info("verification of category element or label on the page");
		try {
			
			flag= isElementPresent(categorylabel);
			Assert.assertTrue(flag, "Category Label is Missing on the Page");
			return flag;
		} catch (Exception e) {
			throw new Exception("FAILED WHILE VERIFYING THE CATEGORY LABEL" +" \n verifyCategoryElement()" + e.getMessage());
		}
	}
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	public boolean verifyCategoryDropdown() throws Exception
	{
		Log.info("Verification of Category Dropdown Present on the Page");
		
		try {
			flag=isElementPresent(categorydropdownselection);
			Assert.assertTrue(flag, "Category Dropdwon box is Missing");
			return flag;
			
		} catch (Exception e) {
			throw new Exception("FAILED WHILE VERIFYING THE CATEGORY DROPDOWN ELEMENT" +"\n verifyCategoryDropdown "+ e.getLocalizedMessage());
		}
	}
	
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	public void selectValueFromCategoryDropdown(String categorySelect) throws Exception
	{
		Log.info("Category Drop down selection");
		try
		{
			//selectDropDown(categorydropdownselection, "9a983f9f-0cad-4751-8988-c93707a54ddf");
			new Select(uiDriver.findElement(categorydropdownselection)).selectByVisibleText(categorySelect);
		} 
		catch (Exception e) 
		{
		throw new Exception("FAILED WHILE SELECTING THE VALUE FROM THE CATEGORY DROPDOWN " + "\n selectValueFromCategoryDropdown" + e.getLocalizedMessage());
		}
	}
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	public void selectValuefromToDropDown(int ToProvider) throws Exception
	{
		Log.info("Selection of dropdown value from To Box");
		
		try {
			//selectDropDown(Todropdown, "d7b924f1-c28f-4bd2-96d5-08a6ede37ed2");
			new Select(uiDriver.findElement(Todropdown)).selectByIndex(ToProvider);
			
		} catch (Exception e) 
		{
		throw new Exception("FAILED WHILE SELECTING THE VALUE FROM TO DROPDOWN " +"\n selectValuefromToDropDown"  + e.getLocalizedMessage());
		}
	}
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	
	public boolean verifySubjectLabel() throws Exception
	{
		Log.info("Verification of Subject Label");
		
		try {
			flag=isElementPresent(subjectlabel);
			
			Assert.assertTrue(flag, "Subject Label IS Missing");
			return flag;
		} 
		catch (Exception e) {
			throw new Exception("FAILED WHILE VERIFYING THE SUBJECT LABEL" + " \n verifySubjectLabel" + e.getMessage());
		}
	}
	
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	public boolean verifySubjectTextbox() throws Exception
	{
		Log.info("Verification of subject Textbox");
		try {
			flag=isElementPresent(subjectText);
			Assert.assertTrue(flag, "Subject Textbox Element is missing");
			return flag;
			
		} catch (Exception e) {
		throw new Exception("FAILED WHILE VERIFYING THE SUBJECT TEXT BOX" +"\n verifySubjectTextbox" + e.getLocalizedMessage());
		}
	}
	
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	
	public void enterSubjectTextEntry(String subject) throws Exception
	{
		Log.info("User Entering Subject Text entry");
		try {
			uiDriver.findElement(subjectText).sendKeys(subject);
		} catch (Exception e) {
			throw new Exception("FAILED WHILE ENTERING THE SUBJECT TEXT BOX "+"\n  enterSubjectTextEntry" + e.getLocalizedMessage());
		}
	}

	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	
	public boolean verifyMessageBoxLabel() throws Exception
	{
		Log.info("Verification of MessageBox label");
		try {
			flag=isElementPresent(Messagelabel);
			Assert.assertTrue(flag, "Message Label is Missing on the screen");
			return flag;
		} catch (Exception e) {
			throw new Exception("FAILED WHILE VERIFYING THE SUBJECT LABEL" + "\n verifyMessageBoxLabel" + e.getLocalizedMessage());
		}
	}
	
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	public void enterMessageText(String msg) throws Exception
	
	{
		Log.info("Enter Message box text box");
		try {
			uiDriver.findElement(MessageTextBox).sendKeys(msg);
		} catch (Exception e) {
			throw new Exception(	"FAILED WHILE ENTERING SUBJECT TEXTBOX " +"\n enterMessageText " + e.getLocalizedMessage());
		}
	}
	/**********************************************************************************************************************************************************************************************/
	/**
	 * @author manjunathr
	 * @return flag
	 * @throws Exception
	 * This method will check whether DashBoard message is displayed on page.
	 */
	
	public RequestSubmitted1Page clickonSubmitButtonOfComposeMessage() throws Exception
	{
		Log.info("Clicking on submit button");
		try {
			uiDriver.findElement(SubmitButton).click();
		} catch (Exception e) {
			throw new Exception("FAILED WHILE CLICKING ON SUBMIT BUTTON " +"\n clickonSubmitButtonOfComposeMessage" + e.getLocalizedMessage());
		}
		return new RequestSubmitted1Page(uiDriver);
	}
	
}

package com.wowcher.pages;

import com.wowcher.testing.framework.pages.BookmarkableWebPage;
import com.wowcher.testing.framework.webdriver.LazyWebElement;
import junit.framework.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;

public class LoginPage extends WowcherWebPage implements BookmarkableWebPage {
	

    LazyWebElement loginButton = new LazyWebElement(getWebDriver(),(By.name(getResource("loginpage.login-btn"))));
    LazyWebElement emailInput = new LazyWebElement(getWebDriver(),By.id(getResource("loginpage.email-textbox")));
    LazyWebElement passwordInput = new LazyWebElement(getWebDriver(),By.id(getResource("loginpage.password-textbox")));
    LazyWebElement passwordError = new LazyWebElement(getWebDriver(),By.id(getResource("loginpage.password-error.id")));
    LazyWebElement emailError = new LazyWebElement(getWebDriver(),By.id(getResource("loginpage.email-error.id")));
    LazyWebElement validationError = new LazyWebElement(getWebDriver(),By.id(getResource("loginpage.validationerror.css")));


    @Override
	public String getUrl() {
		return BASE_URL + getResource("loginpage.uri");
	}
	
	@Override
	public boolean isOpened() {
		
		try {
            //TODO: update this is opened to be correct
			return true;
		} catch(NoSuchElementException e){
			return false;
		}
	}
	
	public HomePage performLoginAndSucceed(String email, String password) {
		// Set user name and password for admin
		emailInput.sendKeys(email);
		passwordInput.sendKeys(password);

		loginButton.click();
		
		try {
			return new HomePage();
		}catch(IllegalStateException e){
			Assert.assertTrue(e.getMessage(),false);
			return new HomePage();
		}	
	}

    public HomePage performLoginAndSucceedWithWalletUser() {
        // Set user name and password for admin
        emailInput.sendKeys(getResource("frontend.wallet.user"));
        passwordInput.sendKeys(getResource("frontend.wallet.password"));

        loginButton.click();

        try {
            return new HomePage();
        }catch(IllegalStateException e){
            Assert.assertTrue(e.getMessage(),false);
            return new HomePage();
        }
    }


	
	public LoginPage performLoginAndFail(String email, String password) {
		
		
		emailInput.sendKeys(email);
		passwordInput.sendKeys(password);

		loginButton.click();
		return new LoginPage();
	
	}
	
	public String getPasswordError() {
		
		return passwordError.getText();
		
	}
	
	public String getEmailError() {
		
		return emailError.getText();
		
	}
	
	public String getValidationError(){
		try {
			return validationError.getText();
		}catch(NoSuchElementException e) {
			Assert.fail("Cannot find validation error element");
			return "";
		}
		
		
	}

}
package com.wowcher.pages;

import java.util.List;

import junit.framework.Assert;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;

import com.wowcher.testing.framework.pages.BookmarkableWebPage;


public class BonusDealPage extends WowcherWebPage implements BookmarkableWebPage {
	
	
	@Override
	public String getUrl() {
		return BASE_URL + getResource("homepage.uri");
	}
	
	@Override
	public boolean isOpened() {
		return getWebDriver().getTitle().equals(getResource("homepage.title"));
	}

			

public void clickView () {
	
	WebElement elem = getWebDriver().findElement(By.xpath(getResource("bonusdeal")));
	

	 if (elem != null )  
		  elem.click();
	     //Assert.assertEquals("There are no deals available today for this location",getWebDriver().findElement(By.xpath(".//*[@id='dodsite']/div[3]/div[1]/h1/span[1]")).getText());
		 
}

public HomePage clickViewOnFirstDeal() {
	
		try {
			getWebDriver().findElement(By.cssSelector(getResource("bonusdeal.first.view-button.css"))).click();
		}catch(NoSuchElementException e) {
			Assert.fail("Cannot find first bonus deal view button");
		}
	
		try {
			return new HomePage();
		}catch(IllegalStateException e){
			Assert.fail(e.getMessage());
			return new HomePage();
		} 
	
}


public void currentDealBonusDeals() 

{



        WebElement bonusDeals = getWebDriver().findElement(By.id("bonus-deals"));



        if (bonusDeals != null)

        {

                WebElement mainDeal;

                List<WebElement> bonus_deal_title;

                String expected = null;

                String actual = null;

                        

                        

                List<WebElement> deals = bonusDeals.findElements(By.linkText("View this deal"));

                if (deals != null)

                {

                        for (int i = 1; i < deals.size(); i++)

                        {

                                bonus_deal_title = bonusDeals.findElements(By.className("deal-list-content"));

                                expected = bonus_deal_title.get(i).getText();

                                System.out.println("Expected: " + expected);

                                deals.get(i).click();

                

                                mainDeal = getWebDriver().findElement((By.cssSelector(".promo-header.main-deal-header.mvtest_header_v1")));

                                actual = mainDeal.getText();

                                          
                

                                bonusDeals = getWebDriver().findElement(By.id("bonus-deals"));

                                deals = bonusDeals.findElements(By.linkText("View this deal"));

                        }

                }

               

        }

}

}



/**
 * 
 */
package uk.co.wowcher.test.db;

import javax.annotation.Resource;

import org.junit.runner.RunWith;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author jamie.hughes
 *
 */

@ContextConfiguration(locations = { "/wow-db-context.xml" })
@TransactionConfiguration(transactionManager = "transactionManager", defaultRollback = false)
@Transactional
public abstract class BaseTest implements ApplicationContextAware {

    protected ApplicationContext applicationContext;
	
	@Resource protected DatabaseHelper databaseHelper;

    /**
     * @param applicationContext
     * @throws BeansException
     */
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }
}

String[] names={"this", "is", "java" , "test","this", "is", "java" , "test" ,"this", "is", "java" , "test" };
		
		List<String> nm= Arrays.asList(names);
		System.out.println(nm);
		
		List<String> nb= new ArrayList<String>(Arrays.asList(names));
		System.out.println(nb);
		
		Set<String> sn= new HashSet<String>(nb);
		System.out.println(sn);
		
		
		ArrayList<Integer>al= new ArrayList<Integer>();
	
		for (int i : num) 
		{
			//System.out.println(i);
			al.add(i);
			
		}
	
		System.out.println(al);
		System.out.println("after sort and removing duplicates");
		
	TreeSet<Integer> ts= new TreeSet<Integer>(al);
	System.out.println(ts);
	
		int max=(int) Collections.max(Arrays.asList(numbers));
		
		[Rs 425, Rs 475, Rs 450, Rs 1750, Rs349, Rs 600, Rs 650, Rs 400, Rs 425, Rs1000, Rs 1420, Rs 1250, Rs1700, Rs 550, Rs 999, Rs 750, Rs 600, Rs 400, Rs 500]
		
	
